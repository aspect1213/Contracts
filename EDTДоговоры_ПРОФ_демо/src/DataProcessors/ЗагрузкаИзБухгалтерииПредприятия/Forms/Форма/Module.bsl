#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Определим, серверная ли это база.
	ПараметрыКлиента = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере();
	СтрокаСоединенияИнформационнойБазы = ПараметрыКлиента.Получить("СтрокаСоединенияИнформационнойБазы");
	КлючиИЗначения = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы);
	ЭтоСервернаяБаза = КлючиИЗначения.Свойство("Srvr");
	
	ПараметрыПодключения = ОбменДаннымиБухгалтерияПредприятияВызовСервера.ПолучитьПараметрыПодключения();
	СтрокаПодключения = ОбменДаннымиБухгалтерияПредприятияВызовСервера.ПолучитьСтрокуПодключения(
		ПараметрыПодключения,
		Истина);
	
	// Выбор загружаемых данных может быть передан при открытии.
	Если Параметры.Свойство("ЗагружатьКонтрагентов")
		Или Параметры.Свойство("ЗагружатьНоменклатуру") Тогда
		
		Элементы.СтраницыЗагружаемыеДанные.ТекущаяСтраница
			= Элементы.СтраницаНетВыбораЗагружаемыхДанных;
		
		Параметры.Свойство("ЗагружатьКонтрагентов", ЗагружатьКонтрагентов);
		Параметры.Свойство("ЗагружатьНоменклатуру", ЗагружатьНоменклатуру);
		
	Иначе
		
		Элементы.СтраницыЗагружаемыеДанные.ТекущаяСтраница
			= Элементы.СтраницаВыборЗагружаемыхДанных;
			
		ЗагружатьКонтрагентов = ПараметрыПодключения.ЗагружатьКонтрагентов;
		ЗагружатьНоменклатуру = ПараметрыПодключения.ЗагружатьНоменклатуру;
		
	КонецЕсли;
	
	Параметры.Свойство("НачалоРаботы", НачалоРаботы);
	
	ИмяПользователя = ПараметрыПодключения.ИмяПользователя;
	ПарольПользователя = ПараметрыПодключения.ПарольПользователя;
	
	// Возможно, это возобновление запуска после перерегистрации компоненты.
	Если ПараметрыПодключения.ПродолжитьПослеНачалаРаботыСистемы = Истина
		И ПараметрыПодключения.ИмяНастраивающегоПользователя = ИмяПользователя() Тогда
		ТекущийШагПодключения = ПараметрыПодключения.ТекущийШагПодключения;
	Иначе
		ЗаполнитьСписокВыбораИнформационныхБаз();
	КонецЕсли;
	
	// Установим фокус на первый незаполненный элемент.
	Если Не ЗначениеЗаполнено(СтрокаПодключения) Тогда
		ТекущийЭлемент = Элементы.СтрокаПодключения;
	ИначеЕсли Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ТекущийЭлемент = Элементы.ИмяПользователя;
	ИначеЕсли Не ЗначениеЗаполнено(ПарольПользователя) Тогда
		ТекущийЭлемент = Элементы.ПарольПользователя;
	Иначе
		ТекущийЭлемент = Элементы.Загрузить;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
		И СисИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Загрузка поддерживается только на платформе Windows.'"));
		Возврат;
		
	КонецЕсли;
	
	// Возможно, это возобновление запуска после перерегистрации компоненты.
	Если ТекущийШагПодключения <> "" Тогда
		ПодключитьсяИЗагрузитьПослеПроверки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьсяИЗагрузить(Команда)
	
	Если Не ЗначениеЗаполнено(СтрокаПодключения) Тогда
		ТекущийЭлемент = Элементы.СтрокаПодключения;
		ПоказатьПредупреждение(, НСтр("ru = 'Вставьте строку подключения.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ТекущийЭлемент = Элементы.ИмяПользователя;
		ПоказатьПредупреждение(, НСтр("ru = 'Введите имя пользователя.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗагружатьКонтрагентов
		И Не ЗагружатьНоменклатуру Тогда
		ТекущийЭлемент = Элементы.ЗагружатьКонтрагентов;
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите загружаемые данные.'"));
		Возврат;
	КонецЕсли;
	
	ПодключитьсяИЗагрузитьПослеПроверки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Разбирает строку подключения на параметры подключения.
//
&НаСервере
Функция РазобратьСтрокуПодключенияСервер()
	
	ПараметрыПодключения = ОбменДаннымиБухгалтерияПредприятияВызовСервера.
		ИнициализироватьНовыеПараметрыПодключения();
		
	ОбменДаннымиБухгалтерияПредприятияВызовСервера.РазобратьСтрокуПодключения(
		СтрокаПодключения,
		ПараметрыПодключения);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

// Записывает в константу параметры подключения к ИБ-источнику.
//
&НаСервере
Функция УстановитьПараметрыПодключенияСервер(ПараметрыПодключения)
	
	ОбменДаннымиБухгалтерияПредприятияВызовСервера.УстановитьПараметрыПодключения(ПараметрыПодключения);
	
КонецФункции

// Начинает подключение к ИБ-источнику после предварительной проверки настроек подключения.
//
&НаКлиенте
Процедура ПодключитьсяИЗагрузитьПослеПроверки()
	
	ПараметрыПодключения = РазобратьСтрокуПодключенияСервер();
		
	ПараметрыПодключения.ИмяПользователя = ИмяПользователя;
	ПараметрыПодключения.ПарольПользователя = ПарольПользователя;
	ПараметрыПодключения.ПродолжитьПослеНачалаРаботыСистемы = Ложь;
	ПараметрыПодключения.ИмяНастраивающегоПользователя = ИмяНастраивающегоПользователя();
	
	ПараметрыПодключения.ЗагружатьКонтрагентов = ЗагружатьКонтрагентов;
	ПараметрыПодключения.ЗагружатьНоменклатуру = ЗагружатьНоменклатуру;
	
	УстановитьПараметрыПодключенияСервер(ПараметрыПодключения);
	
	ПодключитьсяИЗагрузитьСервер(ПараметрыПодключения);
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	// Дадим понятные описания распространенных проблем.
	Если Результат = "РегистрацияComcntr" Тогда
		
		ПараметрыПодключения.ТекущийШагПодключения = Результат;
		ПараметрыПодключения.ПродолжитьПослеНачалаРаботыСистемы = Истина;
		УстановитьПараметрыПодключенияСервер(ПараметрыПодключения);
		
		Если ЭтоСервернаяБаза Тогда
			СисИнфо = Новый СистемнаяИнформация;
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Для загрузки данных в клиент-серверном варианте следует зарегистрировать на
						|сервере компоненту comcntr.dll, находящуюся в каталоге bin платформы 1С:Предприятие
						|версии %1, после чего перезапустить службу сервера и повторить загрузку.'"),
				СисИнфо.ВерсияПриложения));
			Возврат;
		КонецЕсли;
		
		#Если ВебКлиент Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ПоказатьПредупреждение(, СтрШаблон(
			НСтр("ru = 'Для загрузки с помощью веб-клиента следует зарегистрировать на сервере компоненту
					|comcntr.dll, находящуюся в каталоге bin платформы 1С:Предприятие версии %1, после
					|чего перезапустить службу сервера и повторить загрузку.'"),
			СисИнфо.ВерсияПриложения));
		Возврат;
		#КонецЕсли
		
		#Если Не ВебКлиент Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОРегистрацииИЗавершении",
			ЭтаФорма);
			
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Сейчас будет установлена компонента, выполняющая подключение к 1С:Бухгалтерии.
				|После установки программа будет перезапущена. Продолжить?'"),
			РежимДиалогаВопрос.ОКОтмена);
		#КонецЕсли
		
	ИначеЕсли Результат = "ИсправлениеИмениПароля" Тогда
		
		Если ЗначениеЗаполнено(ПарольПользователя) Тогда
			Элементы.ДекорацияПоказатьПароль.Видимость = Истина;
		КонецЕсли;
		ПоказатьПредупреждение(, НСтр("ru = 'Проверьте правильность имени пользователя и пароля.'"));
		Возврат;
		
	ИначеЕсли Результат = "ИсправлениеКаталогаИнформационнойБазы" Тогда
		
		ТекущийЭлемент = Элементы.СтрокаПодключения;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Проверьте правильность пути, указанного в строке подключения.
			|Это должна быть папка, содержащая файл 1Cv8.1CD'"));
		Возврат;
		
	ИначеЕсли Результат = "ИсправлениеСетевогоПути" Тогда
		
		ТекущийЭлемент = Элементы.СтрокаПодключения;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Проверьте правильность пути, указанного в строке подключения, и права доступа к нему.'"));
		Возврат;
		
	ИначеЕсли Результат = "ЗавершениеДругихСеансовРаботы" Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'В указанной базе сейчас работают пользователи под другой версией платформы
				|""1С:Предприятие"". Завершите эти сеансы и повторите попытку, или выгрузите данные
				|вручную обработкой ""Универсальный обмен в формате XML"".'"));
		Возврат;
		
	ИначеЕсли Результат = "ВыгрузкаВручнуюПриРазличииВерсий" Тогда
		
		СисИнфо = Новый СистемнаяИнформация;
		ПоказатьПредупреждение(, СтрШаблон(
			НСтр("ru = 'Для загрузки следует установить на сервере платформу версии %1 или выгрузить
				|данные вручную обработкой ""Универсальный обмен в формате XML"".'"),
			СисИнфо.ВерсияПриложения));
		Возврат;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда // нераспознанное сообщение покажем как есть
		
		ПоказатьПредупреждение(, Результат);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда // успех
		
		СообщитьОЗавершении(Результат);
		
	Иначе
		
		ВызватьИсключение(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает фоновое задание, подключающееся и загружающее данные.
//
&НаСервере
Процедура ПодключитьсяИЗагрузитьСервер(ПараметрыПодключения)
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыПодключения);
	МассивПараметров.Добавить(АдресРезультата);
	
	ОбменДаннымиБухгалтерияПредприятияВызовСервера.ПодключитьсяИЗагрузить(ПараметрыПодключения,
		АдресРезультата);
		 
КонецПроцедуры

// Выводит сообщение об успешном завершении с краткой статистикой.
//
&НаКлиенте
Процедура СообщитьОЗавершении(Результат)
	
	ЗагруженоКонтрагентов = Результат.ЗагруженоКонтрагентов;
	ПропущеноКонтрагентов = Результат.ПропущеноКонтрагентов;
	ЗагруженоНоменклатуры = Результат.ЗагруженоНоменклатуры;
	ПропущеноНоменклатуры = Результат.ПропущеноНоменклатуры;
	
	Сообщение = НСтр("ru = 'Готово.'") + Символы.ПС;
	
	Если ЗагружатьКонтрагентов Тогда
		Сообщение = Сообщение + Символы.ПС;
		Сообщение = Сообщение + СтрШаблон(
			НСтр("ru = 'Загружено контрагентов: %1.'"),
			ЗагруженоКонтрагентов) + Символы.ПС;
		Если ПропущеноКонтрагентов <> 0 Тогда
			Сообщение = Сообщение + СтрШаблон(
				НСтр("ru = 'Найдено и пропущено: %1.'"),
				ПропущеноКонтрагентов) + Символы.ПС;
		КонецЕсли;
		ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
	КонецЕсли;
	
	Если ЗагружатьНоменклатуру Тогда
		Сообщение = Сообщение + Символы.ПС;
		Сообщение = Сообщение + СтрШаблон(
			НСтр("ru = 'Загружено товаров и услуг: %1.'"),
			ЗагруженоНоменклатуры) + Символы.ПС;
		Если ПропущеноНоменклатуры <> 0 Тогда
			Сообщение = Сообщение + СтрШаблон(
				НСтр("ru = 'Найдено и пропущено: %1.'"),
				ПропущеноНоменклатуры) + Символы.ПС;
		КонецЕсли;
		ОповеститьОбИзменении(Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СообщитьОЗавершенииИЗакрыть", ЭтаФорма);
	
	ПоказатьПредупреждение(ОписаниеОповещения, Сообщение);
	
КонецПроцедуры

// Закрывает форму после ознакомления пользователя с завершающим сообщением.
//
&НаКлиенте
Процедура СообщитьОЗавершенииИЗакрыть(Результат) Экспорт
	
	Закрыть();
	
КонецПроцедуры

#Если Не ВебКлиент Тогда

// Регистрирует библиотеку и завершает программу для перезапуска.
//
&НаКлиенте
Процедура ПослеВопросаОРегистрацииИЗавершении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СтрокаРегистрации = СтрШаблон("regsvr32 /s ""%1%2""",
			КаталогПрограммы(),
			"comcntr.dll");
		КомандаСистемы(СтрокаРегистрации);
		СтандартныеПодсистемыКлиент.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы();
		ЗапрашиватьВозможность = Не НачалоРаботы;
		ЗавершитьРаботуСистемы(ЗапрашиватьВозможность, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

// Заполняет список выбора информационных баз.
//
Процедура ЗаполнитьСписокВыбораИнформационныхБаз()
	
	#Если ВебКлиент Тогда
	Возврат;
	#КонецЕсли
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
		И СисИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		WScript = Новый COMОбъект("WScript.Shell");
		AppData = WScript.ExpandEnvironmentStrings("%APPDATA%");
	Исключение
		Возврат;
	КонецПопытки;
	
	ПутьКФайлу = СтрШаблон("%1\1C\1CEStart\ibases.v8i", AppData);
	Файл = Новый Файл(ПутьКФайлу);
	Попытка
		Если Не Файл.Существует() Тогда
			Возврат;
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	
	Текст = Новый ТекстовыйДокумент;
	Попытка
		Текст.Прочитать(ПутьКФайлу);
	Исключение
		Возврат;
	КонецПопытки;
	
	ИмяБазы = Неопределено;
	
	СохраненнаяСтрокаПодключения = СтрокаПодключения;
	СтрокаПодключенияЭтойБазы = СтрокаСоединенияИнформационнойБазы();
	
	Для НСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		Строка = СокрЛП(Текст.ПолучитьСтроку(НСтроки));
		
		Если СтрНачинаетсяС(Строка, "Connect=")
			И ИмяБазы <> Неопределено Тогда
			
			СтрокаКандидат = СокрЛП(Сред(Строка, СтрДлина("Connect=") + 1));
			Если СтрокаКандидат = СтрокаПодключенияЭтойБазы Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПодключения = СтрокаКандидат;
			Элементы.СтрокаПодключения.СписокВыбора.Добавить(СтрокаПодключения, ИмяБазы);
			ИмяБазы = Неопределено;
			
		ИначеЕсли СтрНачинаетсяС(Строка, "[")
			И СтрЗаканчиваетсяНа(Строка, "]") Тогда
			
			ИмяБазы = Сред(Строка, 2, СтрДлина(Строка) - 2);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Элементы.СтрокаПодключения.СписокВыбора.Количество() <> 0 Тогда
		Элементы.СтрокаПодключения.СписокВыбора.СортироватьПоПредставлению();
		Элементы.СтрокаПодключения.КнопкаВыпадающегоСписка = Истина;
		СтрокаПодключения = СохраненнаяСтрокаПодключения;
	КонецЕсли;
	
КонецПроцедуры

// По нажатию на ссылку показывает пользователю пароль (или скрывает его).
//
&НаКлиенте
Процедура ДекорацияПоказатьПарольНажатие(Элемент)
	
	Элементы.ПарольПользователя.РежимПароля = 
		(Элементы.ПарольПользователя.РежимПароля <> Истина);
		
	Элементы.ДекорацияПоказатьПароль.Заголовок = ?(Элементы.ПарольПользователя.РежимПароля,
		НСтр("ru = 'Показать'"),
		НСтр("ru = 'Скрыть'"));
	
КонецПроцедуры

// Получает имя настраивающего пользователя из данных ИБ.
//
Функция ИмяНастраивающегоПользователя()
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИдентификаторПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ИдентификаторПользователяИБ");
	
	Если Не ЗначениеЗаполнено(ИдентификаторПользователя) Тогда
		Возврат ИмяПользователя();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат ИмяПользователя();
	Иначе
		Возврат ПользовательИБ.Имя;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

