
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда 
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ДопРеквизиты");
		ДополнительныеПараметры.Вставить("СкрытьУдаленные", Истина);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры, Объект.НаборСвойств);
		// Конец СтандартныеПодсистемы.Свойства
	Иначе 
		Элементы.ДопРеквизиты.Видимость = Ложь;
		Элементы.ДобавитьРеквизит.Видимость = Ложь;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда 
		Элементы.СтраницаСогласующие.Видимость = Ложь;
	КонецЕсли;
	
	// Файлы
	СписокРасширенийШаблонов = "doc, docx";
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ДокументОснование = Параметры.ЗначениеКопирования;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
		КонецЕсли;
	Иначе 
		ЗаполнитьСписокФайлов();
	КонецЕсли;
	
	Если Параметры.Свойство("РежимСозданияДоговора") Тогда 
		РежимСозданияДоговора = Параметры.РежимСозданияДоговора;
	ИначеЕсли Объект.Ссылка.Пустая() И Не Параметры.Свойство("НеСоздаватьДокументПриЗакрытии") Тогда 
		СоздаватьДокументПриЗакрытии = Истина;
	ИначеЕсли Объект.Ссылка.Пустая() И Параметры.Свойство("НеСоздаватьДокументПриЗакрытии") Тогда 
		ВыбратьВКонструктореСозданияДокумента = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.Тип) Тогда 
			Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Договор;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.КтоГотовит) Тогда
			Если Параметры.Свойство("ЗагруженИзПочты") И Параметры.ЗагруженИзПочты Тогда 
				Объект.КтоГотовит = Перечисления.КтоГотовит.Контрагент;
			Иначе 
				Объект.КтоГотовит = Перечисления.КтоГотовит.Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ИзменитФормуПоВиду();
	
	Если Объект.Согласующие.Количество() = 0 Тогда 
		Элементы.СогласующиеПодобратьСогласующих.Видимость = Ложь;
		Элементы.ГруппаВсеПользователи.Видимость = Истина;
		Элементы.Согласующие.Шапка = Истина;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда 
		Элементы.КоманднаяПанельНоменклатура.Видимость = Ложь;
		Элементы.ВсяНоменклатура.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ФормаСоздатьДокумент.Видимость = Не Объект.Ссылка.Пустая();
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		СтрокаТовары.НоменклатураСтрока = Строка(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	Если Не Объект.Ссылка.Пустая() 
		И РольДоступна("ПолныеПрава")
		И Объект.СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда 
		Элементы.ФормаВсеНомера.Видимость = Истина;
	Иначе	
		Элементы.ФормаВсеНомера.Видимость = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ПримерНомера) Тогда 
		Элементы.НастроитьФормат.Заголовок = Объект.ПримерНомера;
	Иначе
		Элементы.НастроитьФормат.Заголовок = НСтр("ru = 'не настроен'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Тип) Или Объект.Ссылка.Пустая() Тогда 
		Элементы.ТипДоговорногоДокумента.АктивизироватьПоУмолчанию = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.КтоГотовит) Тогда 
		Элементы.КтоГотовит.АктивизироватьПоУмолчанию = Истина;
	Иначе
		Элементы.Наименование.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если СоздаватьДокументПриЗакрытии И Не Объект.Ссылка.Пустая() Тогда 
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
			
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("СоздатьСейчас", НСтр("ru = 'Создать сейчас'"));
		СписокКнопок.Добавить("Позже", НСтр("ru = 'Позже'"));
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Новый вид документа ""%1"" записан и готов к использованию.
			|Создать новый документ этого вида прямо сейчас?'"),
			Объект.Наименование);
			
		ПоказатьВопрос(
			ОписаниеОповещения, 
			ТекстВопроса, 
			СписокКнопок, 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Результат, Параметры) Экспорт
	
	СоздаватьДокументПриЗакрытии = Ложь;
	
	Если Результат = "Позже" Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидДокумента", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы, ВладелецФормы);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДоговорныеДокументыКлиент.ДобавитьЗанятыеФайлыСамойКарточки(ЭтаФорма, МассивЗахваченныхФайлов);
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	Если РежимСозданияДоговора И Не Объект.Ссылка.Пустая() Тогда 
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидДокумента", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		
		Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы, ВладелецФормы);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		Оповестить("Запись_ВидДокумента", Новый Структура("Ссылка, ВыбратьВКонструктореСозданияДокумента", 
			Объект.Ссылка, ВыбратьВКонструктореСозданияДокумента));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения"
	 Или ИмяСобытия = "Запись_ЗначенияСвойствОбъектов"
	 Или ИмяСобытия = "Запись_ЗначенияСвойствОбъектовИерархия"
	 Или  ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений" Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			УстановитьДоступностьКоманд(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
			И Параметр.Свойство("Владелец")
			И Параметр.Владелец = Объект.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
			КонецЕсли;
			
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Согласующие, "Исполнитель");
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Этапы, "Этап");
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Товары, "НоменклатураСтрока");
	
	МассивДублей = Новый Массив;
	КоличествоИсполнителей = Объект.Согласующие.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей - 2 Цикл
		Строка1 = Объект.Согласующие[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей - 1 Цикл
			Строка2 = Объект.Согласующие[Инд2];
			
			ТекстСообщения = "";
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда 
				МассивДублей.Добавить(Строка1.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементДубль Из МассивДублей Цикл 
		ПервоеВхождениеНайдено = Ложь;
		Ит = КоличествоИсполнителей - 1;
		
		Пока Ит >= 0 Цикл 
			Строка2 = Объект.Согласующие[Ит];
			Если Строка2.Исполнитель = ЭлементДубль И Не ПервоеВхождениеНайдено Тогда 
				ПервоеВхождениеНайдено = Истина;
			ИначеЕсли Строка2.Исполнитель = ЭлементДубль Тогда 
				Объект.Согласующие.Удалить(Ит);
				КоличествоИсполнителей = КоличествоИсполнителей - 1;
			КонецЕсли;
			
			Ит = Ит - 1;
		КонецЦикла;
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи.Вставить("ЭтоНовый", Истина);
	ИначеЕсли Объект.Наименование <> Строка(Объект.Ссылка) Тогда 
		ПараметрыЗаписи.Вставить("ИзменилосьНаименование", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.КтоГотовит = Перечисления.КтоГотовит.Контрагент 
	 Или ТекущийОбъект.Тип = Перечисления.ТипыДоговорныхДокументов.Накладная
	 Или ТекущийОбъект.Тип = Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
		ТекущийОбъект.ФорматНомера = "";
		ТекущийОбъект.ПримерНомера = "";
		СледующийНомер = 0;
	КонецЕсли;
	
	Для Каждого Строка Из ТекущийОбъект.Товары Цикл 
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда 
			НоменклатураСтрока = Объект.Товары.Получить(Строка.НомерСтроки - 1).НоменклатураСтрока;
			
			Строка.Номенклатура = ДоговорныеДокументы.СоздатьНоменклатуру(
				НоменклатураСтрока,
				Строка.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ЕстьАвтозаполнение = Ложь;
	ТекущийОбъект.ПравилаАвтозаполнения.Очистить();
	Для Каждого Строка Из Файлы Цикл
		НоваяСтрока = ТекущийОбъект.ПравилаАвтозаполнения.Добавить();
		НоваяСтрока.ШаблонФайла = Строка.Ссылка;
		НоваяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
		НоваяСтрока.ДляКого = Строка.ДляКого;
			
		Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда
			ЕстьАвтозаполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.Автозаполнение = ЕстьАвтозаполнение;
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЕстьЗаполнениеТаблицыТоваров = ЕстьЗаполнениеТаблицыТоваров(ТекущийОбъект.Ссылка);
	
	Если ТекущийОбъект.КтоГотовит = Перечисления.КтоГотовит.Контрагент 
	 Или ТекущийОбъект.Тип = Перечисления.ТипыДоговорныхДокументов.Накладная
	 Или ТекущийОбъект.Тип = Перечисления.ТипыДоговорныхДокументов.Счет
	 Или Не ЕстьЗаполнениеТаблицыТоваров Тогда 
		Элементы.СтраницаТовары.Видимость = Ложь;
	Иначе
		Элементы.СтраницаТовары.Видимость = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТекущийОбъект.Тип = Перечисления.ТипыДоговорныхДокументов.Договор
	   И ТекущийОбъект.КтоГотовит = Перечисления.КтоГотовит.Организация 
	   И СледующийНомер <> 0 Тогда 
		
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидДокумента = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.ПериодНумерации = НачалоГода(ТекущаяДата());
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.ТекущийНомер <> СледующийНомер-1 Тогда 
			МенеджерЗаписи.ВидДокумента = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.ПериодНумерации = НачалоГода(ТекущаяДата());
			МенеджерЗаписи.ТекущийНомер = СледующийНомер-1;
			МенеджерЗаписи.Записать();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл
			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = ТекущийОбъект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(ТекущийОбъект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
			
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
				
				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
				
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
		
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
		
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзменилосьНаименование") И ПараметрыЗаписи.ИзменилосьНаименование Тогда 
		ОповеститьОбИзменении(Тип("СправочникСсылка.ДоговорныеДокументы"));
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		СтрокаТовары.НоменклатураСтрока = Строка(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый Тогда 
		// Обработчик механизма "Свойства".
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВсеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСогласующего(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговорногоДокументаПриИзменении(Элемент)
	
	ИзменитФормуПоВиду();
	
КонецПроцедуры

&НаКлиенте
Процедура КтоГотовитПриИзменении(Элемент)
	
	ИзменитФормуПоВиду();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				ПеренестиНоменклатуруИзГруппы(ТекущиеДанные.Ссылка);
			Иначе 
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = Объект.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.НоменклатураСтрока = Строка(ТекущиеДанные.Ссылка);
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Количество = 1;
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено  
		И Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтрока) Тогда 
		ТекущиеДанные.Номенклатура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтрока) Тогда 
			ТекущиеДанные.Номенклатура = ДоговорныеДокументы.СоздатьНоменклатуру(
				ТекущиеДанные.НоменклатураСтрока,
				ТекущиеДанные.ЕдиницаИзмерения);
			ТекущиеДанные.НоменклатураСтрока = Строка(ТекущиеДанные.Номенклатура);
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		ТекущиеДанные.НоменклатураСтрока = Строка(ТекущиеДанные.Номенклатура);
		РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
			ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
		ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СписокВыбора = ДоговорныеДокументы.ПолучитьДанныеВыбораНоменклатуры(Текст);
		Если СписокВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокВыбора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласующие

&НаКлиенте
Процедура СогласующиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			НайденныеСтроки = Объект.Согласующие.НайтиСтроки(Новый Структура("Исполнитель", ВыделеннаяСтрока));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Согласующие.Добавить();
				НайденнаяСтрока.Исполнитель = ВыделеннаяСтрока;
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущийЗанятыйФайл(ФайлыСтрока, МассивЗахваченныхФайлов) Экспорт
	
	Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге, РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПравилоАвтозаполнения 
		И СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
		#Если НЕ ВебКлиент Тогда
			Если Не ЗначениеЗаполнено(Строка.ДляКого) Тогда 
				ПоказатьПредупреждение(, НСтр("ru = 'Укажите, для каких контрагентов предназначен файл в поле ""Для кого""'"));
				Возврат;
			КонецЕсли;
			
			ВыполнитьАвтоЗаполнение(Строка);
			
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Настройка заполнения файлов в веб-клиенте не поддерживается. Используйте тонкий клиент.'"));
		#КонецЕсли
		
	ИначеЕсли Поле = Элементы.ДляКого Тогда 	
		
		СтандартнаяОбработка = Истина;
		
	Иначе	
		
		ВыборФайла(Строка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWord(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыполнитьАвтоЗаполнение(ПараметрыВыполнения.Строка);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьАвтоЗаполнение(Строка)
	
		МассивЗахваченныхФайлов = Новый Массив;
		ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
		
		СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов);
			
		Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
				
			СтрокаФайлов = "";	
			Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
				Если Не ПустаяСтрока(СтрокаФайлов) Тогда
					СтрокаФайлов = СтрокаФайлов + Символы.ВК;
				КонецЕсли;	
				СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
			КонецЦикла;	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для настройки заполнения закройте файл:  
				| 
				|%1.'"),
				СтрокаФайлов);
				
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
				
			ПараметрыОбработки = Новый Структура("Строка", Строка);	
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWord", ЭтотОбъект, ПараметрыОбработки);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			Отказ = Истина;
			Возврат;
				
		КонецЕсли;	
		
		ПродолжитьАвтоЗаполнение(Строка);
		
КонецПроцедуры		

&НаКлиенте
Процедура ПродолжитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПравилаАвтозаполненияПродолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ШаблонФайла", Строка.Ссылка);
	ЗначенияЗаполнения.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Строка.ПравилоАвтозаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ДляКого", Строка.ДляКого);
	ПараметрыФормы.Вставить("ШаблонФайла", Строка.Ссылка);
	
	Если Не ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
		ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
	КонецЕсли;
	Открытьформу("Справочник.ПравилаАвтозаполненияФайлов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравилаАвтозаполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка = ДополнительныеПараметры.Строка;
	
	Строка.ПравилоАвтозаполнения = Результат;
	Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Открыть'");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ДляКогоДействуетНастройка = ТекущиеДанные.ДляКого;
	Иначе 
		ДляКогоДействуетНастройка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, , , НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент <> Элементы.ДляКого Тогда 
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Отказ = Истина;
		
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДоговорныеДокументыКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийЭлемент = Элементы.Файлы;
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДляКогоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДляКого) Тогда 
		ТекущиеДанные.ДляКого = ДляКогоДействуетНастройка;
	КонецЕсли;
	
	Если ДляКогоДействуетНастройка <> ТекущиеДанные.ДляКого И 
		ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения) Тогда 
		ТекстВопроса = НСтр("ru = 'При изменении поля ""Для кого"" необходимо заново создать настройки заполнения файла. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ДляКогоПриИзмененииПродолжить", ЭтотОбъект,
			Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		
	ИначеЕсли ДляКогоДействуетНастройка <> ТекущиеДанные.ДляКого Тогда 
		ДляКогоДействуетНастройка = ТекущиеДанные.ДляКого;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляКогоПриИзмененииПродолжить(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьПравилоОбработки(ТекущиеДанные.ПравилоАвтозаполнения);
		ТекущиеДанные.ПравилоАвтозаполненияСтр = Нстр("ru = 'Не настроено'");
		ТекущиеДанные.ПравилоАвтозаполнения = Неопределено;
		ДляКогоДействуетНастройка = ТекущиеДанные.ДляКого;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Строка", ТекущиеДанные);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПравилаАвтозаполненияПродолжение", 
			ЭтотОбъект, ДополнительныеПараметры);
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВладелецФайла", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ШаблонФайла", ТекущиеДанные.Ссылка);
		ЗначенияЗаполнения.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ПравилоАвтозаполнения);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("ДляКого", ТекущиеДанные.ДляКого);
		
		ПараметрыФормы.Вставить("ШаблонФайла", ТекущиеДанные.Ссылка);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения) Тогда 
			ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
		КонецЕсли;
		Открытьформу("Справочник.ПравилаАвтозаполненияФайлов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,,
			ОписаниеОповещения);
			
		Модифицированность = Истина;
	Иначе 
		ТекущиеДанные.ДляКого = ДляКогоДействуетНастройка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПараметрыВыполнения = Новый Структура("Файл", Файл);
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеУстановкиРасширения", 
		ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Файл = ПараметрыВыполнения.Файл;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизит(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаборСвойств", Объект.НаборСвойств);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", Объект.НаборСвойств);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
		ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьСогласующего(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеПользователи.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		НайденныеСтроки = Объект.Согласующие.НайтиСтроки(Новый Структура("Исполнитель", ВыделеннаяСтрока));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НайденнаяСтрока = Объект.Согласующие.Добавить();
			НайденнаяСтрока.Исполнитель = ВыделеннаяСтрока;
		КонецЕсли;
	КонецЦикла;	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСогласующих(Команда)
	
	ПоказыватьВсехПользователей = Не ПоказыватьВсехПользователей;
	Элементы.СогласующиеПодобратьСогласующих.Пометка = ПоказыватьВсехПользователей;
	Элементы.ГруппаВсеПользователи.Видимость = ПоказыватьВсехПользователей;
	Элементы.Согласующие.Шапка = ПоказыватьВсехПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНоменклатуру(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьНоменклатуру.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			ПеренестиНоменклатуруИзГруппы(ТекущиеДанные.Ссылка);
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.НоменклатураСтрока = Строка(ТекущиеДанные.Ссылка);
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Количество = 1;
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЭтап(Команда)
	
	ПодключитьОбработчикОжидания("ДобавитьЭтап", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДоговорныеДокументыКлиент.ДобавитьЗанятыеФайлыСамойКарточки(ЭтаФорма, МассивЗахваченныхФайлов);
	
	СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		СтрокаФайлов = "";	
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для создания нового документа закройте файл:  
			| 
			|%1.'"),
			СтрокаФайлов);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаОЗанятыхWordФайлах", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидДокумента", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
	
	Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗанятыхWordФайлах(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		СоздатьДокумент(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеНомера(Команда)
	
	ПараметрыФормы = Новый Структура("ВидДокумента", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.Нумерация.Форма.ФормаСпискаДляВидаДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФормат(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьФорматПродолжение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФорматНомера", Объект.ФорматНомера);
	ПараметрыФормы.Вставить("Тип", Объект.Тип);
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("СледующийНомер", СледующийНомер);
	
	ОткрытьФорму("Справочник.ВидыДокументов.Форма.ФормаФорматаНомера", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьФорматПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ФорматНомера = Результат.ФорматНомера;
	Объект.ПримерНомера = Результат.ПримерНомера;
	СледующийНомер = Результат.СледующийНомер;
	
	Если ЗначениеЗаполнено(Объект.ПримерНомера) Тогда 
		Элементы.НастроитьФормат.Заголовок = Объект.ПримерНомера;
	Иначе
		Элементы.НастроитьФормат.Заголовок = НСтр("ru = 'не настроен'");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитФормуПоВиду()
	
	Если Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Договор Тогда 
		Элементы.Наименование.Подсказка = НСтр("ru = 'Например, ""Договор оказания услуг (типовой)"".'"); 
 	ИначеЕсли Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Акт Тогда 
		Элементы.Наименование.Подсказка = НСтр("ru = 'Например, ""Акт выполненных работ"".'"); 
 	ИначеЕсли Объект.Тип = Перечисления.ТипыДоговорныхДокументов.ДопСоглашение Тогда 
		Элементы.Наименование.Подсказка = НСтр("ru = 'Например, ""Допсоглашение к договору оказания услуг"".'");  
	ИначеЕсли Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Накладная Тогда 
		Элементы.Наименование.Подсказка = НСтр("ru = 'Например, ""Накладная"".'");  
	ИначеЕсли Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
		Элементы.Наименование.Подсказка = НСтр("ru = 'Например, ""Счет на оплату от поставщика"".'");
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Договор 
	 Или Объект.Тип = Перечисления.ТипыДоговорныхДокументов.ДопСоглашение Тогда 
		Элементы.ГруппаСрокДействия.Видимость = Истина;
	Иначе
		Элементы.ГруппаСрокДействия.Видимость = Ложь;
	КонецЕсли;
	
	// накладная и счет формируются в учетной программе
	Если Объект.КтоГотовит = Перечисления.КтоГотовит.Контрагент 
	 Или Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Накладная
	 Или Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
		Элементы.ГруппаНумерация.Видимость = Ложь;
		Элементы.ГруппаСпискиФайлов.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость = Ложь;
		Элементы.Контрагент.МаксимальнаяШирина = 37;
		Элементы.Описание.МаксимальнаяШирина = 46;
	Иначе	
		Элементы.ГруппаНумерация.Видимость = Истина;
		Элементы.ГруппаСпискиФайлов.Видимость = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.Контрагент.МаксимальнаяШирина = 0;
		Элементы.Описание.МаксимальнаяШирина = 0;
	КонецЕсли;
	
	ЕстьЗаполнениеТаблицыТоваров = ЕстьЗаполнениеТаблицыТоваров(Объект.Ссылка);
	Если Не ЕстьЗаполнениеТаблицыТоваров Тогда 
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыДоговорныхДокументов.Договор 
	   И Объект.КтоГотовит = Перечисления.КтоГотовит.Организация Тогда 
		СледующийНомер = 1;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ВидДокумента = Объект.Ссылка;
			МенеджерЗаписи.ПериодНумерации = НачалоГода(ТекущаяДата());
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда 
				СледующийНомер = МенеджерЗаписи.ТекущийНомер + 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СледующийНомер = 0;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Копирование Тогда 
	    	Если Объект.КтоГотовит = Перечисления.КтоГотовит.Организация 
			   И Объект.Тип <> Перечисления.ТипыДоговорныхДокументов.Накладная
	 		   И Объект.Тип <> Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
				Объект.ФорматНомера = НСтр("ru = '[Номер]'");
				Объект.ПримерНомера = "12345";
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.ФорматНомера) Тогда 
			Если Объект.КтоГотовит = Перечисления.КтоГотовит.Организация 
			   И Объект.Тип <> Перечисления.ТипыДоговорныхДокументов.Накладная
	 		   И Объект.Тип <> Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
				Объект.ФорматНомера = НСтр("ru = '[Номер]'");
				Объект.ПримерНомера = "12345";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПримерНомера) Тогда 
		Элементы.НастроитьФормат.Заголовок = Объект.ПримерНомера;
	Иначе
		Элементы.НастроитьФормат.Заголовок = НСтр("ru = 'не настроен'");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьЭтап()
	
	Элементы.Этапы.ДобавитьСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	ДоговорныеДокументы.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДоговорныеДокументыКлиент.ОбновитьСтрокуФайла(Файлы, Файл);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		Объект.Ссылка, 
		ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = ДоговорныеДокументы.ПолучитьДанныеФайловДляСписка(МассивФайлов);
	ТаблицаФайлы.Колонки.Добавить("ДляКого");
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполнения");
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполненияСтр");
	
	Для Каждого Строка Из Объект.ПравилаАвтозаполнения Цикл
		НайденнаяСтрока = ТаблицаФайлы.Найти(Строка.ШаблонФайла, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
			НайденнаяСтрока.ДляКого = Строка.ДляКого;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаФайлы Цикл 
		Если СтрНайти(СписокРасширенийШаблонов, НРег(Строка.Расширение)) > 0 Тогда 
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
				Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Открыть'");
			Иначе
				Строка.ПравилоАвтозаполненияСтр = Нстр("ru = 'Не настроено'");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.ДляКого) Тогда 
				Строка.ДляКого = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ПометкаУдаления)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или ТолькоПросмотр Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Процедура УдалитьПравилоОбработки(ПравилоЗаполнения)
	
	ЗаблокироватьДанныеДляРедактирования(ПравилоЗаполнения);
	ПравилоОбъект = ПравилоЗаполнения.ПолучитьОбъект();
	ПравилоОбъект.УстановитьПометкуУдаления(Истина);
	РазблокироватьДанныеДляРедактирования(ПравилоЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗаполнениеТаблицыТоваров(ВидДокумента)
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат ДоговорныеДокументы.ЕстьЗаполнениеТаблицыТоваров(ВидДокумента, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		Или ДоговорныеДокументы.ЕстьЗаполнениеТаблицыТоваров(ВидДокумента, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		Или ДоговорныеДокументы.ЕстьЗаполнениеТаблицыТоваров(ВидДокумента, Перечисления.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель);
	
КонецФункции

#КонецОбласти

