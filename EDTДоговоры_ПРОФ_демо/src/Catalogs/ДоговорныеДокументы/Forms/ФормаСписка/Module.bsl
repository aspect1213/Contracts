
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ПриНачалеРаботыСистемы") Тогда
		КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, 
			ПользователиКлиентСервер.ТекущийПользователь());
		Если КоличествоЗанятыхФайлов <> 0 Тогда 
			НужноПоместитьЗанятыеФайлы = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Состояние = "ВсеДокументы";
	
	ДоговорныеДокументы.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Список);
	
	ПоказыватьУдаленные = Ложь;
	ПоказатьУдаленные();
	
	// Кешируем количество доступных шаблонов внутренних документов
	КоличествоДоступныхВидовДокументов = ОбновитьКоличествоДоступныхВидовДокументовВыполнить();
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Если Параметры.Свойство("Контрагент") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"Контрагент",
			Параметры.Контрагент,
			ВидСравненияКомпоновкиДанных.Равно);
		Заголовок = СтрШаблон(НСтр("ru = 'Документы по контрагенту ""%1""'"), Параметры.Контрагент);
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхВидовДокументов", 1200, Ложь);
	
	УстановитьДоступностьСканирования();
	
	Если НужноПоместитьЗанятыеФайлы Тогда
		ПодключитьОбработчикОжидания("ПоместитьЗанятыеФайлы", 0.1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВидДокумента" Тогда 
		ОбновитьКоличествоДоступныхВидовДокументов();
	КонецЕсли;	
	
	Если ИмяСобытия = "КомпонентаСканированияУстановлена" Тогда
		УстановитьДоступностьСканирования();
	КонецЕсли;
	
	Если ИмяСобытия = "Сканирование_Файла" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			И Параметр.Свойство("ИмяФайла") 
			 И Параметр.Свойство("ПутьФайла") И ЗначениеЗаполнено(Параметр.ПутьФайла)
			 И Параметр.Владелец = ИмяФормы Тогда
			 
			#Если Не ВебКлиент Тогда 
			ИмяФайла = Параметр.ИмяФайла; 
			 
			Файл = Новый Файл(Параметр.ПутьФайла);
			КопияФайлаПуть = ПолучитьИмяВременногоФайла(Файл.Расширение);
			КопироватьФайл(Параметр.ПутьФайла, КопияФайлаПуть);
			ЗагрузитьСДискаФайл(КопияФайлаПуть, ИмяФайла);
			#КонецЕсли	
			
		КонецЕсли;	
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("МассивФайлов")
			 И Параметр.Владелец = ИмяФормы Тогда
			 
			#Если Не ВебКлиент Тогда
			МассивФайлов = Параметр.МассивФайлов; 
			 
			Вложения = Новый Массив;
			
			Для Каждого ФайлСтруктура Из МассивФайлов Цикл
				
				ФайлИсходный = Новый Файл(ФайлСтруктура.ПутьФайла);
				ПолноеИмяФайла = ПолучитьИмяВременногоФайла(ФайлИсходный.Расширение);
				КопироватьФайл(ФайлСтруктура.ПутьФайла, ПолноеИмяФайла);
				
				Файл = Новый Файл(ПолноеИмяФайла);
				ВложениеИнфо = Новый Структура;
				ВложениеИнфо.Вставить("Имя", Файл.ИмяБезРасширения);
				Если ЗначениеЗаполнено(ФайлСтруктура.ИмяФайла) Тогда
					ВложениеИнфо.Имя = ФайлСтруктура.ИмяФайла;
				КонецЕсли;	
					
				ВложениеИнфо.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
				ВложениеИнфо.Вставить("Расширение", Файл.Расширение);
				ВложениеИнфо.Вставить("Размер", Файл.Размер());
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
				ВложениеИнфо.Вставить("Адрес", Адрес);
				ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				ВложениеИнфо.Вставить("ИндексКартинки", ИндексКартинки);
				ВложениеИнфо.Вставить("Идентификатор", "");
				Вложения.Добавить(ВложениеИнфо);
				
			КонецЦикла;
			
			// Открытие формы заполнения реквизитов документа
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Вложения", Вложения);
			
			ОткрытьФорму(
				"Справочник.ДоговорныеДокументы.ФормаОбъекта",
				ПараметрыОткрытия,,,,,,
				);
				
			#КонецЕсли		
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСписка();
	
	ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
	ПоказатьУдаленные();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСостояниеДокумента, Состояние, "ВсеДокументы");
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ПериодВыборки, ПериодВыборки);
		
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборВидДокумента, ВидДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостояниеДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Состояние = "ВсеДокументы";
	
	УстановитьОтборСписка();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Состояние, "ВсеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеДокументаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда 
		Состояние = "ВсеДокументы";
	КонецЕсли;	
	
	УстановитьОтборСписка();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Состояние, "ВсеДокументы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	УстановитьОтборСписка();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ПериодВыборки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаПриИзменении(Элемент)
	
	УстановитьОтборСписка();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидДокумента = Неопределено;
	
	УстановитьОтборСписка();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ПринятыеФайлы = Новый Массив;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеФайлы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		ПринятыеФайлы.Добавить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;	
	
	Если ПринятыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Вложения = Новый Массив;
	Для каждого Файл Из ПринятыеФайлы Цикл
		
		ВложениеИнфо = Новый Структура;
		ВложениеИнфо.Вставить("Имя", Файл.Имя);
		ВложениеИнфо.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
		ВложениеИнфо.Вставить("Расширение", Файл.Расширение);
		ВложениеИнфо.Вставить("Размер", Файл.Размер());
		ВложениеИнфо.Вставить("Идентификатор", "");
		ВложениеИнфо.Вставить("ИндексКартинки", 
			ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение));
		
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		ВложениеИнфо.Вставить("Адрес", Адрес);
		
		Вложения.Добавить(ВложениеИнфо);
	КонецЦикла;
	
	// Открытие формы заполнения реквизитов документа
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вложения", Вложения);
	
	ОткрытьФорму("Справочник.ДоговорныеДокументы.ФормаОбъекта",
		ПараметрыОткрытия,
		Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	
	ПоказатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	СоздатьНовыйДокумент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСДиска(Команда)
	
	Если Не ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для загрузки с диска нужно установить расширение работы с файлами.'"));
		Возврат;	
	КонецЕсли;	
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла договора'");
	ВыборФайла.Фильтр  
		= НСтр("ru = 'Документы (*.doc;*.docx;*.odt;*.txt;*.pdf)|*.doc;*.docx;*.odt;*.txt;*.pdf"
		+ "|Все файлы (*.*)|*.*"
		+ "'");

	Результат = ВыборФайла.Выбрать();
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	ЗагрузитьСДискаФайл(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзПочты(Команда)
	
	ПараметрКоманды = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	#Если ВебКлиент Тогда
		ПараметрыФормы.Вставить("ВебКлиент", Истина);
	#КонецЕсли
	
	Если Не ПараметрыОтправкиПочтовогоСообщенияПовтИсп.ЕстьДоступныеПрофилиПочты() Тогда
		// тут предлагаем настроить
		
		ПараметрыВыполнения = Новый Структура("ПараметрКоманды", ПараметрКоманды);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьЗагрузкуПослеПроверки", 
			ЭтотОбъект, ПараметрыВыполнения);
			
		ДляОтправки = Ложь;
		ЛегкаяПочтаКлиент.НастроитьПочтуИВыполнить(Обработчик, ПараметрКоманды, ДляОтправки);
		
		Возврат;
		
	КонецЕсли;	
	
	ВыполнитьЗагрузкуПослеПроверки(ПараметрКоманды, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСоСканера(Команда)
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(
		ЭтаФорма.ИмяФормы, УникальныйИдентификатор, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Передать(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Возвращен Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Режим", "Передать");
			ПараметрыФормы.Вставить("Документ", ТекущиеДанные.Ссылка);
			ПараметрыФормы.Вставить("Пользователь", ТекущиеДанные.Контрагент);
			
			ОткрытьФорму("РегистрСведений.ЖурналПередачи.ФормаЗаписи", ПараметрыФормы,,,,,, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе 
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВозвратитьПродолжение",
				ЭтотОбъект,
				Новый Структура("Документ", ТекущиеДанные.Ссылка));
				
			ТекстВопроса = НСтр("ru = 'Отразить возврат оригинала документа от контрагента?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратитьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорныеДокументыКлиент.ОтразитьВозвратОригинала(ЭтаФорма, Параметры.Документ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ТекущиеДанные.Ссылка);
	
	Если Не ПараметрыОтправкиПочтовогоСообщенияПовтИсп.ЕстьДоступныеПрофилиПочты() Тогда
		// тут предлагаем настроить
		
		ПараметрыВыполнения = Новый Структура("ПараметрКоманды", ПараметрКоманды);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьОтправкуПослеПроверки", 
			ЭтотОбъект, ПараметрыВыполнения);
			
		ДляОтправки = Истина;
		ЛегкаяПочтаКлиент.НастроитьПочтуИВыполнить(Обработчик, ПараметрКоманды, ДляОтправки);
		
		Возврат;
		
	КонецЕсли;	
	
	ВыполнитьОтправкуПослеПроверки(ПараметрКоманды, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуПослеПроверки(ПараметрКоманды, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объекты", ПараметрКоманды);
	ОткрытьФорму(
		"Обработка.ПочтовоеСообщение.Форма.Форма",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	Если Копирование Тогда 
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
			
			КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
			Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.Список, Новый УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоДоступныхВидовДокументов > 0 Тогда
			КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
			Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта",, Элементы.Список, Новый УникальныйИдентификатор);
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СоздатьНовыйДокументСоздатьВидДокумента",
				ЭтотОбъект);
			СписокОтветов = Новый СписокЗначений;
			СписокОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Создать'"));
			СписокОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не создавать'"));
			ПоказатьВопрос(ОписаниеОповещения, 
				НСтр("ru = 'В программе нет ни одного вида документа. Создать его сейчас?'"), 
				СписокОтветов, 60, КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументСоздатьВидДокумента(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
		
	ОткрытьФорму("Справочник.ВидыДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.Список,,,,
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСписка()
	
	// период 
	Если ПериодВыборки <> Неопределено Тогда 
		
		ЭлементыОтбора = Список.Отбор.Элементы;
		
		ЭлементОтбораДанных = Неопределено;
		Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			Если ЭлементОтбора.Представление = "ОтборПериод" Тогда
				ЭлементОтбораДанных = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПериодВыборки) Тогда 
			
			Если ЭлементОтбораДанных = Неопределено Тогда
				ГруппаОтборПериод = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 
				ГруппаОтборПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
				ГруппаОтборПериод.Использование = Истина;
				ГруппаОтборПериод.Представление = "ОтборПериод";
			Иначе
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Истина;
			КонецЕсли;	
			
			ГруппаДатаСортировки = ГруппаОтборПериод.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаДатаСортировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ; 
			ГруппаДатаСортировки.Использование = Истина;
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаНачала) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаНачала;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПериодВыборки.ДатаОкончания) Тогда 
				ЭлементОтбораДанных = ГруппаДатаСортировки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ЭлементОтбораДанных.ПравоеЗначение = ПериодВыборки.ДатаОкончания;
				ЭлементОтбораДанных.Использование = Истина;
			КонецЕсли;
			
			Если ГруппаДатаСортировки.Элементы.Количество() = 0 Тогда 
				ГруппаОтборПериод.Элементы.Удалить(ГруппаДатаСортировки);
			КонецЕсли;
			
		Иначе
			
			Если ЭлементОтбораДанных <> Неопределено Тогда
				ГруппаОтборПериод = ЭлементОтбораДанных;
				ГруппаОтборПериод.Элементы.Очистить();
				ГруппаОтборПериод.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если Состояние = "МоиАктивные" Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
			"Закрыт",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
			"Ответственный",
			ТекущийПользователь);	
			
		Элементы.Ответственный.Видимость = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
			"Закрыт");
			
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
			"Ответственный");
			
		Элементы.Ответственный.Видимость = Истина;	
	КонецЕсли;
	
	Если ВидДокумента <> Неопределено Тогда 
		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
				"ВидДокумента");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор,
				"ВидДокумента",
				ВидДокумента,
				ВидСравненияКомпоновкиДанных.ВИерархии);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьУдаленные()
	
	Если ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхВидовДокументов()
	
	КоличествоДоступныхВидовДокументов = ОбновитьКоличествоДоступныхВидовДокументовВыполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьКоличествоДоступныхВидовДокументовВыполнить()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	НЕ ВидыДокументов.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСДискаФайл(ПолноеИмяФайла, ИмяФайла = Неопределено)
	
	Вложения = Новый Массив;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	ВложениеИнфо = Новый Структура;
	ВложениеИнфо.Вставить("Имя", Файл.ИмяБезРасширения);
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ВложениеИнфо.Имя = ИмяФайла;
	КонецЕсли;	
		
	ВложениеИнфо.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ВложениеИнфо.Вставить("Расширение", Файл.Расширение);
	ВложениеИнфо.Вставить("Размер", Файл.Размер());
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ВложениеИнфо.Вставить("Адрес", Адрес);
	ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
	ВложениеИнфо.Вставить("ИндексКартинки", ИндексКартинки);
	ВложениеИнфо.Вставить("Идентификатор", "");
	Вложения.Добавить(ВложениеИнфо);
	
	// Открытие формы заполнения реквизитов документа
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вложения", Вложения);
	
	ОткрытьФорму("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуПослеПроверки(ПараметрКоманды, ДополнительныеПараметры) Экспорт
	
	ОткрытьФорму("Обработка.ЗагрузкаЭлектроннойПочты.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСканирования()
	
	ДоступнаКомандаСканировать = Истина;
	#Если ВебКлиент Тогда
		ДоступнаКомандаСканировать = Ложь;
	#КонецЕсли	
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ОбщегоНазначенияКлиент.ЭтоWindowsКлиент()
	КонецЕсли;	
	
	Элементы.ЗагрузитьСоСканера.Видимость = ДоступнаКомандаСканировать;
	Элементы.ЗагрузитьСоСканера1.Видимость = ДоступнаКомандаСканировать;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьЗанятыеФайлы()
	
	ЗанятыеФайлы = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов();

	Обработчик = Новый ОписаниеОповещения("ПослеОкончанияРедактированияФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ЗакончитьРедактированиеПоСсылкам(
		Обработчик,
		ЗанятыеФайлы,
		УникальныйИдентификатор,
		Истина, // СоздатьНовуюВерсию
		"", // КомментарийКВерсии
		Ложь, // ПоказыватьОповещение
		Истина, //ОсвобождатьБезВопросаФайлыКоторыхНетВРабочемКаталоге
		Истина); // НеПоказыватьОшибки
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОкончанияРедактированияФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	Оповестить("ПослеОкончанияРедактированияФайлов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоманды()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.СписокКонтекстноеМенюОтправить.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюПередать.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюСправочникСообщенияКомандаСоздатьСообщение.Доступность = Ложь;
		
	Иначе 
		Элементы.СписокКонтекстноеМенюОтправить.Доступность = Истина;
		Элементы.СписокКонтекстноеМенюПередать.Доступность = Истина;
		Элементы.СписокКонтекстноеМенюСправочникСообщенияКомандаСоздатьСообщение.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
