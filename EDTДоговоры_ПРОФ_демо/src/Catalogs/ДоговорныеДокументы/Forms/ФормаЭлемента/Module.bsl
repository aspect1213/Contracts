
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		ДокументОснование = Параметры.ЗначениеКопирования;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ШаблонДокумента) Тогда
		Объект.ВидДокумента = Параметры.ШаблонДокумента;
		
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента, 
			"Контрагент, СуммаДокумента");
		Объект.СуммаДокумента = РеквизитыШаблона.СуммаДокумента;
		Объект.Контрагент = РеквизитыШаблона.Контрагент;
		
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ШаблонДокумента, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.Ссылка;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаНоменклатуры Из Параметры.ШаблонДокумента.Товары Цикл 
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура = СтрокаНоменклатуры.Номенклатура;
			НоваяСтрока.Количество = СтрокаНоменклатуры.Количество;
			НоваяСтрока.Цена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНоменклатуры.Номенклатура, "Цена");
			НоваяСтрока.Сумма = Окр(НоваяСтрока.Цена * НоваяСтрока.Количество, 2);
		КонецЦикла;
		
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;	
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента, "Тип");
			
		ТипДокумента = РеквизитыВидаДокумента.Тип;
		Если ЗначениеЗаполнено(ТипДокумента) Тогда 
			ЭтаФорма.АвтоЗаголовок = Ложь;
			Если Объект.Ссылка.Пустая() Тогда 
				Заголовок = Строка(ТипДокумента) + " (" + НСтр("ru = 'создание'") + ")";
			Иначе
				Заголовок = Объект.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Файлы
	ЗаполнитьСписокФайлов();
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		ОтобразитьИнформациюОПередаче();
		
		Для Каждого Файл Из Файлы Цикл 
			Если Файл.СозданИзШаблона Тогда 
				НастройкиАвтозаполнения = 
					АвтозаполнениеШаблоновФайловСервер.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
						Файл.Ссылка, 
						Объект.Ссылка);
				Если НастройкиАвтозаполнения.МассивЗамен.Количество() > 0 Тогда 
					НастройкиАвтозаполнения.Вставить("Файл", Файл.Ссылка);
					ЗаполняемыеФайлы.Добавить(НастройкиАвтозаполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	КонтрагентПриОткрытии = Объект.Контрагент;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда 
		Элементы.СтраницаСогласование.Видимость = Ложь;
		Элементы.ФормаСправочникСообщенияКомандаСоздатьСообщение.Видимость = Ложь;
		ЭтоБазоваяВерсияКонфигурации = Истина;
	Иначе 
		
		Если Объект.Согласующие.Количество() = 0 Тогда 
			Элементы.ГруппаНетСогласующих.Видимость = Истина;
			Элементы.ГруппаСогласующие.Видимость = Ложь;
			Элементы.КомПанельСогласование.Видимость = Ложь;
		Иначе
			Элементы.ГруппаНетСогласующих.Видимость = Ложь;
			Элементы.ГруппаСогласующие.Видимость = Истина;
			Элементы.КомПанельСогласование.Видимость = Истина;
		КонецЕсли;
		
		Для Каждого Строка Из Объект.Согласующие Цикл
			Если Строка.Исполнитель = ТекущийПользователь И Строка.РезультатСогласования.Пустая() Тогда 
				Элементы.ГруппаСогласовать.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.Этапы.Количество() = 0 Тогда 
		Элементы.ГруппаНетЭтапов.Видимость = Истина;
		Элементы.Этапы.Видимость = Ложь;
		Элементы.ГруппаНадписьЭтапы.Видимость = Ложь;
	Иначе	
		Элементы.ГруппаНетЭтапов.Видимость = Ложь;
		Элементы.Этапы.Видимость = Истина;
		Элементы.ГруппаНадписьЭтапы.Видимость = Истина;
	КонецЕсли;
	
	ТипДокумента = Объект.ВидДокумента.Тип;
	Если ТипДокумента <> Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
		ЗаполнитьДеревоСопроводительныхДокументов();
	Иначе 
		Элементы.СтраницаСопроводительные.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидДокумента.СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда 
		Если ЗначениеЗаполнено(Объект.НомерДокумента) Тогда 
			Элементы.ФормаПрисвоитьНомер.Видимость = Истина;
		Иначе
			Элементы.ФормаПрисвоитьНомер.Видимость = Ложь;
		КонецЕсли;	
	Иначе	
		Элементы.ФормаПрисвоитьНомер.Видимость = Ложь;
	КонецЕсли;
	
	Если ТипДокумента = Перечисления.ТипыДоговорныхДокументов.Договор Тогда 
		
		Элементы.Закрыт.Заголовок = НСтр("ru = 'Закрыт'");
		Элементы.Закрыт.Подсказка = НСтр("ru = 'Обязательства по договору полностью выполнены с обеих сторон или договор расторгнут.'");
		Элементы.НомерДокумента.Подсказка = НСтр("ru = 'Номер договора'");
		Элементы.ДатаДокумента.Подсказка = НСтр("ru = 'Дата договора'");
		Элементы.Сумма.Подсказка = НСтр("ru = 'Сумма договора'");
		Элементы.ГруппаПериодДействия.Видимость = Истина;
		Элементы.ДатаНачалаДействия.Подсказка = НСтр("ru = 'Дата, начиная с которой договор вступает в силу'");
		Элементы.ДатаОкончанияДействия.Подсказка = НСтр("ru = 'Дата, после которой договор не действует'");
		Элементы.Родитель.Видимость = Ложь;
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДоговорныхДокументов.ДопСоглашение Тогда 
		
		Элементы.Закрыт.Заголовок = НСтр("ru = 'Закрыт'");
		Элементы.Закрыт.Подсказка = НСтр("ru = 'Обязательства по дополнительному соглашению полностью выполнены с обеих сторон.'");
		Элементы.НомерДокумента.Подсказка = НСтр("ru = 'Номер дополнительного соглашения'");
		Элементы.ДатаДокумента.Подсказка = НСтр("ru = 'Дата дополнительного соглашения'");
		Элементы.Сумма.Подсказка = НСтр("ru = 'Сумма дополнительного соглашения'");
		Элементы.ГруппаПериодДействия.Видимость = Истина;
		Элементы.ДатаНачалаДействия.Подсказка = НСтр("ru = 'Дата, начиная с которой дополнительное соглашение вступает в силу'");
		Элементы.ДатаОкончанияДействия.Подсказка = НСтр("ru = 'Дата, после которой дополнительное соглашение не действует'");
		Элементы.Родитель.Видимость = Истина;
		Элементы.Родитель.Подсказка = НСтр("ru = 'Договор, к которому относится данное дополнительное соглашение.'");
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДоговорныхДокументов.Накладная Тогда 	
		
		Элементы.Закрыт.Заголовок = НСтр("ru = 'Закрыт'");
		Элементы.Закрыт.Подсказка = НСтр("ru = 'Товар отгружен и получен, накладная подписана обеими сторонами.'");
		Элементы.НомерДокумента.Подсказка = НСтр("ru = 'Номер накладной'");
		Элементы.ДатаДокумента.Подсказка = НСтр("ru = 'Дата накладной'");
		Элементы.Сумма.Подсказка = НСтр("ru = 'Сумма накладной'");
		Элементы.ГруппаПериодДействия.Видимость = Ложь;
		Элементы.Родитель.Видимость = Истина;
		Элементы.Родитель.Подсказка = НСтр("ru = 'Договор или дополнительное соглашение, к которому относится данная накладная.'");
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДоговорныхДокументов.Акт Тогда 	
		
		Элементы.Закрыт.Заголовок = НСтр("ru = 'Закрыт'");
		Элементы.Закрыт.Подсказка = НСтр("ru = 'Работы полностью выполнены, акт подписан обеими сторонами.'");
		Элементы.НомерДокумента.Подсказка = НСтр("ru = 'Номер акта'");
		Элементы.ДатаДокумента.Подсказка = НСтр("ru = 'Дата акта'");
		Элементы.Сумма.Подсказка = НСтр("ru = 'Сумма акта'");
		Элементы.ГруппаПериодДействия.Видимость = Ложь;
		Элементы.Родитель.Видимость = Истина;
		Элементы.Родитель.Подсказка = НСтр("ru = 'Договор или дополнительное соглашение, к которому относится данный акт.'");
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыДоговорныхДокументов.Счет Тогда 
		
		Элементы.Закрыт.Заголовок = НСтр("ru = 'Оплачен'");
		Элементы.Закрыт.Подсказка = НСтр("ru = 'Счет полностью оплачен.'");
		Элементы.НомерДокумента.Подсказка = НСтр("ru = 'Номер счета'");
		Элементы.ДатаДокумента.Подсказка = НСтр("ru = 'Дата счета'");
		Элементы.Сумма.Подсказка = НСтр("ru = 'Сумма счета'");
		Элементы.ГруппаПериодДействия.Видимость = Ложь;
		Элементы.Родитель.Видимость = Истина;
		Элементы.Родитель.Подсказка = НСтр("ru = 'Договор,  дополнительное соглашение, накладная или акт, к которому относится данный счет.'");
		
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		СтрокаТовары.НоменклатураСтрока = Строка(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮридическоеФизическоеЛицо");
	ЕстьЗаполнениеТаблицыТоваров = ДоговорныеДокументы.ЕстьЗаполнениеТаблицыТоваров(Объект.ВидДокумента, ВидКонтрагента);
	Если Объект.ВидДокумента.КтоГотовит = Перечисления.КтоГотовит.Контрагент 
	 Или Объект.ВидДокумента.Тип = Перечисления.ТипыДоговорныхДокументов.Накладная
	 Или Объект.ВидДокумента.Тип = Перечисления.ТипыДоговорныхДокументов.Счет
	 Или Не ЕстьЗаполнениеТаблицыТоваров Тогда 
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;	
	
	УчитыватьНДС = ДоговорныеДокументы.УчитыватьНДС();
	Если Не УчитыватьНДС Тогда 
		Элементы.ГруппаСуммаНДС.Видимость = Ложь;
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда 
		Элементы.КоманднаяПанельНоменклатура.Видимость = Ложь;
		Элементы.ВсяНоменклатура.Видимость = Истина;
		Элементы.Товары.Видимость = Истина;
	Иначе	
		
		Элементы.КоманднаяПанельНоменклатура.Видимость = Истина;
		Элементы.ВсяНоменклатура.Видимость = Ложь;
		Элементы.Товары.Видимость = Истина;
	КонецЕсли;
	
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	
	Если Параметры.Свойство("ЗаполненныйФайлДляОткрытия") И ЗначениеЗаполнено(Параметры.ЗаполненныйФайлДляОткрытия) Тогда 
		ЗаполненныйФайлДляОткрытия = Параметры.ЗаполненныйФайлДляОткрытия;
	КонецЕсли;
	
	СпособНумерации = Объект.ВидДокумента.СпособНумерации;
	Если СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда 
		АвтоматическийНомер = Объект.НомерДокумента;
	КонецЕсли;	
	
	Если (Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) 
		Или Параметры.Свойство("ЭтоТолькоЧтоСозданныйДокумент") Тогда
		
		ПоказыватьУведомлениеОЗаписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ДоговорныеДокументы", "ПоказыватьУведомлениеОЗаписи", Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьСканирования();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	ВывестиЗаголовокГруппыЭтапов();
	ВывестиЗаголовокГруппыСогласование();
	ОбновитьДекорации();
	ОбновитьОтображениеСуммы();
	
	СписокПолей = Новый Структура;
	СписокПолей.Вставить("НомерДокумента", Объект.НомерДокумента);
	СписокПолей.Вставить("ДатаДокумента", Объект.ДатаДокумента);
	СписокПолей.Вставить("Контрагент", Объект.Контрагент);
	Если ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Договор") Тогда 
		СписокПолей.Вставить("Родитель", Объект.Родитель);
	КонецЕсли;	
	СписокПолей.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	СписокПолей.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
	СписокПолей.Вставить("Сумма", Объект.СуммаДокумента);
	Если УчитыватьНДС Тогда 
		СписокПолей.Вставить("СуммаНДСДокумента", Объект.СуммаНДСДокумента);
	КонецЕсли;	
	СписокПолей.Вставить("Описание", Объект.Описание);
	СписокПолей.Вставить("Ответственный", Объект.Описание);
	
	Для Каждого Строка Из СписокПолей Цикл
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда 
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы[Строка.Ключ];
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаполненныйФайлДляОткрытия) Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЗаполненныйФайл", ЭтотОбъект,
			Новый Структура("Файл", ЗаполненныйФайлДляОткрытия));
		ПоказатьПредупреждение(ОписаниеОповещения,
			СтрШаблон(НСтр("ru = 'Файл ""%1"" сформирован и сейчас будет открыт.
                            |Проверьте правильность его заполнения.'"),
				Строка(ЗаполненныйФайлДляОткрытия)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	МассивЗахваченныхФайлов = ПолучитьМассивЗахваченныхФайлов();
	
	СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		ТребуетсяАвтозаполнениеФайлов = ТребуетсяАвтозаполнение();
		
		Если ТребуетсяАвтозаполнениеФайлов Тогда
		
			СтрокаФайлов = "";
			Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
				Если Не ПустаяСтрока(СтрокаФайлов) Тогда
					СтрокаФайлов = СтрокаФайлов + Символы.ВК;
				КонецЕсли;	
				СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
			КонецЦикла;
			
			Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Закройте файлы, чтобы обновить их из реквизитов документа:
					| 
					|%1.'"),
					СтрокаФайлов);
			Иначе	
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Закройте файл, чтобы обновить его из реквизитов документа:
					| 
					|%1.'"),
					СтрокаФайлов);
				
			КонецЕсли;	
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", ЭтотОбъект);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НеОсвобождатьЗанятыеWordФайлы = Истина;
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы);
		
	Если Не НовыйДокумент И ЗаполняемыеФайлы.Количество() > 0 И Не ПоказаноПредупреждениеОЗаполненииФайлов Тогда
		ОбновитьЗаполняемыеФайлыПередЗакрытием();
		Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0
			И ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПредупреждатьОЗаполненииФайлов Тогда 
			Обработчик = Новый ОписаниеОповещения("ПослеФормыОЗаполненииФайлов", ЭтотОбъект);
			Отказ = Истина;
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ТекстПредупреждения",
				НСтр("ru = 'Изменены реквизиты, участвующие в заполнении файлов. 
                     |Файлы будут обновлены данными документа.'"));
			ПараметрыОткрытия.Вставить("Заголовок",
				НСтр("ru = 'Обновление файлов'"));
			ПараметрыОткрытия.Вставить("КлючОбъекта", "ДоговорныеДокументы");
			ПараметрыОткрытия.Вставить("КлючНастроек", "ПредупреждатьОЗаполненииФайлов");
			ПараметрыОткрытия.Вставить("КлючФормы", ЭтаФорма.УникальныйИдентификатор);
			
			ОткрытьФорму("ОбщаяФорма.ФормаПредупреждения", ПараметрыОткрытия,,,,, Обработчик,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordПередЗакрытием(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормыОЗаполненииФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	ПоказаноПредупреждениеОЗаполненииФайлов = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется автоматическое обновление заполненных файлов. Пожалуйста, подождите...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		МассивДанныхДляОбновленияФайловНаСервере = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
				ДвоичныеДанныеЗаполненногоФайла = Неопределено;
				
				КлючеваяОперация = "ЗаполнениеФайловDocДаннымиДокумента";
				ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
				
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеФайла,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.МассивЗамен,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанныеФайла);
				
				Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
					ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
					ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
					МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
				КонецЕсли;
				
			Иначе 
				МассивДанныхДляОбновленияФайловНаСервере.Добавить(ФайлДляАвтоЗаполнения.Файл);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		
		Если МассивДанныхДляОбновленияФайловНаСервере.Количество() > 0 Тогда
			ВыполнитьОбновлениеФайловНаСервере(МассивДанныхДляОбновленияФайловНаСервере);
		КонецЕсли;
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
	КонецЕсли;
	
	Если ПоказыватьУведомлениеОЗаписи И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			
		ПараметрыФормы = Новый Структура;
		Если ЭтоБазоваяВерсияКонфигурации Тогда 
			ПараметрыФормы.Вставить("Текст", 
				НСтр("ru = '<BODY>
					|Документ записан и теперь программа сама будет отслеживать:
					|<li>Сроки действия документа</li>
					|<li>Сроки этапов документа</li>
					|<li>Возврат оригинала документа контрагентом</li></ul>
					|</BODY>'"));
		Иначе 
			ПараметрыФормы.Вставить("Текст", 
				НСтр("ru = '<BODY>
					|Документ записан и теперь программа сама будет отслеживать:
					|<ul><li>Согласование</li>
					|<li>Сроки действия документа</li>
					|<li>Сроки этапов документа</li>
					|<li>Возврат оригинала документа контрагентом</li></ul>
					|</BODY>'"));
		КонецЕсли;
		
		ПараметрыФормы.Вставить("БольшеНеПоказывать", Истина);
		ПараметрыФормы.Вставить("КлючОбъекта", "ДоговорныеДокументы");
		ПараметрыФормы.Вставить("КлючНастроек", "ПоказыватьУведомлениеОЗаписи");
		
		ОткрытьФорму("ОбщаяФорма.Подсказка", ПараметрыФормы);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			УстановитьДоступностьКоманд(ТекущиеДанные);
		Иначе
			
			Контекст = Новый Структура;
			Контекст.Вставить("Дерево", СопроводительныеДокументы);
			Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
			Контекст.Вставить("Файл", ФайлСсылка);
			ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "ОбновитьФайлВДереве");
			
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
			КонецЕсли;
			
			ОповеститьОбИзменении(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "КомпонентаСканированияУстановлена" Тогда
		УстановитьДоступностьСканирования();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда 
		ОтобразитьИнформациюОПередаче();
		ОбновитьДекорации();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Подчиненного" 
		И ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Счет") Тогда 
		ДобавленДокумент = Ложь;
		Если Параметр.Родитель = Объект.Ссылка Тогда 
			ЗаполнитьДеревоСопроводительныхДокументов();
			ДобавленДокумент = Истина;
		Иначе 
			Контекст = Новый Структура;
			Контекст.Вставить("Дерево", СопроводительныеДокументы);
			Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
			Контекст.Вставить("Идентификатор", Неопределено);
			Контекст.Вставить("Документ", Параметр.Родитель);
			ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "ДокументВДеревеСуществует");
			
			Если Контекст.Идентификатор <> Неопределено Тогда 
				ЗаполнитьДеревоСопроводительныхДокументов();
				ДобавленДокумент = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленДокумент = Истина Тогда 
			// Раскроем дерево
			КоллекцияСтрок = СопроводительныеДокументы.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияСтрок Цикл
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Элементы.СопроводительныеДокументы.Развернуть(ИдентификаторСтроки, Истина);
			КонецЦикла;
			
			// Установим курсор в нужную строку
			Если Параметр.Свойство("Документ") Тогда 
				
				Контекст = Новый Структура;
				Контекст.Вставить("Дерево", СопроводительныеДокументы);
				Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
				Контекст.Вставить("Идентификатор", Неопределено);
				Контекст.Вставить("Документ", Параметр.Документ);
				ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "ДокументВДеревеСуществует");
				
				Если Контекст.Идентификатор <> Неопределено Тогда 
					Элементы.СопроводительныеДокументы.ТекущаяСтрока = Контекст.Идентификатор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СогласующиеДобавленыИзменены И Объект.Согласующие.Количество() <> 0 Тогда
		
		МассивЗахваченныхФайлов = ПолучитьМассивЗахваченныхФайлов();
		
		СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов);
		
		Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
				
			СтрокаФайлов = "";	
			Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
				Если Не ПустаяСтрока(СтрокаФайлов) Тогда
					СтрокаФайлов = СтрокаФайлов + Символы.ВК;
				КонецЕсли;	
				СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
			КонецЦикла;	
			
			Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Для отправки на согласование закройте файлы:  
					| 
					|%1.'"),
					СтрокаФайлов);
			Иначе	
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Для отправки на согласование закройте файл:  
					| 
					|%1.'"),
					СтрокаФайлов);
				
			КонецЕсли;	
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗаписью", ЭтотОбъект);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			Отказ = Истина;
			Возврат;
				
		КонецЕсли;	
		
		ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов, Истина);
		
	КонецЕсли;	
	
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Согласующие, "Исполнитель");
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Этапы, "Этап");
	ДоговорныеДокументыКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Товары, "НоменклатураСтрока");
	
	МассивДублей = Новый Массив;
	КоличествоИсполнителей = Объект.Согласующие.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей - 2 Цикл
		Строка1 = Объект.Согласующие[Инд1];
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей - 1 Цикл
			Строка2 = Объект.Согласующие[Инд2];
			
			ТекстСообщения = "";
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда 
				МассивДублей.Добавить(Строка1.Исполнитель);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементДубль Из МассивДублей Цикл 
		ПервоеВхождениеНайдено = Ложь;
		Ит = КоличествоИсполнителей - 1;
		
		Пока Ит >= 0 Цикл 
			Строка2 = Объект.Согласующие[Ит];
			Если Строка2.Исполнитель = ЭлементДубль И Не ПервоеВхождениеНайдено Тогда 
				ПервоеВхождениеНайдено = Истина;
			ИначеЕсли Строка2.Исполнитель = ЭлементДубль Тогда 
				Объект.Согласующие.Удалить(Ит);
				КоличествоИсполнителей = КоличествоИсполнителей - 1;
			КонецЕсли;
			
			Ит = Ит - 1;
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	// Оценка производительности
	Если Не Отказ Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ДокументыВыполнениеКомандыЗаписать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordПередЗаписью(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого Строка Из ТекущийОбъект.Товары Цикл 
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда 
			СтрокаОбъекта = Объект.Товары.Получить(Строка.НомерСтроки - 1);
			Строка.Номенклатура = ДоговорныеДокументы.СоздатьНоменклатуру(
				СтрокаОбъекта.НоменклатураСтрока, 
				СтрокаОбъекта.ЕдиницаИзмерения,
				СтрокаОбъекта.Цена, 
				СтрокаОбъекта.СтавкаНДС);
		КонецЕсли;
		
		Строка.Номер = Строка.НомерСтроки;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда 
		
		ТекущийОбъект.ДатаДокумента = ТекущаяДата();
		Нумерация.СформироватьЧисловойНомерДокумента(ТекущийОбъект, ТекущийОбъект.ЧисловойНомер);
	
		ОписанияОшибок = Новый СписокЗначений;
		Нумерация.СформироватьСтроковыйНомерДокумента(ТекущийОбъект, ТекущийОбъект.НомерДокумента, ОписанияОшибок);
	
		Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОписаниеОшибки.Представление,,
				ОписаниеОшибки.Значение,
			"Объект");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл
			ФайлТаблицы = ФайлыДобавленные[Индекс]; 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
            КонецЕсли;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			ВладелецФайла = ТекущийОбъект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(ТекущийОбъект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
			
			Если ФайлТаблицы.ДобавленИзШаблона Тогда
				ФайлОбъект = Приемник.ПолучитьОбъект();
				ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
				ФайлОбъект.Записать();
			КонецЕсли;
			
			Если Не Источник.ТекущаяВерсия.Пустая() Тогда
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = Источник.ТекущаяВерсия.ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
					
				// Автозаполнение файлов
				Если Источник <> Неопределено И ФайлТаблицы.ДобавленИзШаблона Тогда
					НастройкиАвтозаполнения = ПолучитьНастройкиАвтозаполненийШаблона(Приемник, 
						Приемник.ШаблонОснованиеДляСоздания, Приемник.ВладелецФайла);
					
					Если Приемник.ТекущаяВерсияРасширение = "doc"
						И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
						И Не ЭтоВебКлиент Тогда
						НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
						НоваяСтрока.Файл = Приемник;
						НоваяСтрока.Автозаполнение = Истина;
						НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
					Иначе
						РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
							Ложь, Приемник, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Источник = ТекущийФайлВСпискеДобавленныхДляРедактирования Тогда
					ТекущийФайлВСпискеДобавленныхДляРедактирования = Приемник;
				КонецЕсли;
				
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов();
	КонецЕсли;
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
	Если Не НовыйДокумент И КонтрагентПриОткрытии <> Объект.Контрагент Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ЖурналПередачи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
		НаборЗаписей.Прочитать();
		
		ЕстьИзменения = Ложь;
		Для Каждого Набор Из НаборЗаписей Цикл 
			Если Набор.Пользователь <> Объект.Контрагент Тогда 
				Набор.Пользователь = Объект.Контрагент;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда 
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл 
		СтрокаТовары.НоменклатураСтрока = Строка(СтрокаТовары.Номенклатура);
	КонецЦикла;
	
	СогласующиеДобавленыИзменены = Ложь;
	
	// проверка изменения номера
	СпособНумерации = ТекущийОбъект.ВидДокумента.СпособНумерации;
	Если СпособНумерации = Перечисления.СпособыНумерации.Автоматически 
		И СокрЛП(АвтоматическийНомер) <> СокрЛП(ТекущийОбъект.НомерДокумента) 
		И ЗначениеЗаполнено(АвтоматическийНомер)
		И ЗначениеЗаполнено(ТекущийОбъект.НомерДокумента)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(АвтоматическийНомер)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТекущийОбъект.НомерДокумента) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		
		НовыйЧисловойНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ТекущийОбъект.НомерДокумента);
	   
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПериодНумерации = НачалоГода(ТекущаяДата());
		Если ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда 
			МенеджерЗаписи.СвязанныйДокумент = ТекущийОбъект.Родитель;
		КонецЕсли;	
		МенеджерЗаписи.ВидДокумента = ТекущийОбъект.ВидДокумента;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.ТекущийНомер < НовыйЧисловойНомер Тогда 
			МенеджерЗаписи.ТекущийНомер = НовыйЧисловойНомер;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяАвтозаполнение = ТребуетсяАвтозаполнениеПроверкаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УстановитьДоступностьСканирования();
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
		
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьДекорации();
	
	#Если НЕ ВебКлиент Тогда
	//Выполнить автозаполнение файлов, которые должны заполняться на клиенте
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 И НовыйДокумент Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			
			ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
			ДвоичныеДанныеЗаполненногоФайла = Неопределено;
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеШаблона,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.НастройкиЗамены,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанные);
			КонецЕсли;
			
			Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
				ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
				ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
				МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
	КонецЕсли;
	
	#КонецЕсли
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда 
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Документ", Объект.Ссылка);
		ПараметрОповещения.Вставить("Родитель", Объект.Родитель);
		Оповестить("Запись_Подчиненного", ПараметрОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),,"Объект.Контрагент",,Отказ);
	КонецЕсли;
	
	Если Элементы.Родитель.Видимость Тогда 
		ПроверяемыеРеквизиты.Добавить("Родитель");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда
		
		Если Не Объект.Ссылка.Пустая() Тогда 
			ЗаполнитьСписокФайлов();
		КонецЕсли;
		
		Элементы.КонтекстноеМенюФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстПередачиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "Открыть");
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Пользователь", Объект.Контрагент);
	
	ОткрытьФорму("РегистрСведений.ЖурналПередачи.ФормаЗаписи", ПараметрыФормы,,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСогласующего(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Контрагент", Объект.Контрагент);
	
	ТипыДляОтбора = Новый Массив;
	ТипыДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Договор"));
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Акт")
	 Или ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Накладная") Тогда 
	 	ТипыДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.ДопСоглашение"));
	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Счет") Тогда 
		ТипыДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.ДопСоглашение"));
		ТипыДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Акт"));
		ТипыДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Накладная"));
	КонецЕсли;	
	Отбор.Вставить("ТипДокумента", ТипыДляОтбора);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ДоговорныеДокументы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(Строка.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, , , НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДоговорныеДокументыКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийЭлемент = Элементы.Файлы;
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПараметрыВыполнения = Новый Структура("Файл", Файл);
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеУстановкиРасширения", 
		ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Файл = ПараметрыВыполнения.Файл;
	
	Если ЗаполняемыеФайлы.Количество() = 0 Тогда 
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОткрытиеФайла");
		ОбновитьИОткрытьФайл(Неопределено, Новый Структура("Файл", Файл));
		Возврат;
	КонецЕсли;
	
	// Возможно требуется обновить файлы, т.к. изменились реквизиты
	Если (Модифицированность Или Объект.Ссылка.Пустая())
		И Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяАвтозаполнение Тогда 
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОткрытиеФайла");
		ОбновитьИОткрытьФайл(Неопределено, Новый Структура("Файл", Файл));
		Возврат;
	КонецЕсли;
	
	МассивЗахваченныхФайлов = ПолучитьМассивЗахваченныхФайлов();
	СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		СтрокаФайлов = "";	
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Закройте файлы, чтобы обновить их из реквизитов документа:
				| 
				|%1.'"),
				СтрокаФайлов);
		Иначе	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Закройте файл, чтобы обновить его из реквизитов документа:
				| 
				|%1.'"),
				СтрокаФайлов);
			
		КонецЕсли;	
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаОЗанятыхФайлах", ЭтотОбъект,
			Новый Структура("Файл", Файл));
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Возврат;
	
	КонецЕсли;
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ОткрытиеФайла");
	НеОсвобождатьЗанятыеWordФайлы = Истина;
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, НеОсвобождатьЗанятыеWordФайлы);
		
	ОбработчикОбновления = Новый ОписаниеОповещения("ОбновитьИОткрытьФайл", ЭтотОбъект,
		Новый Структура("Файл", Файл));
	ОбновитьЗаполняемыеФайлыПередЗакрытием();
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0
		И ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПредупреждатьОЗаполненииФайлов Тогда 
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТекстПредупреждения",
			НСтр("ru = 'Изменены реквизиты, участвующие в заполнении файлов. 
                 |Файлы будут обновлены данными документа.'"));
		ПараметрыОткрытия.Вставить("Заголовок",
			НСтр("ru = 'Обновление файлов'"));
		ПараметрыОткрытия.Вставить("КлючОбъекта", "ДоговорныеДокументы");
		ПараметрыОткрытия.Вставить("КлючНастроек", "ПредупреждатьОЗаполненииФайлов");
		ПараметрыОткрытия.Вставить("КлючФормы", ЭтаФорма.УникальныйИдентификатор);
		
		ОткрытьФорму("ОбщаяФорма.ФормаПредупреждения", ПараметрыОткрытия,,,,, ОбработчикОбновления,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	Иначе 
		ВыполнитьОбработкуОповещения(ОбработчикОбновления, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗанятыхФайлах(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ВыборФайла(ПараметрыВыполнения.Файл)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИОткрытьФайл(Результат, Параметры) Экспорт 
	
	Если ТребуетсяАвтозаполнение И ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется автоматическое обновление заполненных файлов. Пожалуйста, подождите...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		МассивДанныхДляОбновленияФайловНаСервере = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
				ДвоичныеДанныеЗаполненногоФайла = Неопределено;
				
				КлючеваяОперация = "ЗаполнениеФайловDocДаннымиДокумента";
				ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
				
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеФайла,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.МассивЗамен,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанныеФайла);
				
				Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
					ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
					ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
					МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
				КонецЕсли;
				
			Иначе 
				МассивДанныхДляОбновленияФайловНаСервере.Добавить(ФайлДляАвтоЗаполнения.Файл);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		
		ВыполнитьОбновлениеФайловНаСервере(МассивДанныхДляОбновленияФайловНаСервере, Истина);
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		
		Состояние();
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Параметры.Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", СопроводительныеДокументы);
	Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
	Контекст.Вставить("Файл", ПараметрыВыполнения.ДанныеФайла.Ссылка);
	ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "ОбновитьФайлВДереве");
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если ТекущийИтогСумма = Объект.СуммаДокумента Тогда 
		Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	КонецЕсли;
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	
	Если УчитыватьНДС Тогда 
		Если ТекущийИтогСуммаНДС = Объект.СуммаНДСДокумента Тогда 
			Объект.СуммаНДСДокумента = Объект.Товары.Итог("СуммаНДС");
		КонецЕсли;
		ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				ПеренестиНоменклатуруИзГруппы(ТекущиеДанные.Ссылка);
			Иначе 
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = Объект.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.НоменклатураСтрока = Строка(ТекущиеДанные.Ссылка);
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
					НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
					НайденнаяСтрока.Количество = 1;
					ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
						ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		ТоварыПриИзменении(Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуНДСВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДоговорныеДокументыКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтрока) Тогда 
			РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
				ТекущиеДанные.Номенклатура, "СтавкаНДС, Цена, ЕдиницаИзмерения");
			ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
			ТекущиеДанные.Цена = РеквизитыКарточки.Цена;
			ТекущиеДанные.СтавкаНДС = РеквизитыКарточки.СтавкаНДС;
			ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
		Иначе 
			ТекущиеДанные.Номенклатура = Неопределено;
			ТекущиеДанные.Цена = 0;
			ТекущиеДанные.СтавкаНДС = Неопределено;
			ТекущиеДанные.Сумма = 0;
			ТекущиеДанные.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ПараметрыФормы = Новый Структура;
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Номенклатура);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НоменклатураСтрока) Тогда 
			ТекущиеДанные.Номенклатура = ДоговорныеДокументы.СоздатьНоменклатуру(
				ТекущиеДанные.НоменклатураСтрока,
				ТекущиеДанные.ЕдиницаИзмерения,
				ТекущиеДанные.Цена,
				ТекущиеДанные.СтавкаНДС);
			ТекущиеДанные.НоменклатураСтрока = Строка(ТекущиеДанные.Номенклатура);
			ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущиеДанные.Номенклатура = ВыбранноеЗначение;
		ТекущиеДанные.НоменклатураСтрока = Строка(ТекущиеДанные.Номенклатура);
		РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
			ТекущиеДанные.Номенклатура, "СтавкаНДС, Цена, ЕдиницаИзмерения");
		ТекущиеДанные.Цена = РеквизитыКарточки.Цена;
		ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
		ТекущиеДанные.СтавкаНДС = РеквизитыКарточки.СтавкаНДС;
		ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СписокВыбора = ДоговорныеДокументы.ПолучитьДанныеВыбораНоменклатуры(Текст);
		Если СписокВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = СписокВыбора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСопроводительныеДокументы

&НаКлиенте
Процедура СопроводительныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СопроводительныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СопроводительныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СопроводительныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	МассивУдаления = Новый Массив;
	ПометкаУдаления = Ложь; НаименованиеДокумента = ""; 
	Для Каждого ВыбраннаяСтрока Из Элементы.СопроводительныеДокументы.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СопроводительныеДокументы.ДанныеСтроки(ВыбраннаяСтрока);
		
		Если ДанныеСтроки.Документ = Объект.Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивУдаления.Добавить(ДанныеСтроки.Документ);
		НаименованиеДокумента = ДанныеСтроки.Представление;
		
		Если Не ПометкаУдаления Тогда 
			ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУдаляемыхДокументов = МассивУдаления.Количество();
	Если КоличествоУдаляемыхДокументов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоУдаляемыхДокументов > 1 Тогда  
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные документы на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных документов пометку на удаление?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				НаименованиеДокумента);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				НаименованиеДокумента);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("МассивУдаления", МассивУдаления);
	ПараметрыОповещения.Вставить("ПометкаУдаления", ПометкаУдаления);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СопроводительныеДокументыПередУдалениемПродолжение",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивУдаления = Параметры.МассивУдаления;
		ПометитьДокументыНаУдаление(МассивУдаления, Не Параметры.ПометкаУдаления);
		
		// Раскроем дерево
		КоллекцияСтрок = СопроводительныеДокументы.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.СопроводительныеДокументы.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Для Каждого ВыбраннаяСтрока Из ПараметрыПеретаскивания.Значение Цикл
		Если ВыбраннаяСтрока <> Неопределено Тогда 
			ТекущиеДанные = СопроводительныеДокументы.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если  Не ЗначениеЗаполнено(ТекущиеДанные.Документ)
				Или ЗначениеЗаполнено(ТекущиеДанные.Файл)
				Или ТекущиеДанные.Документ = Объект.Ссылка Тогда
				Выполнение = Ложь;
			КонецЕсли;
		Иначе 
			Выполнение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = СопроводительныеДокументы.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие формы заполнения реквизитов документа
	ПараметрыОткрытия = Новый Структура;
	Если ТекущиеДанные.ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Счет") Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'У документа типа ""Счет"" не может быть подчиненных документов.'"));
		Возврат;
		
	Иначе 
		ПараметрыОткрытия.Вставить("Родитель", ТекущиеДанные.Документ);
	КонецЕсли;
	
	ПринятыеФайлы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеФайлы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		
		ДанныеПеретаскивания = СопроводительныеДокументы.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
		Если ДанныеПеретаскивания = Неопределено Или Не ЗначениеЗаполнено(ДанныеПеретаскивания.Документ) Тогда
			Возврат;
		КонецЕсли;
		
		ДоговорнойДокумент = ДанныеПеретаскивания.Документ;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		
		ПринятыеФайлы.Добавить(ПараметрыПеретаскивания.Значение);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ДоговорныеДокументы")  Тогда
		
		ДоговорнойДокумент = ПараметрыПеретаскивания.Значение;
		
	КонецЕсли;
	
	Если ПринятыеФайлы.Количество() > 0 Тогда
		Вложения = Новый Массив;
		Для Каждого Файл Из ПринятыеФайлы Цикл
			
			ВложениеИнфо = Новый Структура;
			ВложениеИнфо.Вставить("Имя", Файл.Имя);
			ВложениеИнфо.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
			ВложениеИнфо.Вставить("Расширение", Файл.Расширение);
			ВложениеИнфо.Вставить("Размер", Файл.Размер());
			ВложениеИнфо.Вставить("Идентификатор", "");
			ВложениеИнфо.Вставить("ИндексКартинки", 
				ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение));
			
			ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			ВложениеИнфо.Вставить("Адрес", Адрес);
			
			Вложения.Добавить(ВложениеИнфо);
		КонецЦикла;
		
		ПараметрыОткрытия.Вставить("Вложения", Вложения);
		
		ОткрытьФорму(
			"Справочник.ДоговорныеДокументы.ФормаОбъекта",
			ПараметрыОткрытия,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	ИначеЕсли ЗначениеЗаполнено(ДоговорнойДокумент) Тогда 
		ТекстОшибки = "";
		Если Не ИзменитьРодителя(ДоговорнойДокумент, ТекущиеДанные.Документ, ТекущиеДанные.ТипДокумента, ТекстОшибки) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		// Раскроем дерево
		КоллекцияСтрок = СопроводительныеДокументы.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.СопроводительныеДокументы.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;
		
		// Установим курсор в нужную строку
		Контекст = Новый Структура;
		Контекст.Вставить("Дерево", СопроводительныеДокументы);
		Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
		Контекст.Вставить("Идентификатор", Неопределено);
		Контекст.Вставить("Документ", ДоговорнойДокумент);
		ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "ДокументВДеревеСуществует");
		
		Если Контекст.Идентификатор <> Неопределено Тогда 
			Элементы.СопроводительныеДокументы.ТекущаяСтрока = Контекст.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласующие

&НаКлиенте
Процедура СогласующиеПриИзменении(Элемент)
	
	ВывестиЗаголовокГруппыСогласование()
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Согласующие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РезультатСогласования) Тогда 
		Отказ = Истина;
		Если ТекущиеДанные.Исполнитель = ТекущийПользователь Тогда 
			ТекстВопроса = НСтр("ru = 'Отменить результат согласования?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтменитьРезультатСогласования", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СогласующиеДобавленыИзменены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			НайденныеСтроки = Объект.Согласующие.НайтиСтроки(Новый Структура("Исполнитель", ВыделеннаяСтрока));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Согласующие.Добавить();
				НайденнаяСтрока.Исполнитель = ВыделеннаяСтрока;
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		
		ВывестиЗаголовокГруппыСогласование();
		СогласующиеДобавленыИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРезультатСогласования(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;	
	
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	ТекущиеДанные.РезультатСогласования = Неопределено;
	ТекущиеДанные.ДатаСогласования = '00010101';
	Модифицированность = Истина;
	ВывестиЗаголовокГруппыСогласование();
	
КонецПроцедуры	

&НаКлиенте
Процедура СогласующиеИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Согласующие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РезультатСогласования) Тогда 
		ТекущиеДанные.РезультатСогласования = Неопределено;
		ТекущиеДанные.ДатаСогласования = '00010101';
	КонецЕсли;	
	
	СогласующиеДобавленыИзменены = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СогласующиеИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПользователиДоговоры.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
	ВывестиЗаголовокГруппыЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПройденПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	Если ТекущиеДанные.Пройден Тогда 
		ТекущиеДанные.ДатаПрохождения = ТекущаяДата();
	Иначе
		ТекущиеДанные.ДатаПрохождения = '00010101';
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			"Создание:", 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект.Ссылка, УникальныйИдентификатор, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайлов();
	Элементы.КонтекстноеМенюФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРеквизит(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		НаборСвойств = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,
			"НаборСвойств");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НаборСвойств", НаборСвойств);
		ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
		ПараметрыФормы.Вставить("ТекущийНаборСвойств", НаборСвойств);
		
		ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
			ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Не заполнен вид документа. 
              |Ввод дополнительных реквизитов не возможен.'"),,
			"Объект.ВидДокумента");
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Передать(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Режим", "Передать");
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Пользователь", Объект.Контрагент);
	
	ОткрытьФорму("РегистрСведений.ЖурналПередачи.ФормаЗаписи", ПараметрыФормы,,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Возвратить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВозвратитьПродолжение",
		ЭтотОбъект);
		
	ТекстВопроса = НСтр("ru = 'Отразить возврат оригинала документа от контрагента?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратитьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорныеДокументыКлиент.ОтразитьВозвратОригинала(ЭтаФорма, Объект.Ссылка);
	ОбновитьДекорации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПередачи(Команда)
	
	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.ЖурналПередачи.Форма.ФормаСпискаДокумента", ПараметрыФормы, ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоСопроводительныхДокументов(Команда)
	
	ЗаполнитьДеревоСопроводительныхДокументов();
	
	КоллекцияСтрок = СопроводительныеДокументы.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.СопроводительныеДокументы.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСогласующего(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеПользователи.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		НайденныеСтроки = Объект.Согласующие.НайтиСтроки(Новый Структура("Исполнитель", ВыделеннаяСтрока));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НайденнаяСтрока = Объект.Согласующие.Добавить();
			НайденнаяСтрока.Исполнитель = ВыделеннаяСтрока;
		КонецЕсли;
	КонецЦикла;	
	Модифицированность = Истина;
	
	ВывестиЗаголовокГруппыСогласование();
	
	СогласующиеДобавленыИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСогласующих(Команда)
	
	ПоказыватьВсехПользователей = Не ПоказыватьВсехПользователей;
	Элементы.СогласующиеПодобратьСогласующих.Пометка = ПоказыватьВсехПользователей;
	Элементы.ГруппаВсеПользователи.Видимость = ПоказыватьВсехПользователей;
	Элементы.ДекорацияДляОтправкиНаСогласование.Видимость = ПоказыватьВсехПользователей;
	Элементы.Согласующие.Шапка = ПоказыватьВсехПользователей;
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	Для Каждого Строка Из Объект.Согласующие Цикл
		Если Строка.Исполнитель = ТекущийПользователь Тогда 
			Строка.РезультатСогласования = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано");
			Строка.ДатаСогласования = ТекущаяДата();
			Записать();
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Согласование документа'"),
				ПолучитьНавигационнуюСсылку(Объект.Ссылка),
				СтрШаблон(НСтр("ru = 'Документ """"%1"""" согласован'"), Объект.Ссылка));
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Элементы.ГруппаСогласовать.Видимость = Ложь;
	ВывестиЗаголовокГруппыСогласование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьНомер(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Регистрация", Истина);
	
	Если Не Записать(ПараметрыЗаписи) Тогда 
		Если ЗначениеЗаполнено(Объект.ЧисловойНомер) Тогда
			// компенсация регистрации
			СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
			Нумерация.ОсвободитьНомер(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокумент(Копирование)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СопроводительныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийДокумент = ТекущиеДанные.Документ;
		ТипТекущегоДокумента = ТекущиеДанные.ТипДокумента;
	Иначе 
		ТекущийДокумент = Объект.Ссылка;
		ТипТекущегоДокумента = ТипДокумента;
	КонецЕсли;
	
	Если Копирование Тогда 
		Если ТекущийДокумент = Объект.Ссылка Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДокумент);
		КлючеваяОперация = "ДокументыВыполнениеКомандыСоздать";
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		
		Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.СопроводительныеДокументы,
			Новый УникальныйИдентификатор,,,,);
	Иначе 
		Если ТипТекущегоДокумента = ПредопределенноеЗначение("Перечисление.ТипыДоговорныхДокументов.Счет") Тогда 
			ПоказатьПредупреждение(, НСтр("ru = 'У документа типа ""Счет"" не может быть подчиненных документов.'"));
			Возврат;
			
		Иначе 
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Родитель", ТекущийДокумент);
			Открытьформу("Справочник.ДоговорныеДокументы.ФормаОбъекта", ПараметрыФормы, Элементы.СопроводительныеДокументы, 
				Новый УникальныйИдентификатор,,,,);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервыйДокумент(Команда)
	
	ДобавитьДокумент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйДокумент(Команда)
	
	ДобавитьДокумент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ТоварыПодобратьТовары.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			ПеренестиНоменклатуруИзГруппы(ТекущиеДанные.Ссылка);
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.НоменклатураСтрока = Строка(ТекущиеДанные.Ссылка);
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
				НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
				НайденнаяСтрока.Количество = 1;
				ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
	
	ТоварыПриИзменении(Элементы.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументовОбновить(Команда)
	
	ЗаполнитьДеревоСопроводительныхДокументов();
	
	КоллекцияСтрок = СопроводительныеДокументы.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.СопроводительныеДокументы.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйЭтап(Команда)
	
	ПодключитьОбработчикОжидания("ДобавитьЭтап", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОтправитьРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСогласующих(Команда)
	
	Элементы.ГруппаНетСогласующих.Видимость = Ложь;
	
	Элементы.ГруппаСогласующие.Видимость = Истина;
	Элементы.КомПанельСогласование.Видимость = Ложь;
	Элементы.ГруппаВсеПользователи.Видимость = Истина;
	Элементы.ДекорацияДляОтправкиНаСогласование.Видимость = Истина;
	Элементы.Согласующие.Шапка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапы(Команда)
	
	Элементы.ГруппаНетЭтапов.Видимость = Ложь;
	
	Элементы.Этапы.Видимость = Истина;
	Элементы.ГруппаНадписьЭтапы.Видимость = Истина;
	
	ПодключитьОбработчикОжидания("ДобавитьЭтапОбработчик", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапОбработчик()
	
	ДобавитьЭтап();
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПометитьДокументыНаУдаление(МассивУдаления, ПометкаУдаления)
	
	Для Каждого Документ Из МассивУдаления Цикл 
		ЗаблокироватьДанныеДляРедактирования(Документ);
		ОбъектДокумент = Документ.ПолучитьОбъект();
		ОбъектДокумент.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Документ);
	КонецЦикла;
	
	ЗаполнитьДеревоСопроводительныхДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоСопроводительныхДокументов() 
	
	КоличествоПодчиненныхДокументов = 0;
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		
		Дерево = РеквизитФормыВЗначение("СопроводительныеДокументы");
		Дерево.Строки.Очистить();
		
		СтрокаКорень = Дерево.Строки.Добавить();
		СтрокаКорень.Документ = Объект.Ссылка;
		СтрокаКорень.Представление = Объект.Наименование;
		СтрокаКорень.ПометкаУдаления = Объект.ПометкаУдаления;
		СтрокаКорень.ИндексКартинкиДокумента = -1;
		СтрокаКорень.ИндексКартинкиФайла = -1;
		СтрокаКорень.ТипДокумента = ТипДокумента;
		
		Родитель = Объект.Ссылка;
		ЗаполнитьСтрокиДереваСопроводительныхДокументов(Дерево, Родитель);
		
		ЗначениеВРеквизитФормы(Дерево, "СопроводительныеДокументы");
		
	КонецЕсли;
	
	Если КоличествоПодчиненныхДокументов = 0 Тогда 
		Элементы.СопроводительныеДокументы.Видимость = Ложь;
		Элементы.СопроводительныеДокументыКоманды.Видимость = Ложь;
		Элементы.ГруппаНетДокументов.Видимость = Истина;
	Иначе 
		Элементы.СопроводительныеДокументы.Видимость = Истина;
		Элементы.СопроводительныеДокументыКоманды.Видимость = Истина;
		Элементы.ГруппаНетДокументов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиДереваСопроводительныхДокументов(Дерево, Родитель) 
	
	Если Не ЗначениеЗаполнено(Родитель) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорныеДокументы.Ссылка КАК Ссылка,
		|	ДоговорныеДокументы.Наименование,
		|	ДоговорныеДокументы.Родитель КАК РодительскийДокумент,
		|	ДоговорныеДокументы.ПометкаУдаления КАК ПометкаУдаления,
		|	ДоговорныеДокументы.Закрыт КАК Закрыт,
		|	ВЫБОР
		|		КОГДА ДоговорныеДокументы.Закрыт
		|			ТОГДА 78
		|		КОГДА ДоговорныеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ДоговорныеДокументы.ДатаОкончанияДействия < &ТекущаяДата
		|			ТОГДА 79
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Справочник.ДоговорныеДокументы.Этапы КАК Этапы
		|				ГДЕ
		|					Этапы.Ссылка = ДоговорныеДокументы.Ссылка
		|					И НЕ Этапы.Пройден
		|					И Этапы.Срок <> ДАТАВРЕМЯ(1, 1, 1)
		|					И Этапы.Срок < &ТекущаяДата
		|	
		|				ОБЪЕДИНИТЬ ВСЕ
		|	
		|				ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ЖурналПередачи КАК ЖурналПередачи
		|				ГДЕ
		|					ЖурналПередачи.Документ = ДоговорныеДокументы.Ссылка
		|					И НЕ ЖурналПередачи.Возвращен
		|					И ЖурналПередачи.СрокВозврата <> ДАТАВРЕМЯ(1, 1, 1)
		|					И ЖурналПередачи.СрокВозврата < &ТекущаяДата)
		|			ТОГДА 79
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Справочник.ДоговорныеДокументы.Согласующие КАК Согласующие
		|				ГДЕ
		|					Согласующие.Ссылка = ДоговорныеДокументы.Ссылка
		|					И Согласующие.РезультатСогласования <> ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано)
		|	
		|				ОБЪЕДИНИТЬ ВСЕ
		|	
		|				ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					Справочник.ДоговорныеДокументы.Этапы КАК Этапы
		|				ГДЕ
		|					Этапы.Ссылка = ДоговорныеДокументы.Ссылка
		|					И НЕ Этапы.Пройден
		|					И (Этапы.Срок = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ Этапы.Срок >= &ТекущаяДата)
		|	
		|				ОБЪЕДИНИТЬ ВСЕ
		|	
		|				ВЫБРАТЬ
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ЖурналПередачи КАК ЖурналПередачи
		|				ГДЕ
		|					ЖурналПередачи.Документ = ДоговорныеДокументы.Ссылка
		|					И НЕ ЖурналПередачи.Возвращен)
		|			ТОГДА 80
		|		ИНАЧЕ 81
		|	КОНЕЦ КАК ИндексКартинкиДокумента,
		|	ДоговорныеДокументы.ВидДокумента.Тип КАК ТипДокумента,
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ПолноеНаименование КАК ПолноеНаименованиеФайла,
		|	Файлы.ИндексКартинки КАК ИндексКартинкиФайла,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер,
		|	Файлы.ТекущаяВерсияДатаМодификацииФайла КАК ДатаМодификацииУниверсальнаяВБазе,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.ВладелецФайла = ДоговорныеДокументы.Ссылка)
		|			И (НЕ Файлы.ПометкаУдаления)
		|ГДЕ
		|	ДоговорныеДокументы.Родитель = &Родитель
		|	И НЕ ДоговорныеДокументы.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорныеДокументы.ДатаСортировки
		|ИТОГИ ПО
		|	Ссылка";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ВыборкаДокумент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокумент.Следующий() Цикл
		СтрокаРодитель = Дерево.Строки.Найти(ВыборкаДокумент.РодительскийДокумент, "Документ", Истина);
		
		Если СтрокаРодитель <> Неопределено Тогда 
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Документ = ВыборкаДокумент.Ссылка;
			НоваяСтрока.Представление = ВыборкаДокумент.Наименование;
			НоваяСтрока.РодительскийДокумент = ВыборкаДокумент.РодительскийДокумент;
			НоваяСтрока.ПометкаУдаления = ВыборкаДокумент.ПометкаУдаления;
			НоваяСтрока.ИндексКартинкиДокумента = ВыборкаДокумент.ИндексКартинкиДокумента;
			НоваяСтрока.ИндексКартинкиФайла = -1;
			НоваяСтрока.Закрыт = ВыборкаДокумент.Закрыт;
			НоваяСтрока.ТипДокумента = ВыборкаДокумент.ТипДокумента;
			
			ВыборкаФайл = ВыборкаДокумент.Выбрать();
			Пока ВыборкаФайл.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаФайл.Файл) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаФайл = НоваяСтрока.Строки.Добавить();
				СтрокаФайл.Файл = ВыборкаФайл.Файл;
				СтрокаФайл.ИндексКартинкиФайла = ВыборкаФайл.ИндексКартинкиФайла;
				СтрокаФайл.ИндексКартинкиДокумента = -1;
				СтрокаФайл.Представление = ВыборкаФайл.ПолноеНаименованиеФайла;
				СтрокаФайл.Документ = ВыборкаДокумент.Ссылка;
				СтрокаФайл.ТипДокумента = ВыборкаДокумент.ТипДокумента;
				СтрокаФайл.РодительскийДокумент = ВыборкаДокумент.РодительскийДокумент;
				
				СтрокаФайл.Размер = ВыборкаФайл.Размер;
				СтрокаФайл.ДатаМодификацииУниверсальнаяВБазе = ВыборкаФайл.ДатаМодификацииУниверсальнаяВБазе;
				СтрокаФайл.РедактируетТекущийПользователь = ВыборкаФайл.РедактируетТекущийПользователь;
				
				Если СтрокаФайл.РедактируетТекущийПользователь = Истина 
						И ЗначениеЗаполнено(СтрокаФайл.Файл) Тогда
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(СтрокаФайл.Файл);
					СтрокаФайл.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
					СтрокаФайл.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
				КонецЕсли;	
			КонецЦикла;
			
			ЗаполнитьСтрокиДереваСопроводительныхДокументов(Дерево, НоваяСтрока.Документ);
		КонецЕсли;
		
		КоличествоПодчиненныхДокументов = КоличествоПодчиненныхДокументов + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗаголовокГруппыСогласование()
	
	КоличествоСогласующих = Объект.Согласующие.Количество();
	
	КоличествоИсполненных = 0;
	Для Каждого Строка Из Объект.Согласующие Цикл
		Если ЗначениеЗаполнено(Строка.РезультатСогласования) Тогда 
			КоличествоИсполненных = КоличествоИсполненных + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если КоличествоСогласующих > 0 И КоличествоИсполненных > 0 Тогда
		ЗаголовокГруппыСогласование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Согласование (%1/%2)'"),
			КоличествоИсполненных, КоличествоСогласующих);
	ИначеЕсли КоличествоСогласующих > 0 Тогда 
		ЗаголовокГруппыСогласование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Согласование (%1)'"), КоличествоСогласующих);
	Иначе		
		ЗаголовокГруппыСогласование = НСтр("ru = 'Согласование'");
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВывестиЗаголовокГруппыЭтапов()
	
	КоличествоЭтапов = Объект.Этапы.Количество();
	
	КоличествоПройденныхЭтапов = 0;
	Для Каждого Строка Из Объект.Этапы Цикл
		Если Строка.Пройден Тогда 
			КоличествоПройденныхЭтапов = КоличествоПройденныхЭтапов + 1;
		КонецЕсли;
	КонецЦикла;	
	
	Если КоличествоЭтапов > 0 И КоличествоПройденныхЭтапов > 0 Тогда
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1/%2)'"),
			КоличествоПройденныхЭтапов, КоличествоЭтапов);
	ИначеЕсли  КоличествоЭтапов > 0 Тогда 
		ЗаголовокГруппыЭтапов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Этапы (%1)'"), КоличествоЭтапов);
	Иначе		
		ЗаголовокГруппыЭтапов = НСтр("ru = 'Этапы'");
	КонецЕсли;
	
	МинДата = '30000101';
	СледующийЭтап = "";
	ДатаСледующегоЭтапа = '00010101';
	
	Для Каждого Строка Из Объект.Этапы Цикл
		Если ЗначениеЗаполнено(Строка.Срок) И Не Строка.Пройден Тогда 
			Если Строка.Срок < МинДата Тогда 
				СледующийЭтап = Строка.Этап;
				ДатаСледующегоЭтапа = Строка.Срок;
				МинДата = Строка.Срок;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НадписьЭтапы = "";
	Если ЗначениеЗаполнено(СледующийЭтап) Тогда 
		КоличествоДней = (НачалоДня(ТекущаяДата()) - НачалоДня(ДатаСледующегоЭтапа)) / (24*3600);
		
		Если КоличествоДней = 0 Тогда 
			НадписьЭтапы = СтрШаблон(НСтр("ru = 'Следующий этап """"%1"""" (сегодня)'"),
				СледующийЭтап);
			Элементы.ГруппаНадписьЭтапы.ТекущаяСтраница = Элементы.СтраницаЭтапыОсталось;
		
		ИначеЕсли КоличествоДней > 0 Тогда 
			НадписьЭтапы = СтрШаблон(НСтр("ru = 'Следующий этап ""%1"" (просрочено %2 %3)'"),
				СледующийЭтап,
				КоличествоДней,
				ПолучитьПодписьДней(КоличествоДней));
			Элементы.ГруппаНадписьЭтапы.ТекущаяСтраница = Элементы.СтраницаЭтапыПросрочено;
		
		ИначеЕсли КоличествоДней < 0 Тогда 
			НадписьЭтапы = СтрШаблон(НСтр("ru = 'Следующий этап ""%1"" (осталось %2 %3)'"),
				СледующийЭтап,
				-КоличествоДней,
				ПолучитьПодписьДней(-КоличествоДней));
			Элементы.ГруппаНадписьЭтапы.ТекущаяСтраница = Элементы.СтраницаЭтапыОсталось;
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПодписьДней(ЧислоДней)
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДекорации()
	
	Элементы.ДекорацияПросрочка3.Видимость = Ложь;
	Элементы.ДекорацияПросрочка4.Видимость = Ложь;
	Элементы.ДекорацияПросрочка5.Видимость = Ложь;
		
	ЕстьПроблемы = Ложь;
	
	Если Не Объект.Закрыт Тогда 
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)
			И Объект.ДатаОкончанияДействия < НачалоДня(ТекущаяДата()) Тогда 
			ДнейПросрочки = (НачалоДня(ТекущаяДата()) - НачалоДня(Объект.ДатаОкончанияДействия)) / (24*3600);
			Элементы.ДекорацияПросрочка.Заголовок = СтрШаблон(
				НСтр("ru = 'Срок действия документа истек %1 %2 назад!'"),
				Строка(ДнейПросрочки), ПолучитьПодписьДней(ДнейПросрочки));
			Элементы.ДекорацияПросрочка.Видимость = Истина;
			ЕстьПроблемы = Истина;
		Иначе 
			Элементы.ДекорацияПросрочка.Видимость = Ложь;
		КонецЕсли;
		
		ПросроченныйЭтап = ""; КоличествоПросроченных = 0;
		Для Каждого Строка Из Объект.Этапы Цикл
			Если ЗначениеЗаполнено(Строка.Срок) И Не Строка.Пройден 
				И КонецДня(Строка.Срок) < КонецДня(ТекущаяДата()) Тогда 
				ДнейПросрочки = (КонецДня(ТекущаяДата()) - КонецДня(Строка.Срок)) / (24*3600);
				ПросроченныйЭтап = Строка.Этап;
				КоличествоПросроченных = КоличествоПросроченных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПросроченных = 1 Тогда 
			Элементы.ДекорацияПросрочка2.Заголовок = СтрШаблон(
				НСтр("ru = 'Этап ""%1"" просрочен на %2 %3!'"),
				ПросроченныйЭтап, Строка(ДнейПросрочки), ПолучитьПодписьДней(ДнейПросрочки));
		ИначеЕсли КоличествоПросроченных > 1 Тогда 
			Элементы.ДекорацияПросрочка2.Заголовок = СтрШаблон(
				НСтр("ru = 'Этапы (%1) просрочены!'"),
				Строка(КоличествоПросроченных));
		КонецЕсли;
		
		Элементы.ДекорацияПросрочка2.Видимость = КоличествоПросроченных > 0;
		ЕстьПроблемы = ЕстьПроблемы Или КоличествоПросроченных > 0;
		
	Иначе 
		Элементы.ДекорацияПросрочка2.Видимость = Ложь;
		Элементы.ДекорацияПросрочка.Видимость = Ложь;
		ЕстьПроблемы = Истина;
	КонецЕсли;
	
	Если Не (ЕстьПроблемы Или Элементы.ДекорацияПросрочка1.Видимость) Тогда 
		Строки = Объект.Согласующие.НайтиСтроки(Новый Структура("РезультатСогласования",
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.ПустаяСсылка")));
		Если Строки.Количество() > 0 Тогда 
			Элементы.ДекорацияПросрочка3.Видимость = Истина;
		КонецЕсли;
		
		Строки = Объект.Этапы.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Если Строки.Количество() > 0 Тогда 
			Элементы.ДекорацияПросрочка5.Видимость = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПередачи) Тогда 
			Элементы.ДекорацияПросрочка4.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеСуммы()
	
	Если Объект.Товары.Количество() > 0 И Объект.СуммаДокумента <> Объект.Товары.Итог("Сумма") Тогда 
		Элементы.Сумма1.Видимость = Истина;
		Элементы.Сумма.Видимость = Ложь;
	Иначе 
		Элементы.Сумма1.Видимость = Ложь;
		Элементы.Сумма.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для Каждого Элемент Из ДеревоЭлементы Цикл
		ПодчиненныеУзлы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() > 0 Тогда
			ОбойтиДерево(ПодчиненныеУзлы, Контекст, ИмяПроцедуры);
		КонецЕсли;
		
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДокументВДеревеСуществует(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекДанные.Документ = Контекст.Документ Тогда
		Контекст.Идентификатор = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОбновитьФайлВДереве(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекДанные.Файл = Контекст.Файл Тогда
		СтруктураДанных = ДоговорныеДокументы.ПолучитьДанныеФайлаДляСписка(ТекДанные.Файл);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураДанных);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция МассивЗахваченныхФайловВДереве(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = Контекст.Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекДанные.Файл) И ТекДанные.РедактируетТекущийПользователь Тогда
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге, РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ТекДанные);
		
		ДанныеФайла.Ссылка = ТекДанные.Файл;
		
		Контекст.МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	ДоговорныеДокументы.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап()
	
	Элементы.Этапы.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОтличияВТаблицах(Таблица1, Таблица2, ПоляДляСравнения)
	
	КоличествоЗаписей = Таблица1.Количество();
	ЕстьОтличия = КоличествоЗаписей <> Таблица2.Количество();
	
	Если Не ЕстьОтличия Тогда
		
		ПоляДляСравнения = СтрРазделить(ПоляДляСравнения, ",");
		Для Сч = 0 По КоличествоЗаписей - 1 Цикл
			Для Каждого Эл Из ПоляДляСравнения Цикл
				ИмяПоля = СокрЛП(Эл);
				Если ТипЗнч(Таблица1[Сч][ИмяПоля]) = Тип("Массив") И ТипЗнч(Таблица2[Сч][ИмяПоля]) = Тип("Массив") Тогда 
					КолЭлементовМассива = Таблица1[Сч][ИмяПоля].Количество();
					Если КолЭлементовМассива <> Таблица2[Сч][ИмяПоля].Количество() Тогда 
						Возврат Истина;
					Иначе 
						Для Ит = 0 По КолЭлементовМассива - 1 Цикл 
							Если Таблица1[Сч][ИмяПоля][Ит].Значение <> Таблица2[Сч][ИмяПоля][Ит].Значение Тогда
								Возврат Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				ИначеЕсли Таблица1[Сч][ИмяПоля] <> Таблица2[Сч][ИмяПоля] Тогда
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОтличия;
 	
КонецФункции

&НаСервере
Функция ИзменитьРодителя(ДоговорнойДокумент, ДокументРодитель, ТипДокументаРодителя, ТекстОшибки)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорнойДокумент,
		"ВидДокумента.Тип");
		
	Если РеквизитыДокумента.ВидДокументаТип = Перечисления.ТипыДоговорныхДокументов.ДопСоглашение Тогда 
		
		Если ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.Договор Тогда 
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ типа ""%1"" не может быть подчинен документу типа ""%2"".'"), 
				Строка(РеквизитыДокумента.ВидДокументаТип), Строка(ТипДокументаРодителя));
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли РеквизитыДокумента.ВидДокументаТип = Перечисления.ТипыДоговорныхДокументов.Акт 
		Или РеквизитыДокумента.ВидДокументаТип = Перечисления.ТипыДоговорныхДокументов.Накладная Тогда
		
		Если ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.Договор 
			И ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.ДопСоглашение Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ типа ""%1"" не может быть подчинен документу типа ""%2"".'"), 
				Строка(РеквизитыДокумента.ВидДокументаТип), Строка(ТипДокументаРодителя));
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли РеквизитыДокумента.ВидДокументаТип = Перечисления.ТипыДоговорныхДокументов.Счет Тогда
		
		Если ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.Договор
			И ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.ДопСоглашение
			И ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.Акт 
			И ТипДокументаРодителя <> Перечисления.ТипыДоговорныхДокументов.Накладная Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ типа ""%1"" не может быть подчинен документу типа ""%2"".'"), 
				Строка(РеквизитыДокумента.ВидДокументаТип), Строка(ТипДокументаРодителя));
			Возврат Ложь;
		КонецЕсли;
		
	Иначе 
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Документ типа ""%1"" не может быть подчинен другому документу.'"), 
			Строка(РеквизитыДокумента.ВидДокументаТип));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДоговорнойДокумент);
		ДоговорнойДокументОбъект = ДоговорнойДокумент.ПолучитьОбъект();
		ДоговорнойДокументОбъект.Родитель = ДокументРодитель;
		ДоговорнойДокументОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ДоговорнойДокумент);
		
		ЗаполнитьДеревоСопроводительныхДокументов();
	Исключение
		ТекстОшибки = ИнформацияОбОшибке();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОтобразитьИнформациюОПередаче()
	
	Элементы.ТекстПередачи.Видимость = Ложь;
	Элементы.ТекстПередачи1.Видимость = Ложь;
	Элементы.ДекорацияПросрочка1.Видимость = Ложь;
	Элементы.ДекорацияПросрочка4.Видимость = Ложь;
	
	ТекстПередачи = "";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачи.Пользователь,
		|	ЖурналПередачи.СрокВозврата,
		|	ЖурналПередачи.Возвращен
		|ИЗ
		|	РегистрСведений.ЖурналПередачи КАК ЖурналПередачи
		|ГДЕ
		|	ЖурналПередачи.Документ = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналПередачи.Период УБЫВ";
		
	Запрос.Параметры.Вставить("Документ", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда 
		Элементы.ФормаИсторияПередачи.Видимость = Ложь;
	Иначе 
		Элементы.ФормаИсторияПередачи.Видимость = Истина;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Возвращен Тогда 
			Продолжить;
		КонецЕсли;
		
		ОригиналПередан = Строка(Выборка.Пользователь);
		
		Если ЗначениеЗаполнено(Выборка.СрокВозврата) Тогда 
			Если КонецДня(Выборка.СрокВозврата) < КонецДня(ТекущаяДатаСеанса()) Тогда 
				ТекстПередачи = СтрШаблон(НСтр("ru = 'Находится у контрагента до %1'"), 
					Формат(Выборка.СрокВозврата, "ДЛФ=D"));
				Элементы.ТекстПередачи1.Видимость = Истина;
				
				Если Не Объект.Закрыт Тогда 
					Элементы.ДекорацияПросрочка1.Видимость = Истина;
				КонецЕсли;
			Иначе 
				ТекстПередачи = СтрШаблон(НСтр("ru = 'Находится у контрагента до %1'"), 
					Формат(Выборка.СрокВозврата, "ДЛФ=D"));
				Элементы.ТекстПередачи.Видимость = Истина;
				
				Если Не Объект.Закрыт Тогда 
					Элементы.ДекорацияПросрочка1.Видимость = Ложь;
					Элементы.ДекорацияПросрочка4.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			ТекстПередачи = НСтр("ru = 'Находится у контрагента'");
			Элементы.ТекстПередачи.Видимость = Истина;
			Элементы.ДекорацияПросрочка4.Видимость = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстПередачи) Тогда 
		Элементы.ФормаВозвратить.Видимость = Истина;
		Элементы.ФормаПередать.Видимость = Ложь;
	Иначе 
		Элементы.ФормаВозвратить.Видимость = Ложь;
		Элементы.ФормаПередать.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Функция ТребуетсяАвтозаполнение()
	
	Если Не НовыйДокумент И ЗаполняемыеФайлы.Количество() > 0 Тогда
		
		Возврат ТребуетсяАвтозаполнениеПроверкаНаСервере();
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ТребуетсяАвтозаполнениеПроверкаНаСервере()
	
	Для Каждого Файл Из Файлы Цикл 
		Если Файл.СозданИзШаблона Тогда 
			Для Каждого ЗаполненныйФайл Из ЗаполняемыеФайлы Цикл 
				
				Если ЗаполненныйФайл.Значение.Файл = Файл.Ссылка Тогда 
					НастройкиАвтозаполнения = 
						АвтозаполнениеШаблоновФайловСервер.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
							Файл.Ссылка, 
							Объект.Ссылка);
							
					Если ЕстьОтличияВТаблицах(
						НастройкиАвтозаполнения.МассивЗамен,
						ЗаполненныйФайл.Значение.МассивЗамен,
						"ТермДляЗамены, ЗначениеЗамены") Тогда 
						
						Возврат Истина; 
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаполняемыеФайлыПередЗакрытием()
	
	ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
	
	Для Каждого Файл Из Файлы Цикл 
		Если Файл.СозданИзШаблона Тогда 
			Для Каждого ЗаполненныйФайл Из ЗаполняемыеФайлы Цикл 
				Если ЗаполненныйФайл.Значение.Файл = Файл.Ссылка Тогда 
					НастройкиАвтозаполнения = 
						АвтозаполнениеШаблоновФайловСервер.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
							Файл.Ссылка, 
							Объект.Ссылка);
							
					Если ЕстьОтличияВТаблицах(
						НастройкиАвтозаполнения.МассивЗамен,
						ЗаполненныйФайл.Значение.МассивЗамен,
						"ТермДляЗамены, ЗначениеЗамены") Тогда 
						
						Если Файл.Расширение = "doc"
							И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
							И Не ЭтоВебКлиент Тогда
							НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
							НоваяСтрока.Файл = Файл.Ссылка;
							НоваяСтрока.Автозаполнение = Истина;
							НастройкиАвтозаполнения.Вставить("ТекущаяВерсия", 
								ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл.Ссылка, "ТекущаяВерсия"));
							
							НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
						Иначе
							НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
							НоваяСтрока.Файл = Файл.Ссылка;
						КонецЕсли;
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеФайловНаСервере(МассивФайлов, ОбновитьСписок = Ложь)
	
	Для Каждого Файл Из МассивФайлов Цикл 
		КлючеваяОперация = "ЗаполнениеФайловDocxДаннымиДокумента";
		ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(КлючеваяОперация);
		
		РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Ложь, Файл, Истина);
	КонецЦикла;
	
	Если ОбновитьСписок Тогда 
		ЗаполняемыеФайлы.Очистить();
		Для Каждого ФайлСтрока Из Файлы Цикл 
			Если ФайлСтрока.СозданИзШаблона Тогда 
				НастройкиАвтозаполнения = 
					АвтозаполнениеШаблоновФайловСервер.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
						ФайлСтрока.Ссылка, 
						Объект.Ссылка);
				Если НастройкиАвтозаполнения.МассивЗамен.Количество() > 0 Тогда 
					НастройкиАвтозаполнения.Вставить("Файл", ФайлСтрока.Ссылка);
					ЗаполняемыеФайлы.Добавить(НастройкиАвтозаполнения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяАвтозаполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполненныйФайл(Параметры) Экспорт 
	
	ВыборФайла(Параметры.Файл);
	ЗаполненныйФайлДляОткрытия = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивФайловДляОбновления)
	
	Для Каждого ЗаполненныйФайл Из МассивФайловДляОбновления Цикл
		АвтозаполнениеШаблоновФайловСервер.ОбновитьВерсиюИзДвоичныхДанных(ЗаполненныйФайл.ДвоичныеДанные,
			ЗаполненныйФайл.ТекущаяВерсия, "Автозаполнение шаблона");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиАвтозаполненийШаблона(Файл, Шаблон, Документ)  
	
	СтруктураВозврата = Новый Структура("ВыполнятьНаСервере, РасширениеШаблона,НастройкиЗамены, ДанныеФайла, ДвоичныеДанные, ТекущаяВерсия");
	НаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ПеремДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл.Ссылка);
	
	СтруктураВозврата.ВыполнятьНаСервере = НаСервере;
	СтруктураВозврата.РасширениеШаблона = НРег(Файл.ТекущаяВерсияРасширение);
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Файл;
	КонецЕсли;
		
	СтруктураВозврата.НастройкиЗамены = АвтозаполнениеШаблоновФайловСервер.ПолучитьМассивАвтозаполненийШаблона(Файл, Шаблон, Документ);
	СтруктураВозврата.ДанныеФайла = ПеремДанныеФайла;
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();
	ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование + "." + ТекущаяВерсия.Расширение;
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловСервер.ПолучитьДвоичныеДанныеФайла(Файл);
	
	СтруктураВозврата.ДвоичныеДанные = ДвоичныеДанныеФайла;
	СтруктураВозврата.ТекущаяВерсия = Файл.ТекущаяВерсия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивЗахваченныхФайлов()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Дерево", СопроводительныеДокументы);
	Контекст.Вставить("ФормаДерево", Элементы.СопроводительныеДокументы);
	Контекст.Вставить("МассивЗахваченныхФайлов", Новый Массив);
	ОбойтиДерево(СопроводительныеДокументы.ПолучитьЭлементы(), Контекст, "МассивЗахваченныхФайловВДереве");
	
	МассивЗахваченныхФайлов = Контекст.МассивЗахваченныхФайлов;
	
	ДоговорныеДокументыКлиент.ДобавитьЗанятыеФайлыСамойКарточки(ЭтаФорма, МассивЗахваченныхФайлов);
	
	Возврат МассивЗахваченныхФайлов;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьРеализация()
	
	МассивЗахваченныхФайлов = ПолучитьМассивЗахваченныхФайлов();
	
	СписокЗанятыеWordФайлы = ДоговорныеДокументыКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
			
		СтрокаФайлов = "";	
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для отправки по почте закройте файлы:  
				| 
				|%1.'"),
				СтрокаФайлов);
		Иначе	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для отправки по почте закройте файл:  
				| 
				|%1.'"),
				СтрокаФайлов);
			
		КонецЕсли;	
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordОтправка", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Возврат;
			
	КонецЕсли;	
	
	ДоговорныеДокументыКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Истина);
		
	ОтправитьПослеПомещенияФайлов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordОтправка(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ОтправитьРеализация();
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура ОтправитьПослеПомещенияФайлов()
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ссылка);
	
	Если Не ПараметрыОтправкиПочтовогоСообщенияПовтИсп.ЕстьДоступныеПрофилиПочты() Тогда
		// тут предлагаем настроить
		
		ПараметрыВыполнения = Новый Структура("ПараметрКоманды", ПараметрКоманды);
		Обработчик = Новый ОписаниеОповещения("ВыполнитьОтправкуПослеПроверки", 
			ЭтотОбъект, ПараметрыВыполнения);
			
		ДляОтправки = Истина;
		ЛегкаяПочтаКлиент.НастроитьПочтуИВыполнить(Обработчик, ПараметрКоманды, ДляОтправки);
		
		Возврат;
		
	КонецЕсли;	
	
	ВыполнитьОтправкуПослеПроверки(ПараметрКоманды, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОтправкуПослеПроверки(ПараметрКоманды, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Объекты", ПараметрКоманды);
	ОткрытьФорму(
		"Обработка.ПочтовоеСообщение.Форма.Форма",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	ДоговорныеДокументы.ЗаполнитьСписокФайловДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)
	
	ДоговорныеДокументы.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, 
		ЗначениеПометкиУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ВыборФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДоговорныеДокументыКлиент.ОбновитьСтрокуФайла(Файлы, Файл);
	
КонецПроцедуры	

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКоманды(Команда, Видимость)
	
	Команда.Видимость = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или ТолькоПросмотр Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		РазрешеноРедактирование = Истина;
		РазрешеноУдаление = Истина;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], РазрешеноРедактирование);
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(Расширение, ИспользоватьImageMagickДляРаспознаванияPDF);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСканирования()
	
	ДоступнаКомандаСканировать = Истина;
	#Если ВебКлиент Тогда
		ДоступнаКомандаСканировать = Ложь;
	#КонецЕсли	
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		ОбщегоНазначенияКлиент.ЭтоWindowsКлиент()
	КонецЕсли;	
	
	УстановитьВидимостьКоманды(Элементы.Сканировать, ДоступнаКомандаСканировать);
	УстановитьВидимостьКоманды(Элементы.КонтекстноеМенюСканировать, ДоступнаКомандаСканировать);
	
КонецПроцедуры

#КонецОбласти
