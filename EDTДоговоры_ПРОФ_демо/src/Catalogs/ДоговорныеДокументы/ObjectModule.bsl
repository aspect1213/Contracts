#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		ДатаСоздания = ТекущаяДатаСеанса();
		Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ДатаСоздания = ТекущаяДатаСеанса();
	Закрыт = Ложь;
	
	Для Каждого Строка Из Согласующие Цикл
		Строка.РезультатСогласования = Неопределено;
		Строка.ДатаСогласования = '00010101';
	КонецЦикла;
	
	Для Каждого Строка Из Этапы Цикл
		Строка.Пройден = Ложь;
		Строка.ДатаПрохождения = '00010101';
	КонецЦикла;
	
	ДатаДокумента = ТекущаяДатаСеанса();
	НомерДокумента = "";
	
	СпособНумерации = ВидДокумента.СпособНумерации;
	Если СпособНумерации = Перечисления.СпособыНумерации.Автоматически Тогда 
		Нумерация.СформироватьЧисловойНомерДокумента(ЭтотОбъект, ЧисловойНомер);
			
		ОписанияОшибок = Новый СписокЗначений;
		Нумерация.СформироватьСтроковыйНомерДокумента(ЭтотОбъект, НомерДокумента, ОписанияОшибок);
		
		Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ОписаниеОшибки.Представление,,
				ОписаниеОшибки.Значение,
				"Объект");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда 
		Если КоличествоСеансовИнформационнойБазы() > 1 Тогда 
			ВызватьИсключение НСтр("ru = 'Базовая версия не поддерживает одновременную работу нескольких пользователей.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"Согласующие, ПометкаУдаления");
		ПредыдущиеЗначенияРеквизитов.Согласующие = ПредыдущиеЗначенияРеквизитов.Согласующие.Выгрузить();
	Иначе
		ПредыдущиеЗначенияРеквизитов = Новый Структура;
		ПредыдущиеЗначенияРеквизитов.Вставить("Согласующие", Новый ТаблицаЗначений);
		ПредыдущиеЗначенияРеквизитов.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Наименование = Строка(ВидДокумента) + " " + НСтр("ru = 'с'") + " " + Строка(Контрагент);
	Если ЗначениеЗаполнено(НомерДокумента) Тогда 
		Наименование = Наименование + " " +
			СтрШаблон(НСтр("ru = '№ %1 от %2'"), 
				НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D"));
	КонецЕсли;
	
	НомерИДатаДокумента = "";
	Если ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(ДатаДокумента) Тогда 
		НомерИДатаДокумента = СтрШаблон(НСтр("ru = '%1 от %2'"), 
			НомерДокумента, Формат(ДатаДокумента, "ДЛФ=D"));
	КонецЕсли;	
	
	СрокДействия = "";
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда 
		СрокДействия = Формат(ДатаНачалаДействия, "ДЛФ=D") + " - " + Формат(ДатаОкончанияДействия, "ДЛФ=D");
	ИначеЕсли ЗначениеЗаполнено(ДатаНачалаДействия) Тогда 
		СрокДействия = Формат(ДатаНачалаДействия, "ДЛФ=D") + ", бессрочно";
	КонецЕсли;
	
	ДатаСортировки = ДатаСоздания;
	Если ЗначениеЗаполнено(ДатаДокумента) Тогда 
		ДатаСортировки = ДатаДокумента;
	КонецЕсли;
	
	Если ПометкаУдаления И ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда
		ДополнительныеСвойства.Вставить("УстановленаПометкаУдаления");
	КонецЕсли;
	
	ОбработатьИзменениеСогласующих(ПредыдущиеЗначенияРеквизитов);
	
	ТипДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "Тип");
	
	Если ЗначениеЗаполнено(Родитель) И ТипДокумента <> Перечисления.ТипыДоговорныхДокументов.Договор Тогда 
		РодительДоКорня = Родитель;
		Пока ЗначениеЗаполнено(РодительДоКорня) Цикл 
			Договор = РодительДоКорня;
			РодительДоКорня = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РодительДоКорня, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если СуммаДокумента > 0 Тогда 
		ФормСтрока = "Л = ru_RU";
		ПарПредмета = "рубль,рубля,рублей,м,копейка,копейки,копеек,м,2";
		СуммаПрописью = ЧислоПрописью(СуммаДокумента, ФормСтрока, ПарПредмета);
	КонецЕсли;
	
	Если СуммаНДСДокумента > 0 Тогда 
		ФормСтрока = "Л = ru_RU";
		ПарПредмета = "рубль,рубля,рублей,м,копейка,копейки,копеек,м,2";
		СуммаНДСПрописью = ЧислоПрописью(СуммаНДСДокумента, ФормСтрока, ПарПредмета);
	КонецЕсли;
	
	// Пометка на удаление приложенных файлов.
	Если ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда 
		
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НовыеСогласующие") Тогда
		Для Каждого НовыйСогласующий Из ДополнительныеСвойства.НовыеСогласующие Цикл
			РаботаССообщениями.ДобавитьСообщениеОНазначенииСогласующим(НовыйСогласующий, Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЗаконченоСогласование") Тогда
		РаботаССообщениями.ДобавитьСообщениеОбОкончанииСогласования(Ответственный, Ссылка);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("УстановленаПометкаУдаления") Тогда
		Справочники.Сообщения.ПометитьНаУдалениеПоПредмету(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ЧисловойНомер > 0 Тогда
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ЭтотОбъект);
		Нумерация.ОсвободитьНомер(СтруктураПараметров);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(НомерДокумента) И ЗначениеЗаполнено(ДатаДокумента) Тогда 
		Если Не ДоговорныеДокументы.НомерДокументаУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Номер документа не уникален!'"),
				ЭтотОбъект,
				"НомерДокумента",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает изменение согласующих.
//
Процедура ОбработатьИзменениеСогласующих(ПредыдущиеЗначенияРеквизитов)
	
	Если Согласующие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Новые согласующие
	Если ЭтоНовый() Тогда
		СтарыеСогласующие = Новый ТаблицаЗначений;
		СтарыеСогласующие.Колонки.Добавить("Исполнитель");
		СтарыеСогласующие.Колонки.Добавить("РезультатСогласования");
		СтарыеСогласующие.Колонки.Добавить("ДатаСогласования");
	Иначе
		РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Согласующие");
		СтарыеСогласующие = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	НовыеСогласующие = Новый Массив;
	ЗаконченоСогласование = Истина;
	Для Каждого СтрокаСогласования Из Согласующие Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСогласования.РезультатСогласования) Тогда
			ЗаконченоСогласование = Ложь;
		КонецЕсли;
		
		НайденнаяСтрока = СтарыеСогласующие.Найти(СтрокаСогласования.Исполнитель, "Исполнитель");
		Если НайденнаяСтрока = Неопределено Тогда
			НовыеСогласующие.Добавить(СтрокаСогласования.Исполнитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыеСогласующие.Количество() <> 0 Тогда
		ДополнительныеСвойства.Вставить("НовыеСогласующие", НовыеСогласующие);
	КонецЕсли;
	
	Если Не ЗаконченоСогласование Тогда
		Возврат;
	КонецЕсли;
	
	// Закончено согласование
	РанееЗаконченоСогласование = Истина;
	Для Каждого СтрокаСогласования Из СтарыеСогласующие Цикл
		Если Не ЗначениеЗаполнено(СтрокаСогласования.РезультатСогласования) Тогда
			РанееЗаконченоСогласование = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не РанееЗаконченоСогласование Тогда
		ДополнительныеСвойства.Вставить("ЗаконченоСогласование");
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоСеансовИнформационнойБазы(УчитыватьКонсоль = Истина, УчитыватьФоновыеЗадания = Истина) Экспорт
	
	Результат = 0;
	
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансИБ Из СеансыИБ Цикл
		Если СеансИБ.ИмяПриложения = "SrvrConsole"
		 Или СеансИБ.ИмяПриложения = "BackgroundJob" 
		 Или СеансИБ.ИмяПриложения = "Designer" Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
