////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с сообщениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает имя учетной записи для рассылки сообщений.
//
// Возвращаемое значение:
//  Строка - Имя учетной записи для рассылки сообщений.
//
Функция ИмяУчетнойЗаписиДляРассылкиСообщений() Экспорт
	
	Возврат НСтр("ru = '1С:Договоры'");
	
КонецФункции

// Обработчик регламентного задания РассылкаСообщений.
// Выполняет рассылку сообщений по почте.
//
Процедура РассылкаСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаСообщений);
	
	Если Не ВозможноВыполнитьРассылкуСообщений() Тогда
		Возврат;
	КонецЕсли;
	
	Соединение = Неопределено;
	Для Каждого Сообщение Из СообщенияДляРассылки() Цикл
		ОтправитьСообщенияПоПочте(Сообщение, Соединение);
	КонецЦикла;
	
	ЗакрытьСоединениеСПочтовымСервером(Соединение);
	
КонецПроцедуры

// Выполняет запуск фонового задания рассылки сообщений.
//
Процедура ЗапуститьРассылкуСообщений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НастроенаРассылкаСообщений() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(
			Метаданные.РегламентныеЗадания.РассылкаСообщений);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при запуске рассылки сообщений: %1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет запуск фонового задания формирования сообщений.
//
Процедура ЗапуститьФормированиеСообщений() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТребуетсяФормированиеСообщений() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(
			Метаданные.РегламентныеЗадания.ФормированиеСообщений);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при запуске формирования сообщений: %1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, требуется ли регистрация схемы e1c.
//
Функция ТребуетсяРегистрацияСхемыE1c() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Если ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра) Тогда
		// Приложение является веб-клиентом.
		ОбновитьНавигационнуюСсылкуИнформационнойБазы();
		Возврат Ложь;
	КонецЕсли;
	
	Если СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистемнаяИнформация.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьНавигационнуюСсылкуИнформационнойБазы();
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	КаталогПрограммы = КаталогПрограммы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПользователиКлиенты.Ссылка
		|ИЗ
		|	Справочник.Пользователи.Клиенты КАК ПользователиКлиенты
		|ГДЕ
		|	ПользователиКлиенты.Ссылка = &Ссылка
		|	И ПользователиКлиенты.ИдентификаторКлиента = &ИдентификаторКлиента
		|	И ПользователиКлиенты.КаталогПрограммы ПОДОБНО &КаталогПрограммы";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийПользователь);
	Запрос.УстановитьПараметр("ИдентификаторКлиента", ИдентификаторКлиента);
	Запрос.УстановитьПараметр("КаталогПрограммы", КаталогПрограммы);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

// Обработчик регламентного задания ФормированиеСообщений.
// Выполняет формирование сообщений по различным событиям в программе.
//
Процедура ФормированиеСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеСообщений);
	
	Если Не ТребуетсяФормированиеСообщений() Тогда
		Возврат;
	КонецЕсли;
	Константы.ДатаФормированияСообщений.Установить(ТекущаяДатаСеанса());
	
	КонтрольСрокаДействияДокументов();
	КонтрольСрокаЭтаповДокументов();
	КонтрольВозвратаДокументов();
	КонтрольСогласованияДокументов();
	
	ПроверитьНаличиеОбновления();
	
КонецПроцедуры

// Добавляет сообщение о назначении согласующим.
//
// Параметры:
//  Кому - СправочникСсылка.Пользователи - Адресат сообщения.
//  Предмет - СправочникСсылка.* - Ссылка на предмет сообщения.
//
Процедура ДобавитьСообщениеОНазначенииСогласующим(Кому, Предмет) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	Текст = СтрШаблон(НСтр("ru = 'Согласовать %1 (%2).'"),
		Предмет,
		ПользователиКлиентСервер.ТекущийПользователь());
	ДобавитьСообщение(Кому, Текст, Предмет);
	
КонецПроцедуры

// Добавляет сообщение об окончании согласования.
//
// Параметры:
//  Кому - СправочникСсылка.Пользователи - Адресат сообщения.
//  Предмет - СправочникСсылка.* - Ссылка на предмет сообщения.
//
Процедура ДобавитьСообщениеОбОкончанииСогласования(Кому, Предмет) Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	Текст = СтрШаблон(НСтр("ru = 'Документ согласован: %1.'"), Предмет);
	ДобавитьСообщение(Кому, Текст, Предмет);
	
КонецПроцедуры

// Проверяет необходимость формирования сообщений.
//
// Возвращаемое значение:
//  Булево - Требуется выполнить формирование сообщений.
//
Функция ТребуетсяФормированиеСообщений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НачалоДня(ТекущаяДатаСеанса()) > Константы.ДатаФормированияСообщений.Получить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, возможно ли выполнить рассылку сообщений.
// Если системная учетная запись электронной почты заблокирована, рассылку сообщений выполнить невозможно.
//
// Параметры:
//  ИмяПараметра - Список типов - Текстовое описание параметра функции.
//   * ИмяСвойстваПараметра - Список типов - Текстовое описание свойства (колонки) параметра.
//
// Возвращаемое значение:
//  Тип - Текстовое описание содержания возвращаемого значения функции.
//
Функция ВозможноВыполнитьРассылкуСообщений()
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьДляРассылкиСообщений());
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не возможно выполнить рассылку сообщений.
				|Возможно рассылка сообщений уже выполняется, либо выполняется настройка рассылки сообщений:
				|%1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Производит отключение от почтового сервера, если соединение с почтовым сервером открыто.
//
// Параметры:
//  Соединение - ИнтернетПочта - Соединение с почтовым сервером.
//
Процедура ЗакрытьСоединениеСПочтовымСервером(Соединение)
	
	Если Соединение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Соединение.Отключиться();
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при закрытии соединения с почтовым сервером: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	Соединение = Неопределено;
	
КонецПроцедуры

// Проверяет, настроена ли рассылка сообщений.
//
// Возвращаемое значение:
//  Булево - Текстовое описание содержания возвращаемого значения функции.
//
Функция НастроенаРассылкаСообщений()
	
	УчетнаяЗаписьДляРассылкиСообщений = УчетнаяЗаписьДляРассылкиСообщений();
	Возврат ЗначениеЗаполнено(УчетнаяЗаписьДляРассылкиСообщений.АдресЭлектроннойПочты);
	
КонецФункции

// Выполняет обновление навигационной ссылки информационной базы пользователя.
//
Процедура ОбновитьНавигационнуюСсылкуИнформационнойБазы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаИБ = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если Не ЗначениеЗаполнено(СсылкаИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СсылкаИБПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийПользователь, "НавигационнаяСсылкаИнформационнойБазы");
	Если СсылкаИБ <> СсылкаИБПользователя Тогда
		ТекущийПользовательОбъект = ТекущийПользователь.ПолучитьОбъект();
		ТекущийПользовательОбъект.НавигационнаяСсылкаИнформационнойБазы = СсылкаИБ;
		ТекущийПользовательОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отправку сообщения по почте.
//
// Параметры:
//  Сообщение - СтрокаТаблицыЗначений - Сообщение для отправки по почте.
//   * Ссылка - СправочникСсылка.Сообщения - Ссылка на отправляемое сообщение.
//   * Дата - Дата - Дата отправки сообщения.
//   * Текст - Список типов - Текст сообщения.
//   * Автор - СправочникСсылка.Пользователи - От кого отправлено сообщение.
//   * Предмет - СправочникСсылка - Ссылка на предмет сообщения.
//   * ПредставлениеПредмета - Строка - Представление предмета сообщения.
//   * EMail - Список типов - Адрес, на который будет выполнена отправка сообщения.
//   * НавигационнаяСсылкаИнформационнойБазы - Строка - Навигационная ссылка на базу, для пользователя.
//   * ПредставлениеАвтора - Строка - Представление автора сообщения.
//  Соединение - ИнтернетПочта - существующее соединение с почтовым сервером для рассылки сообщений.
//                               Если не указано, то соединение устанавливается отдельно для каждого сообщения.
//
Процедура ОтправитьСообщенияПоПочте(Сообщение, Соединение)
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Сообщение.Ссылка);
		
		СообщениеОбъект = Сообщение.Ссылка.ПолучитьОбъект();
		Если Не РаботаССообщениямиКлиентСервер.ТребуетсяОтправитьСообщение(СообщениеОбъект) Тогда
			РазблокироватьДанныеДляРедактирования(Сообщение.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если Не НастроенаРассылкаСообщений() Или Не ЗначениеЗаполнено(Сообщение.EMail) Тогда
			СообщениеОбъект.ДатаОтправкиПоПочте = Дата(1,1,2);
			СообщениеОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Сообщение.Ссылка);
			Возврат;
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому", Сообщение.EMail);
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма(Сообщение));
		ПараметрыПисьма.Вставить("Тело", ТелоПисьма(Сообщение));
		ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
		ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если Соединение = Неопределено Тогда
			Соединение = СоединениеСПочтовымСервером();
		КонецЕсли;
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			УчетнаяЗаписьДляРассылкиСообщений(),
			ПараметрыПисьма,
			Соединение);
		
		СообщениеОбъект.ДатаОтправкиПоПочте = ТекущаяДатаСеанса();
		СообщениеОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Сообщение.Ссылка);
		
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при рассылке сообщений: %1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		ЗакрытьСоединениеСПочтовымСервером(Соединение);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации()
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Рассылка сообщений'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

// Возвращает соединение с почтовым сервером для рассылки сообщений.
//
// Возвращаемое значение:
//  ИнтернетПочта - Соединение с почтовым сервером для рассылки сообщений.
//
Функция СоединениеСПочтовымСервером()
	
	Если Не НастроенаРассылкаСообщений() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(
			УчетнаяЗаписьДляРассылкиСообщений());
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);
	Исключение
		ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при установке соединения с почтовым сервером: %1'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// Формирует таблицу сообщений для рассылки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица сообщений для рассылки.
//
Функция СообщенияДляРассылки()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сообщения.Ссылка КАК Ссылка,
		|	Сообщения.Дата КАК Дата,
		|	Сообщения.Текст КАК Текст,
		|	Сообщения.Автор КАК Автор,
		|	Сообщения.Предмет КАК Предмет,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сообщения.Предмет) КАК ПредставлениеПредмета,
		|	ПользователиКому.АдресЭлектроннойПочты КАК EMail,
		|	ПользователиКому.НавигационнаяСсылкаИнформационнойБазы КАК НавигационнаяСсылкаИнформационнойБазы,
		|	ПользователиАвтор.Представление КАК ПредставлениеАвтора
		|ИЗ
		|	Справочник.Сообщения КАК Сообщения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиКому
		|		ПО Сообщения.Кому = ПользователиКому.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиАвтор
		|		ПО Сообщения.Автор = ПользователиАвтор.Ссылка
		|ГДЕ
		|	Сообщения.ДатаОтправкиПоПочте = ДАТАВРЕМЯ(1, 1, 1)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует тело письма по сообщению.
//
// Параметры:
//  Сообщение - СтрокаТаблицыЗначений - Сообщение для отправки по почте.
//   * Ссылка - СправочникСсылка.Сообщения - Ссылка на отправляемое сообщение.
//   * Дата - Дата - Дата отправки сообщения.
//   * Текст - Список типов - Текст сообщения.
//   * Автор - СправочникСсылка.Пользователи - От кого отправлено сообщение.
//   * Предмет - СправочникСсылка - Ссылка на предмет сообщения.
//   * ПредставлениеПредмета - Строка - Представление предмета сообщения.
//   * EMail - Список типов - Адрес, на который будет выполнена отправка сообщения.
//   * НавигационнаяСсылкаИнформационнойБазы - Строка - Навигационная ссылка на базу, для пользователя.
//   * ПредставлениеАвтора - Строка - Представление автора сообщения.
//
// Возвращаемое значение:
//  Строка - Тело письма.
//
Функция ТелоПисьма(Сообщение)
	
	ТелоПисьма = Новый Массив;
	ТелоПисьма.Добавить("<html>
		|<body>");
	
	ТекстТелаПисьма = РаботаС_HTML.ЗаменитьСпецСимволыHTML(Сообщение.Текст);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстТелаПисьма);
	ТекстТелаПисьма = СтрЗаменить(ТекстТелаПисьма, Символы.ПС, "<br>");
	ТелоПисьма.Добавить(ТекстТелаПисьма);
	
	Если ЗначениеЗаполнено(Сообщение.НавигационнаяСсылкаИнформационнойБазы) И ЗначениеЗаполнено(Сообщение.Предмет) Тогда
		
		НавигационнаяСсылка = Новый Массив;
		НавигационнаяСсылка.Добавить(Сообщение.НавигационнаяСсылкаИнформационнойБазы);
		НавигационнаяСсылка.Добавить("#");
		НавигационнаяСсылка.Добавить(ПолучитьНавигационнуюСсылку(Сообщение.Предмет));
		НавигационнаяСсылка = СтрСоединить(НавигационнаяСсылка);
		
		ПолнаяНавигационнаяСсылка = СтрШаблон("<b>%2</b>: <a href=%1>%3</a>",
			КодироватьСтроку(НавигационнаяСсылка, СпособКодированияСтроки.URLВКодировкеURL),
			НСтр("ru = 'Ссылка'"),
			НавигационнаяСсылка);
		
		ТелоПисьма.Добавить("<br>");
		ТелоПисьма.Добавить("<br>");
		ТелоПисьма.Добавить(ПолнаяНавигационнаяСсылка);
		
	КонецЕсли;
	
	ТелоПисьма.Добавить("</body>
		|</html>");
		
	Возврат СтрСоединить(ТелоПисьма, Символы.ПС);
	
КонецФункции

// Формирует тему письма по сообщению.
//
// Параметры:
//  Сообщение - СтрокаТаблицыЗначений - Сообщение для отправки по почте.
//   * Ссылка - СправочникСсылка.Сообщения - Ссылка на отправляемое сообщение.
//   * Дата - Дата - Дата отправки сообщения.
//   * Текст - Список типов - Текст сообщения.
//   * Автор - СправочникСсылка.Пользователи - От кого отправлено сообщение.
//   * Предмет - СправочникСсылка - Ссылка на предмет сообщения.
//   * ПредставлениеПредмета - Строка - Представление предмета сообщения.
//   * EMail - Список типов - Адрес, на который будет выполнена отправка сообщения.
//   * НавигационнаяСсылкаИнформационнойБазы - Строка - Навигационная ссылка на базу, для пользователя.
//   * ПредставлениеАвтора - Строка - Представление автора сообщения.
//
// Возвращаемое значение:
//  Строка - Тема письма.
//
Функция ТемаПисьма(Сообщение)
	
	Тема = Сообщение.Текст;
	Тема = СокрЛ(Тема);
	Тема = СтрПолучитьСтроку(Тема, 1);
	Тема = СокрЛП(Тема);
	Если СтрЗаканчиваетсяНа(Тема, ".") Тогда
		Тема = Лев(Тема, СтрДлина(Тема) - 1);
		Тема = СокрП(Тема);
	КонецЕсли;
	
	Возврат Тема;
	
КонецФункции

// Возвращает учетную запись, используемую для рассылки сообщений.
//
Функция УчетнаяЗаписьДляРассылкиСообщений()
	
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
КонецФункции

// Формирует сообщения, связанные со сроком действия документов.
//
Процедура КонтрольСрокаДействияДокументов()
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	// Истекает срок действия документа.
	ПредупреждатьПо = ТекущаяДата + 86400 * 14; // 86400 - число секунд в дне.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорныеДокументы.Ссылка КАК Документ,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	ДоговорныеДокументы.ДатаОкончанияДействия КАК Срок
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|ГДЕ
		|	ДоговорныеДокументы.Закрыт = ЛОЖЬ
		|	И ДоговорныеДокументы.ДатаОкончанияДействия <= &ПредупреждатьПо
		|	И ДоговорныеДокументы.ДатаОкончанияДействия >= &ТекущаяДата
		|	И ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПредупреждатьПо", ПредупреждатьПо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтрШаблон(НСтр("ru = '%1 истекает срок действия %2.'"),
			ПредставлениеСрока(Выборка.Срок),
			Выборка.ПредставлениеДокумента);
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
	// Истек срок действия документа.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорныеДокументы.Ссылка КАК Документ,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|ГДЕ
		|	ДоговорныеДокументы.Закрыт = ЛОЖЬ
		|	И ДоговорныеДокументы.ДатаОкончанияДействия < &ТекущаяДата
		|	И ДоговорныеДокументы.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Текст = СтрШаблон(НСтр("ru = 'Истек срок действия %1.'"), Выборка.ПредставлениеДокумента);
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
	КонецЦикла;
	
КонецПроцедуры

// Формирует сообщения, связанные со сроком этапов документов.
//
Процедура КонтрольСрокаЭтаповДокументов()
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	// Истекает срок этапа документа.
	ПредупреждатьПо = ТекущаяДата + 86400 * 2; // 86400 - число секунд в дне.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорныеДокументы.Ссылка КАК Документ,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	ДоговорныеДокументыЭтапы.НомерСтроки КАК КоличествоЭтапов,
		|	ДоговорныеДокументыЭтапы.НомерСтроки КАК НомерСтроки,
		|	ДоговорныеДокументыЭтапы.Этап КАК Этап,
		|	ДоговорныеДокументыЭтапы.Срок КАК Срок
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорныеДокументы.Этапы КАК ДоговорныеДокументыЭтапы
		|		ПО ДоговорныеДокументы.Ссылка = ДоговорныеДокументыЭтапы.Ссылка
		|ГДЕ
		|	ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорныеДокументыЭтапы.Срок <= &ПредупреждатьПо
		|	И ДоговорныеДокументыЭтапы.Срок >= &ТекущаяДата
		|	И ДоговорныеДокументыЭтапы.Пройден = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоЭтапов)
		|ПО
		|	Документ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПредупреждатьПо", ПредупреждатьПо);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаЭтапы = Выборка.Выбрать();
		
		Если Выборка.КоличествоЭтапов = 1 Тогда
			
			ВыборкаЭтапы.Следующий();
			
			Текст = СтрШаблон(НСтр("ru = '%1 истекает срок этапа ""%2. %3"" %4.'"),
				ПредставлениеСрока(ВыборкаЭтапы.Срок),
				ВыборкаЭтапы.НомерСтроки,
				ВыборкаЭтапы.Этап,
				Выборка.ПредставлениеДокумента);
			
		Иначе
			
			Текст = Новый Массив;
			Текст.Добавить(СтрШаблон(НСтр("ru = 'Истекает срок %1 %2 %3.'"),
				Выборка.КоличествоЭтапов,
				ПредставлениеПодписиЭтапов(Выборка.КоличествоЭтапов, 2),
				Выборка.ПредставлениеДокумента));
			Текст.Добавить("");
			Текст.Добавить(НСтр("ru = 'Этапы с истекающим сроком:'"));
			
			Пока ВыборкаЭтапы.Следующий() Цикл
				Текст.Добавить(СтрШаблон(НСтр("ru = '%1. %2 (%3).'"),
					ВыборкаЭтапы.НомерСтроки,
					ВыборкаЭтапы.Этап,
					НРег(ПредставлениеСрока(ВыборкаЭтапы.Срок))));
			КонецЦикла;
			
			Текст = СтрСоединить(Текст, Символы.ПС);
			
		КонецЕсли;
		
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
	// Просрочен этап документа.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорныеДокументы.Ссылка КАК Документ,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	ДоговорныеДокументыЭтапы.НомерСтроки КАК КоличествоЭтапов,
		|	ДоговорныеДокументыЭтапы.НомерСтроки КАК НомерСтроки,
		|	ДоговорныеДокументыЭтапы.Этап КАК Этап,
		|	ДоговорныеДокументыЭтапы.Срок КАК Срок
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорныеДокументы.Этапы КАК ДоговорныеДокументыЭтапы
		|		ПО ДоговорныеДокументы.Ссылка = ДоговорныеДокументыЭтапы.Ссылка
		|ГДЕ
		|	ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорныеДокументыЭтапы.Срок < &ТекущаяДата
		|	И ДоговорныеДокументыЭтапы.Срок <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДоговорныеДокументыЭтапы.Пройден = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоЭтапов)
		|ПО
		|	Документ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаЭтапы = Выборка.Выбрать();
		
		Если Выборка.КоличествоЭтапов = 1 Тогда
			
			ВыборкаЭтапы.Следующий();
			
			Текст = СтрШаблон(НСтр("ru = 'Просрочен этап ""%1. %2"" %3.'"),
				ВыборкаЭтапы.НомерСтроки,
				ВыборкаЭтапы.Этап,
				Выборка.ПредставлениеДокумента);
			
		Иначе
			
			Текст = Новый Массив;
			Текст.Добавить(СтрШаблон("%1 %2 %3 %4.",
				ПредставлениеПодписиПросрочено(Выборка.КоличествоЭтапов),
				Выборка.КоличествоЭтапов,
				ПредставлениеПодписиЭтапов(Выборка.КоличествоЭтапов, 1),
				Выборка.ПредставлениеДокумента));
			Текст.Добавить("");
			Текст.Добавить(НСтр("ru = 'Просроченные этапы:'"));
			
			Пока ВыборкаЭтапы.Следующий() Цикл
				Текст.Добавить(СтрШаблон("%1. %2.",
					ВыборкаЭтапы.НомерСтроки,
					ВыборкаЭтапы.Этап));
			КонецЦикла;
			
			Текст = СтрСоединить(Текст, Символы.ПС);
			
		КонецЕсли;
		
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует сообщения, связанные с возвратом документов.
//
Процедура КонтрольВозвратаДокументов()
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	// Истекает срок возврата документа.
	ПредупреждатьПо = ТекущаяДата + 86400 * 2; // 86400 - число секунд в дне.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналПередачиСрезПоследних.Документ КАК Документ,
		|	ЖурналПередачиСрезПоследних.Период КАК Период,
		|	ЖурналПередачиСрезПоследних.СрокВозврата КАК Срок,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	Контрагенты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыКонтрагента
		|ИЗ
		|	РегистрСведений.ЖурналПередачи.СрезПоследних КАК ЖурналПередачиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО ДоговорныеДокументы.Контрагент = Контрагенты.Ссылка
		|		ПО ЖурналПередачиСрезПоследних.Документ = ДоговорныеДокументы.Ссылка
		|ГДЕ
		|	ЖурналПередачиСрезПоследних.Возвращен = ЛОЖЬ
		|	И ЖурналПередачиСрезПоследних.СрокВозврата <= &ПредупреждатьПо
		|	И ЖурналПередачиСрезПоследних.СрокВозврата >= &ТекущаяДата
		|	И ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ПредупреждатьПо", ПредупреждатьПо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = Новый Массив;
		ОсновнойТекстСообщения = СтрШаблон(
			НСтр("ru = '%1 истекает срок возврата %2.'"),
			ПредставлениеСрока(Выборка.Срок),
			Выборка.ПредставлениеДокумента);
		Текст.Добавить(ОсновнойТекстСообщения);
		Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочтыКонтрагента) Тогда
			СсылкаMailto = СформироватьСсылкуMailto(
				Выборка.АдресЭлектроннойПочтыКонтрагента,
				ОсновнойТекстСообщения,
				ОсновнойТекстСообщения);
			Текст.Добавить(СтрШаблон(
				НСтр("ru = 'E-mail контрагента: %1'"),
				СсылкаMailto));
		КонецЕсли;
		Текст = СтрСоединить(Текст, Символы.ПС);
		
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
	// Просрочка возврата документа.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналПередачиСрезПоследних.Документ КАК Документ,
		|	ЖурналПередачиСрезПоследних.Период КАК Период,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	Контрагенты.АдресЭлектроннойПочты КАК АдресЭлектроннойПочтыКонтрагента
		|ИЗ
		|	РегистрСведений.ЖурналПередачи.СрезПоследних КАК ЖурналПередачиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ПО ДоговорныеДокументы.Контрагент = Контрагенты.Ссылка
		|		ПО ЖурналПередачиСрезПоследних.Документ = ДоговорныеДокументы.Ссылка
		|ГДЕ
		|	ЖурналПередачиСрезПоследних.Возвращен = ЛОЖЬ
		|	И ЖурналПередачиСрезПоследних.СрокВозврата < &ТекущаяДата
		|	И ЖурналПередачиСрезПоследних.СрокВозврата <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = Новый Массив;
		ОсновнойТекстСообщения = СтрШаблон(
			НСтр("ru = 'Просрочен возврат %1.'"),
			Выборка.ПредставлениеДокумента);
		Текст.Добавить(ОсновнойТекстСообщения);
		Если ЗначениеЗаполнено(Выборка.АдресЭлектроннойПочтыКонтрагента) Тогда
			СсылкаMailto = СформироватьСсылкуMailto(
				Выборка.АдресЭлектроннойПочтыКонтрагента,
				ОсновнойТекстСообщения,
				ОсновнойТекстСообщения);
			Текст.Добавить(СтрШаблон(
				НСтр("ru = 'E-mail контрагента: %1'"),
				СсылкаMailto));
		КонецЕсли;
		Текст = СтрСоединить(Текст, Символы.ПС);
		
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует сообщения, связанные с сроком согласования документа.
//
Процедура КонтрольСогласованияДокументов()
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	
	// Не согласованные за неделю документы.
	ПредупреждатьПо = НачалоДня(ТекущаяДатаСеанса()) - 86400 * 7; // 86400 - число секунд в дне.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорныеДокументы.Ссылка КАК Документ,
		|	ДоговорныеДокументы.Ответственный КАК Ответственный,
		|	ДоговорныеДокументы.Представление КАК ПредставлениеДокумента,
		|	ДоговорныеДокументыСогласующие.НомерСтроки КАК КоличествоСогласующих,
		|	ПРЕДСТАВЛЕНИЕ(ДоговорныеДокументыСогласующие.Исполнитель) КАК Согласующий
		|ИЗ
		|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорныеДокументы.Согласующие КАК ДоговорныеДокументыСогласующие
		|		ПО ДоговорныеДокументы.Ссылка = ДоговорныеДокументыСогласующие.Ссылка
		|ГДЕ
		|	ДоговорныеДокументы.ДатаСоздания <= &ПредупреждатьПо
		|	И ДоговорныеДокументы.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорныеДокументыСогласующие.РезультатСогласования <> ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	ДоговорныеДокументыСогласующие.НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(КоличествоСогласующих)
		|ПО
		|	Документ";
	
	Запрос.УстановитьПараметр("ПредупреждатьПо", ПредупреждатьПо);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСогласующие = Выборка.Выбрать();
		
		Текст = Новый Массив;
		Текст.Добавить(СтрШаблон(НСтр("ru = 'Еще не согласован %1.'"), Выборка.ПредставлениеДокумента));
		Текст.Добавить("");
		Текст.Добавить(СтрШаблон(НСтр("ru = '%1 ожидает согласования от следующих лиц:'"), Выборка.ПредставлениеДокумента));
		
		ИндексСогласующего = 1;
		Пока ВыборкаСогласующие.Следующий() Цикл
			Текст.Добавить(СтрШаблон("- %1%2",
				ВыборкаСогласующие.Согласующий,
				?(Выборка.КоличествоСогласующих = ИндексСогласующего, ".", ";")));
			ИндексСогласующего = ИндексСогласующего + 1;
		КонецЦикла;
		
		Текст = СтрСоединить(Текст, Символы.ПС);
		
		ДобавитьСообщениеБезопасно(Выборка.Ответственный, Текст, Выборка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует сообщение.
//
// Параметры:
//  Кому - СправочникСсылка.Пользователи - Адресат сообщения.
//  Текст - Строка - Текст сообщения.
//  Предмет - СправочникСсылка.* - Ссылка на предмет сообщения.
//
Процедура ДобавитьСообщение(Кому, Текст, Предмет)
	
	Если Не ЗначениеЗаполнено(Кому) Тогда
		Возврат;
	КонецЕсли;
	
	Автор = Справочники.Пользователи.ПустаяСсылка();
	
	Справочники.Сообщения.Добавить(Автор, Кому, Текст, Предмет);
	
КонецПроцедуры

// Формирует сообщение не вызывая исключения в случае ошибки, записывая его в журнал регистрации..
//
// Параметры:
//  Кому - СправочникСсылка.Пользователи - Адресат сообщения.
//  Текст - Строка - Текст сообщения.
//  Предмет - СправочникСсылка.* - Ссылка на предмет сообщения.
//
Процедура ДобавитьСообщениеБезопасно(Кому, Текст, Предмет)
	
	Попытка
		ДобавитьСообщение(Кому, Текст, Предмет);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при формировании сообщения: %1'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Подпись к количеству дней по склонениям.
//
// Параметры:
//  ЧислоДней - Число - Число дней.
//
// Возвращаемое значение:
//  Строка - Подпись количества дней.
//
Функция ПолучитьПодписьДней(ЧислоДней)
	
	ВариантыНаписания = Новый Массив;
	ВариантыНаписания.Добавить(НСтр("ru = 'день'"));
	ВариантыНаписания.Добавить(НСтр("ru = 'дня'"));
	ВариантыНаписания.Добавить(НСтр("ru = 'дней'"));
	ВариантыНаписания = СтрСоединить(ВариантыНаписания, ",");
	
	Возврат СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		ЧислоДней, ВариантыНаписания, Ложь);
	
КонецФункции

// Формирует текстовое представление срока.
//
// Параметры:
//  Срок - Дата - Срок, представление которого хотим получить.
//
// Возвращаемое значение:
//  Строка - Текстовое представление срока.
//
Функция ПредставлениеСрока(Срок)
	
	ПредставлениеСрока = "";
	
	ОсталосьДней = (НачалоДня(Срок) - НачалоДня(ТекущаяДатаСеанса())) / 86400; // 86400 - число секунд в дне.
	Если ОсталосьДней = 0 Тогда
		ПредставлениеСрока = НСтр("ru = 'Сегодня'");
	ИначеЕсли ОсталосьДней = 1 Тогда
		ПредставлениеСрока = НСтр("ru = 'Завтра'");
	Иначе
		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'Через %1 %2'"),
			ОсталосьДней,
			ПолучитьПодписьДней(ОсталосьДней));
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Формирует представление подписи этапов.
//
// Параметры:
//  КоличествоЭтапов - Число - Количество этапов.
//  Падеж - Число - падеж, в котором необходимо получить представление подписи.
//   * 1 - Именительный.
//   * 2 - Родительный.
//
// Возвращаемое значение:
//  Строка - Подпись этапов.
//
Функция ПредставлениеПодписиЭтапов(КоличествоЭтапов, Падеж)
	
	ВариантыНаписания = Новый Массив;
	Если Падеж = 1 Тогда
		ВариантыНаписания.Добавить(НСтр("ru = 'этап'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапа'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапов'"));
	ИначеЕсли Падеж = 2 Тогда
		ВариантыНаписания.Добавить(НСтр("ru = 'этапа'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапов'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапов'"));
	Иначе
		ВариантыНаписания.Добавить(НСтр("ru = 'этап'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапа'"));
		ВариантыНаписания.Добавить(НСтр("ru = 'этапов'"));
	КонецЕсли;
	ВариантыНаписания = СтрСоединить(ВариантыНаписания, ",");
	
	Возврат СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		КоличествоЭтапов, ВариантыНаписания, Ложь);
	
КонецФункции

// Формирует представление подписи просрочено.
//
// Параметры:
//  КоличествоЭтапов - Число - Количество этапов.
//
// Возвращаемое значение:
//  Строка - Подпись просрочено.
//
Функция ПредставлениеПодписиПросрочено(КоличествоЭтапов)
	
	ВариантыНаписания = Новый Массив;
	ВариантыНаписания.Добавить(НСтр("ru = 'Просрочен'"));
	ВариантыНаписания.Добавить(НСтр("ru = 'Просрочено'"));
	ВариантыНаписания.Добавить(НСтр("ru = 'Просрочено'"));
	ВариантыНаписания = СтрСоединить(ВариантыНаписания, ",");
	
	Возврат СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
		КоличествоЭтапов, ВариантыНаписания, Ложь);
	
КонецФункции

// Выполняет проверку наличия обновления через интернет.
//
Процедура ПроверитьНаличиеОбновления()
	
	Попытка
		
		ПараметрыФайлаПроверкиОбновления =
			ОбновлениеКонфигурацииПереопределяемый.ПолучитьФайлПроверкиНаличияОбновлений();
		Если ПараметрыФайлаПроверкиОбновления = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДоступноОбновлениеДляНовойРедакции = Ложь;
		ВерсияКонфигурации = Метаданные.Версия;
		ПоследняяВерсияКонфигурации = ПараметрыФайлаПроверкиОбновления.Version;
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияКонфигурации, ПоследняяВерсияКонфигурации) >= 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Константы.ПоследняяИзвестнаяВерсияКонфигурации.Получить() = ПоследняяВерсияКонфигурации Тогда
			Возврат;
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Новая версия ""1С:Договоров"" %1 доступна для загрузки:
			|%2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения,
			ПоследняяВерсияКонфигурации,
			СсылкаНаНовуюВерсию(ПоследняяВерсияКонфигурации));
		
		НачатьТранзакцию();
		Попытка
			Администраторы = ПользователиДоговоры.Администраторы();
			Константы.ПоследняяИзвестнаяВерсияКонфигурации.Установить(ПоследняяВерсияКонфигурации);
			Для Каждого Администратор Из Администраторы Цикл
				ДобавитьСообщение(Администратор, ТекстСообщения, Неопределено);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось проверить наличие обновлений:
			|%1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Формирует ссылку на новую версию конфигурации.
//
// Параметры:
//  Версия - Строка - Новая версия конфигурации.
//
// Возвращаемое значение:
//  Строка - Ссылка на новую версию конфигурации.
//
Функция СсылкаНаНовуюВерсию(Версия)
	
	СсылкаНаНовуюВерсию = "https://releases.1c.ru/version_files?nick=%1&ver=%2";
	
	// Определение короткого имени
	КороткоеИмя = "";
	ОбновлениеКонфигурацииПереопределяемый.ПриОпределенииКраткогоИмениКонфигурации(КороткоеИмя);
	
	// Определение редакции конфигурации.
	НомерРедакции = "";
	ПодстрокиВерсии = СтрРазделить(Метаданные.Версия, ".");
	Если ПодстрокиВерсии.Количество() > 1 Тогда
		НомерРедакции = ПодстрокиВерсии[0] + ПодстрокиВерсии[1];
	КонецЕсли;
	КороткоеИмя = КороткоеИмя + НомерРедакции;
	
	СсылкаНаНовуюВерсию = СтрШаблон(СсылкаНаНовуюВерсию, КороткоеИмя, Версия);
	
	Возврат СсылкаНаНовуюВерсию;
	
КонецФункции

// Формирует ссылку mailto.
//
// Параметры:
//  Кому - Строка - Получатель письма.
//  ТемаПисьма - Строка - Тема письма.
//  ТекстПисьма - Строка - Текст письма.
// 
// Возвращаемое значение:
//  Тип - Ссылка mailto.
//
Функция СформироватьСсылкуMailto(Кому, ТемаПисьма, ТекстПисьма)
	
	СсылкаMailto = Новый Массив;
	НачатоЗаполнениеПараметров = Ложь;
	
	ПараметрTo = КодироватьСтроку(Кому, СпособКодированияСтроки.КодировкаURL);
	ПараметрSubject = КодироватьСтроку(ТемаПисьма, СпособКодированияСтроки.КодировкаURL);
	ПараметрBody = КодироватьСтроку(ТекстПисьма, СпособКодированияСтроки.КодировкаURL);
	
	СсылкаMailto = СтрШаблон(
		"mailto:%1?subject=%2&body=%3",
		ПараметрTo,
		ПараметрSubject,
		ПараметрBody);
	
	Возврат СсылкаMailto;
	
КонецФункции

#КонецОбласти