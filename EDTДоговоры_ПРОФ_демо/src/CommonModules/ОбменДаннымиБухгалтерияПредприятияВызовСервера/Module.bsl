#Область ПрограммныйИнтерфейс

// Получает сохраненные в константе параметры подключения, дополняя их до стандартной
// структуры при необходимости. При первом вызове инициализирует константу структурой.
//
// Возвращаемое значение:
//   Структура - см. ИнициализироватьНовыеПараметрыПодключения()
//
Функция ПолучитьПараметрыПодключения() Экспорт
	
	НовыеПараметрыПодключения = ИнициализироватьНовыеПараметрыПодключения();
	
	Если Не ПравоДоступа("Чтение",
		Метаданные.Константы.ПараметрыПодключенияКИсточникуДанныхНаПлатформе1С) Тогда
		Возврат НовыеПараметрыПодключения;
	КонецЕсли;
	
	ХранилищеЗначения = Константы.ПараметрыПодключенияКИсточникуДанныхНаПлатформе1С.Получить();
	
	ПараметрыПодключения = ХранилищеЗначения.Получить();
	
	Если ТипЗнч(ПараметрыПодключения) = Тип("Структура") Тогда
		
		// Дополним новыми параметрами.
		Для Каждого КлючИЗначение Из НовыеПараметрыПодключения Цикл
			Если Не ПараметрыПодключения.Свойство(КлючИЗначение.Ключ) Тогда
				ПараметрыПодключения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		Возврат ПараметрыПодключения;
		
	Иначе // первый вызов, инициализируем константу
		
		УстановитьПараметрыПодключения(НовыеПараметрыПодключения);
		Возврат НовыеПараметрыПодключения;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает в константу параметры подключения.
//
// Параметры:
//   ПараметрыПодключения - Структура - см. ИнициализироватьНовыеПараметрыПодключения()
//
Процедура УстановитьПараметрыПодключения(Знач ПараметрыПодключения) Экспорт
	
	НовыеПараметрыПодключения = ИнициализироватьНовыеПараметрыПодключения();
	
	Для Каждого КлючИЗначение Из НовыеПараметрыПодключения Цикл
		Если Не ПараметрыПодключения.Свойство(КлючИЗначение.Ключ) Тогда
			ПараметрыПодключения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ПараметрыПодключения);
	
	Константы.ПараметрыПодключенияКИсточникуДанныхНаПлатформе1С.Установить(ХранилищеЗначения);
	
КонецПроцедуры

// Создает структуру параметров подключения.
//
// Возвращаемое значение:
//   Структура.
//
Функция ИнициализироватьНовыеПараметрыПодключения() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяКоннектора", "");
	Параметры.Вставить("КаталогИнформационнойБазы", "");
	Параметры.Вставить("БазаСерверная", Неопределено);
	Параметры.Вставить("ИмяСервера1СПредприятия", "");
	Параметры.Вставить("ИмяИнформационнойБазыНаСервере1СПредприятия", "");
	Параметры.Вставить("АутентификацияОперационнойСистемы", Неопределено);
	Параметры.Вставить("ИмяПользователя", "");
	Параметры.Вставить("ПарольПользователя", "");
	
	Параметры.Вставить("ТекущийШагПодключения", Неопределено);
	Параметры.Вставить("ПродолжитьПослеНачалаРаботыСистемы", Ложь);
	Параметры.Вставить("ИмяНастраивающегоПользователя", "");
	
	Параметры.Вставить("ЗагружатьКонтрагентов", Истина);
	Параметры.Вставить("ЗагружатьНоменклатуру", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Собирает строку подключения из параметров подключения.
//
// Параметры:
//   ПараметрыПодключения - Структура - см. ИнициализироватьНовыеПараметрыПодключения()
//   ИсключитьИмяПользователяИПароль - Булево - Истина, если в строке не нужны имя и пароль.
//
// Возвращаемое значение:
//   Строка - строка подключения.
//
Функция ПолучитьСтрокуПодключения(ПараметрыПодключения, ИсключитьИмяПользователяИПароль = Ложь) Экспорт
	
	Если ПараметрыПодключения.БазаСерверная = Истина Тогда
		СтрокаБазы = СтрШаблон("Srvr = ""%1""; Ref = ""%2""",
			ПараметрыПодключения.ИмяСервера1СПредприятия,
			ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
	ИначеЕсли ПараметрыПодключения.БазаСерверная = Ложь Тогда
		СтрокаБазы = СтрШаблон("File = ""%1""",
			ПараметрыПодключения.КаталогИнформационнойБазы);
	КонецЕсли;
		
	Если ИсключитьИмяПользователяИПароль Тогда
		Возврат СтрокаБазы;
	КонецЕсли;
	
	Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
		СтрокаАутентификации = "";
	Иначе // 1С:Предприятия
		ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
		ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
		СтрокаАутентификации = СтрШаблон("; Usr = ""%1""; Pwd = ""%2""",
			ПараметрыПодключения.ИмяПользователя,
			ПараметрыПодключения.ПарольПользователя);
	КонецЕсли;
		
	Возврат СтрШаблон("%1%2", СтрокаБазы, СтрокаАутентификации);
		
КонецФункции

// Разбирает строку подключения в параметры подключения.
//
// Параметры:
//   СтрокаПодключения - Строка - разбираемая строка подключения.
//   ПараметрыПодключения - Структура - неявно возвращаемое значение.
//
Процедура РазобратьСтрокуПодключения(Знач СтрокаПодключения, ПараметрыПодключения) Экспорт
	
	ПараметрыПодключения.КаталогИнформационнойБазы = "";
	ПараметрыПодключения.БазаСерверная = Неопределено;
	ПараметрыПодключения.ИмяСервера1СПредприятия = "";
	ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия = "";
	ПараметрыПодключения.АутентификацияОперационнойСистемы = Ложь;
	ПараметрыПодключения.ИмяПользователя = "";
	ПараметрыПодключения.ПарольПользователя = "";
	
	КлючиИЗначения = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаПодключения);
	Для Каждого КлючИЗначение Из КлючиИЗначения Цикл
		Ключ = ВРег(СокрЛП(КлючИЗначение.Ключ));
		Значение = СокрЛП(КлючИЗначение.Значение);
		Если Ключ = "FILE" Тогда
			ПараметрыПодключения.БазаСерверная = Ложь;
			ПараметрыПодключения.КаталогИнформационнойБазы = Значение;
		ИначеЕсли Ключ = "SRVR" Тогда
			ПараметрыПодключения.БазаСерверная = Истина;
			ПараметрыПодключения.ИмяСервера1СПредприятия = Значение;
		ИначеЕсли Ключ = "REF" Тогда
			ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия = Значение;
		ИначеЕсли Ключ = "USR" Тогда
			ПараметрыПодключения.ИмяПользователя = Значение;
		ИначеЕсли Ключ = "PWD" Тогда
			ПараметрыПодключения.ПарольПользователя = Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Подключается к ИБ-источнику и, в случае успеха, загружает данные.
//
// Параметры:
//   ПараметрыПодключения - Структура - неявно возвращаемое значение.
//   АдресРезультата - Строка - адрес в хранилище для помещения результатов.
//
Процедура ПодключитьсяИЗагрузить(ПараметрыПодключения, АдресРезультата) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыПодключения.ИмяКоннектора) Тогда
		ПараметрыПодключения.ИмяКоннектора = "V83.COMConnector";
	КонецЕсли;
	
	Попытка
		Соединитель = Новый COMОбъект(ПараметрыПодключения.ИмяКоннектора);
	Исключение
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			Результат);
		Если СтрНайти(Результат, "Класс не зарегистрирован") <> 0 Тогда
			Результат = "РегистрацияComcntr";
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		Возврат;
	КонецПопытки;
	
	СтрокаПодключения = ПолучитьСтрокуПодключения(ПараметрыПодключения);

	Попытка
		Соединение = Соединитель.Connect(СтрокаПодключения);
		Результат = ЗагрузитьДанные(Соединение,
			ПараметрыПодключения.ЗагружатьКонтрагентов,
			ПараметрыПодключения.ЗагружатьНоменклатуру);
	Исключение
		Результат = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			Результат);
		// Разберем распространенные ошибки, чтобы обработать их понятным для пользователя образом.
		Если СтрНайти(Результат, "отличается от версии корневого модуля") Тогда
			Результат = "РегистрацияComcntr";
		ИначеЕсли СтрНайти(Результат, "Неправильное имя или пароль пользователя") <> 0 Тогда
			Результат = "ИсправлениеИмениПароля";
		ИначеЕсли СтрНайти(Результат, "Отсутствует файл базы данных") <> 0 Тогда
			Результат = "ИсправлениеКаталогаИнформационнойБазы";
		ИначеЕсли СтрНайти(Результат, "Не найден сетевой путь") <> 0 Тогда
			Результат = "ИсправлениеСетевогоПути";
		ИначеЕсли СтрНайти(Результат, "Не совпадает версия временного файла") <> 0 Тогда
			Результат = "ЗавершениеДругихСеансовРаботы";
		ИначеЕсли СтрНайти(Результат, "Различаются версии клиента и сервера") <> 0 Тогда
			Результат = "ВыгрузкаВручнуюПриРазличииВерсий";
		КонецЕсли;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет описание контрагента для последующей загрузки.
//
Процедура ДобавитьКонтрагента(Соединение, ОсобенностиКонтрагентов, Контрагенты, Ссылка)
	
	Идентификатор = Соединение.String(Ссылка.УникальныйИдентификатор());
	Если Контрагенты[Идентификатор] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	Контрагент = Новый Структура;
	Контрагент.Вставить("ЕстьДоговор", Ложь);
	Контрагент.Вставить("Подписывает", Неопределено);
	Если ОсобенностиКонтрагентов.ЕстьНаименованиеСокращенное
		И НЕ ОсобенностиКонтрагентов.ЕстьНаименованиеПолное Тогда
		Контрагент.Вставить("Наименование", ?(ЗначениеЗаполнено(Объект.НаименованиеСокращенное),
			Объект.НаименованиеСокращенное,
			Объект.Наименование));
		Контрагент.Вставить("НаименованиеПолное", Объект.Наименование);
	Иначе
		Контрагент.Вставить("Наименование", Объект.Наименование);
		Контрагент.Вставить("НаименованиеПолное", Объект.НаименованиеПолное);
	КонецЕсли;
	Контрагент.Вставить("ИНН", Объект.ИНН);
	Контрагент.Вставить("КПП", Объект.КПП);
	
	// Определим вид контрагента по явно заполненному реквизиту.
	Если ОсобенностиКонтрагентов.ЮридическоеФизическоеЛицо = "ЮридическоеФизическоеЛицо" Тогда
		
		Попытка
			Если Соединение.Перечисления.ЮридическоеФизическоеЛицо.Индекс(
					Объект.ЮридическоеФизическоеЛицо)
				= Соединение.Перечисления.ЮридическоеФизическоеЛицо.Индекс(
					Соединение.Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
				ЮридическоеФизическоеЛицо = ЮрЛицо();
			ИначеЕсли Соединение.Перечисления.ЮридическоеФизическоеЛицо.Индекс(
					Объект.ЮридическоеФизическоеЛицо)
				= Соединение.Перечисления.ЮридическоеФизическоеЛицо.Индекс(
					Соединение.Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
				ЮридическоеФизическоеЛицо = ФизЛицо();
			КонецЕсли;
		Исключение
			ЮридическоеФизическоеЛицо = Неопределено;
		КонецПопытки;
		
	ИначеЕсли ОсобенностиКонтрагентов.ЮридическоеФизическоеЛицо = "ЮрФизЛицо" Тогда
		
		Попытка
			Если Соединение.Перечисления.ЮрФизЛицо.Индекс(
					Объект.ЮрФизЛицо)
				= Соединение.Перечисления.ЮрФизЛицо.Индекс(
					Соединение.Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
				ЮридическоеФизическоеЛицо = ЮрЛицо();
			ИначеЕсли Соединение.Перечисления.ЮрФизЛицо.Индекс(
					Объект.ЮрФизЛицо)
				= Соединение.Перечисления.ЮрФизЛицо.Индекс(
					Соединение.Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
				ЮридическоеФизическоеЛицо = ФизЛицо();
			КонецЕсли;
		Исключение
			ЮридическоеФизическоеЛицо = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	// Определим ИП по заполненности ОГРНИП или свидетельства.
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.РегистрационныйНомер)
			И ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.РегистрационныйНомер]) Тогда
			ЮридическоеФизическоеЛицо = Предприниматель();
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.СвидетельствоСерияНомер)
			И ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.СвидетельствоСерияНомер]) Тогда
			ЮридическоеФизическоеЛицо = Предприниматель();
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим физлицо по длине ИНН.
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо)
		И СтрДлина(Контрагент.ИНН) = 12 Тогда
		ЮридическоеФизическоеЛицо = ФизЛицо();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		ЮридическоеФизическоеЛицо = ЮрЛицо();
	КонецЕсли;
	
	Контрагент.Вставить("ЮридическоеФизическоеЛицо", ЮридическоеФизическоеЛицо);
	
	// Загрузим контактную информацию.
	АдресЭлектроннойПочты = "";
	ЮридическийАдрес = "";
	
	Если ОсобенностиКонтрагентов.КонтактнаяИнформация = "ТабличнаяЧасть" Тогда
		КоллекцияКИ = Объект.КонтактнаяИнформация;
	ИначеЕсли ОсобенностиКонтрагентов.КонтактнаяИнформация = "РегистрСведений" Тогда
		КоллекцияКИ = Соединение.РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		КоллекцияКИ.Отбор.Объект.Установить(Объект.Ссылка);
		КоллекцияКИ.Прочитать();
	Иначе
		КоллекцияКИ = Неопределено;
	КонецЕсли;
	
	Если КоллекцияКИ <> Неопределено Тогда
		Для Каждого СтрокаКИ Из КоллекцияКИ Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Воспользуемся полем АдресЭП, если оно доступно.
			Если ОсобенностиКонтрагентов.АдресЭП <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаКИ.АдресЭП) Тогда
					Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
						АдресЭлектроннойПочты = АдресЭлектроннойПочты + "; ";
					КонецЕсли;
					АдресЭлектроннойПочты = АдресЭлектроннойПочты + СтрокаКИ.АдресЭП;
				КонецЕсли;
			Иначе // АдресЭП недоступен, отберем по типу.
				ИндексТипа = Соединение.Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
				Если ИндексТипа = ОсобенностиКонтрагентов.ТипАдресЭлектроннойПочты Тогда
					АдресЭлектроннойПочты = АдресЭлектроннойПочты + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЕсли;
			
			// Получим адрес.
			Если Не СтрокаКИ.Вид.Пустая() Тогда
				Если ОсобенностиКонтрагентов.ИмяПредопределенныхДанных <> Неопределено Тогда
					Если (СтрокаКИ.Вид.ИмяПредопределенныхДанных = "ЮрАдресКонтрагента" 
						Или СтрокаКИ.Вид.ИмяПредопределенныхДанных = "ЮрАдресФизЛица") Тогда
						ЮридическийАдрес = СтрокаКИ.Представление;
					КонецЕсли;
				Иначе // имя предопределенных данных недоступно
					ИдентификаторВида = Соединение.String(СтрокаКИ.Вид.УникальныйИдентификатор());
					Если ИдентификаторВида = ОсобенностиКонтрагентов.ЮрАдресКонтрагента
						Или ИдентификаторВида = ОсобенностиКонтрагентов.ЮрАдресФизЛица Тогда
						ЮридическийАдрес = СтрокаКИ.Представление;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Контрагент.Вставить("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	
	// Платежные реквизиты.
	ПредставлениеСчета = "";
	Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.ОсновнойБанковскийСчет)
		И ТипЗнч(Объект.ОсновнойБанковскийСчет) = Тип("COMОбъект")
		И Не Объект.ОсновнойБанковскийСчет.Пустая() Тогда
		
		Счет = Объект.ОсновнойБанковскийСчет;
		Если ЗначениеЗаполнено(Счет.НомерСчета)
			И Не Счет.Банк.Пустая()
			И ЗначениеЗаполнено(Счет.Банк.Код)
			И ЗначениеЗаполнено(Счет.Банк.КоррСчет) Тогда
			
			ПредставлениеСчета = СтрШаблон(
				НСтр("ru = 'Р/с %1 в %2%3БИК %4, к/с %5'"),
				Счет.НомерСчета,
				Счет.Банк.Наименование,
				Символы.ПС,
				Счет.Банк.Код,
				Счет.Банк.КоррСчет);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Соберем все реквизиты строкой.
	Реквизиты = "";
	
	// ИНН / КПП
	Если ТипЗнч(Контрагент.ИНН) = Тип("Строка")
		И ЗначениеЗаполнено(Контрагент.ИНН) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Если ТипЗнч(Контрагент.КПП) = Тип("Строка")
			И ЗначениеЗаполнено(Контрагент.КПП) Тогда
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'ИНН %1 / КПП %2'"),
				Контрагент.ИНН,
				Контрагент.КПП);
		Иначе
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'ИНН %1'"),
				Контрагент.ИНН);
		КонецЕсли;
	КонецЕсли;
	
	// Рег. номер.
	Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.РегистрационныйНомер)
		И ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.РегистрационныйНомер]) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Если Контрагент.ЮридическоеФизическоеЛицо = Предприниматель() Тогда
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'ОГРНИП %1'"),
				Объект[ОсобенностиКонтрагентов.РегистрационныйНомер]);
		Иначе
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'ОГРН %1'"),
				Объект[ОсобенностиКонтрагентов.РегистрационныйНомер]);
		КонецЕсли;
	КонецЕсли;
	
	// Свидетельство.
	Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.СвидетельствоСерияНомер)
		И ЗначениеЗаполнено(ОсобенностиКонтрагентов.СвидетельствоДатаВыдачи)
		И ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.СвидетельствоСерияНомер]) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.СвидетельствоДатаВыдачи]) Тогда
			Контрагент.Вставить("ДействуетНаОсновании",
				СтрШаблон(НСтр("ru = 'свидетельства %1 от %2'"),
					Объект[ОсобенностиКонтрагентов.СвидетельствоСерияНомер],
					Формат(Объект[ОсобенностиКонтрагентов.СвидетельствоДатаВыдачи], "ДЛФ=D")));
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'Свидетельство %1 от %2'"),
				Объект[ОсобенностиКонтрагентов.СвидетельствоСерияНомер],
				Формат(Объект[ОсобенностиКонтрагентов.СвидетельствоДатаВыдачи], "ДЛФ=D"));
		Иначе
			Реквизиты = Реквизиты + СтрШаблон(НСтр("ru = 'Свидетельство %1'"),
				Объект[ОсобенностиКонтрагентов.СвидетельствоСерияНомер]);
		КонецЕсли;
	КонецЕсли;
	
	// Паспортные данные.
	Если ЗначениеЗаполнено(ОсобенностиКонтрагентов.ДокументУдостоверяющийЛичность)
		И ЗначениеЗаполнено(Объект[ОсобенностиКонтрагентов.ДокументУдостоверяющийЛичность]) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Реквизиты = Реквизиты + Объект[ОсобенностиКонтрагентов.ДокументУдостоверяющийЛичность];
		Если Контрагент.ЮридическоеФизическоеЛицо = ФизЛицо() Тогда
			Контрагент.Вставить("ПаспортныеДанные",
				Объект[ОсобенностиКонтрагентов.ДокументУдостоверяющийЛичность]);
		КонецЕсли;
	КонецЕсли;
	
	// Адрес.
	Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Реквизиты = Реквизиты + СтрШаблон(
			НСтр("ru = 'Адрес: %1'"),
			ЮридическийАдрес);
	КонецЕсли;
	
	// Счет.
	Если ЗначениеЗаполнено(ПредставлениеСчета) Тогда
		Если ЗначениеЗаполнено(Реквизиты) Тогда
			Реквизиты = Реквизиты + Символы.ПС;
		КонецЕсли;
		Реквизиты = Реквизиты + ПредставлениеСчета;
	КонецЕсли;
	
	Контрагент.Вставить("ВсеРеквизитыСтрокой", Реквизиты);
	
	Контрагенты.Вставить(Идентификатор, Контрагент);
	
КонецПроцедуры

// Обрабатывает договор, перенося сведения в описание контрагента-владельца для последующей загрузки.
//
Процедура ОбработатьДоговор(Соединение, Ссылка, ОсобенностиДоговоров, ОсобенностиКонтрагентов, Контрагенты,
	ИмяРеквизитаКонтрагентаДоговора)
	
	Объект = Ссылка.ПолучитьОбъект();
	
	ИдентификаторКонтрагента = Соединение.String(Объект[ИмяРеквизитаКонтрагентаДоговора].УникальныйИдентификатор());
	Контрагент = Контрагенты[ИдентификаторКонтрагента];
	// На случай нарушения ссылочной целостности.
	Если Контрагент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отметим участие контрагента в договоре.
	Контрагент.ЕстьДоговор = Истина;
	
	// Определим подписывающего.
	Если ОсобенностиДоговоров.ЕстьРеквизитыПодписывающего Тогда
		Если ЗначениеЗаполнено(Объект.РуководительКонтрагента) Тогда
			Подписывает = Новый Структура;
			Подписывает.Вставить("ФИО", Объект.РуководительКонтрагента);
			Подписывает.Вставить("Должность", Объект.ДолжностьРуководителяКонтрагента);
			Подписывает.Вставить("Основание", Объект.ЗаРуководителяКонтрагентаПоПриказу);
			Контрагент.Подписывает = Подписывает;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет описание номенклатуры для последующей загрузки.
//
Процедура ДобавитьНоменклатуру(Соединение, ОсобенностиНоменклатуры, Номенклатура, Ссылка, ЕдиницыИзмерения)
	
	Идентификатор = Соединение.String(Ссылка.УникальныйИдентификатор());
	Если Номенклатура[Идентификатор] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	ОписаниеНоменклатуры = Новый Структура;
	ОписаниеНоменклатуры.Вставить("Наименование", Объект.Наименование);
	ОписаниеНоменклатуры.Вставить("ЭтоГруппа", Объект.ЭтоГруппа);
	Если Объект.Родитель.Пустая() Тогда
		ОписаниеНоменклатуры.Вставить("Родитель", Неопределено);
	Иначе
		ОписаниеНоменклатуры.Вставить("Родитель",
			Соединение.String(Объект.Родитель.УникальныйИдентификатор()));
	КонецЕсли;
		
	Если Не Объект.ЭтоГруппа Тогда
		
		ОписаниеНоменклатуры.Вставить("ЕдиницаИзмерения", Неопределено);
		Если ОсобенностиНоменклатуры.ЕдиницаИзмерения <> Неопределено Тогда
			ЕдиницаИзмерения = Объект[ОсобенностиНоменклатуры.ЕдиницаИзмерения];
			Если Не ЕдиницаИзмерения.Пустая() Тогда
				ОписаниеНоменклатуры.ЕдиницаИзмерения 
					= ДобавитьЕдиницуИзмерения(Соединение, ЕдиницыИзмерения, ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		Если Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.Пониженная) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10);
			
		ИначеЕсли Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.ПониженнаяРасчетная) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС10);
			
		ИначеЕсли Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.Общая) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС20);
			
		ИначеЕсли Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.ОбщаяРасчетная) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС20);
			
		ИначеЕсли Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.Нулевая) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС0);
			
		ИначеЕсли Соединение.XMLСтрока(Объект.ВидСтавкиНДС) =
				Соединение.XMLСтрока(Соединение.Перечисления.ВидыСтавокНДС.БезНДС) Тогда
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.БезНДС);
			
		Иначе
			ОписаниеНоменклатуры.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС20);
		КонецЕсли;
		
	КонецЕсли;
	
	Номенклатура.Вставить(Идентификатор, ОписаниеНоменклатуры);
	
КонецПроцедуры

// Добавляет описание единицы измерения для последующей загрузки.
//
Функция ДобавитьЕдиницуИзмерения(Соединение, ЕдиницыИзмерения, Ссылка)
	
	Идентификатор = Соединение.String(Ссылка.УникальныйИдентификатор());
	Если ЕдиницыИзмерения[Идентификатор] <> Неопределено Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	ОписаниеЕдиницы = Новый Структура;
	ОписаниеЕдиницы.Вставить("Ссылка", Неопределено);
	ОписаниеЕдиницы.Вставить("Код", Объект.Код);
	ОписаниеЕдиницы.Вставить("Наименование", Объект.Наименование);
	ОписаниеЕдиницы.Вставить("НаименованиеПолное", Объект.НаименованиеПолное);
	
	ЕдиницыИзмерения.Вставить(Идентификатор, ОписаниеЕдиницы);
	
	Возврат Идентификатор;
	
КонецФункции

// Загружает данные из ИБ-источника.
//
Функция ЗагрузитьДанные(Соединение, ЗагружатьКонтрагентов, ЗагружатьНоменклатуру)
	
	Результат = Новый Структура;
	
	Если ЗагружатьКонтрагентов Тогда
	
		// Получим особенности договоров.
		ОсобенностиДоговоров = Новый Структура;
		ОбъектМетаданных = Соединение.Метаданные.Справочники.Найти("ДоговорыКонтрагентов");
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектМетаданных = Соединение.Метаданные.Справочники.Найти("Договоры");
			ИмяСправочникаДоговоры = "Договоры";
			ИмяРеквизитаКонтрагентаДоговора = "Контрагент";
		Иначе
			ИмяСправочникаДоговоры = "ДоговорыКонтрагентов";
			ИмяРеквизитаКонтрагентаДоговора = "Владелец";
		КонецЕсли;
		Если ОбъектМетаданных = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'В конфигурации, выбранной для загрузки, нет справочника ""Договоры"".'");
		КонецЕсли;
		
		// Реквизиты подписывающего.
		Если ОбъектМетаданных.Реквизиты.Найти("РуководительКонтрагента") <> Неопределено
			И ОбъектМетаданных.Реквизиты.Найти("ДолжностьРуководителя") <> Неопределено 
			И ОбъектМетаданных.Реквизиты.Найти("ЗаРуководителяКонтрагентаПоПриказу") <> Неопределено Тогда
			ОсобенностиДоговоров.Вставить("ЕстьРеквизитыПодписывающего", Истина);
		Иначе
			ОсобенностиДоговоров.Вставить("ЕстьРеквизитыПодписывающего", Ложь);
		КонецЕсли;
		
		// Получим особенности контрагентов.
		Контрагенты = Новый Соответствие;
		ОсобенностиКонтрагентов = Новый Структура;
		ОбъектМетаданных = Соединение.Метаданные.Справочники.Контрагенты;
		
		// Наименование полное.
		Если ОбъектМетаданных.Реквизиты.Найти("НаименованиеПолное") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ЕстьНаименованиеПолное", Истина);
		Иначе
			ОсобенностиКонтрагентов.Вставить("ЕстьНаименованиеПолное", Ложь);
		КонецЕсли;
		
		// Наименование сокращенное.
		Если ОбъектМетаданных.Реквизиты.Найти("НаименованиеСокращенное") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ЕстьНаименованиеСокращенное", Истина);
		Иначе
			ОсобенностиКонтрагентов.Вставить("ЕстьНаименованиеСокращенное", Ложь);
		КонецЕсли;
		
		// Вид контрагента.
		Если ОбъектМетаданных.Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеФизическоеЛицо");
		ИначеЕсли ОбъектМетаданных.Реквизиты.Найти("ЮрФизЛицо") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ЮридическоеФизическоеЛицо", "ЮрФизЛицо");
		Иначе
			ОсобенностиКонтрагентов.Вставить("ЮридическоеФизическоеЛицо", Неопределено);
		КонецЕсли;
		
		// Регистрационные данные.
		Если ОбъектМетаданных.Реквизиты.Найти("РегистрационныйНомер") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("РегистрационныйНомер", "РегистрационныйНомер");
		Иначе
			ОсобенностиКонтрагентов.Вставить("РегистрационныйНомер", Неопределено);
		КонецЕсли;
		Если ОбъектМетаданных.Реквизиты.Найти("СвидетельствоСерияНомер") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("СвидетельствоСерияНомер", "СвидетельствоСерияНомер");
		Иначе
			ОсобенностиКонтрагентов.Вставить("СвидетельствоСерияНомер", Неопределено);
		КонецЕсли;
		Если ОбъектМетаданных.Реквизиты.Найти("СвидетельствоДатаВыдачи") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("СвидетельствоДатаВыдачи", "СвидетельствоДатаВыдачи");
		Иначе
			ОсобенностиКонтрагентов.Вставить("СвидетельствоДатаВыдачи", Неопределено);
		КонецЕсли;
		
		// Банковский счет.
		Если ОбъектМетаданных.Реквизиты.Найти("ОсновнойБанковскийСчет") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ОсновнойБанковскийСчет", "ОсновнойБанковскийСчет");
		Иначе
			ОсобенностиКонтрагентов.Вставить("ОсновнойБанковскийСчет", Неопределено);
		КонецЕсли;
		
		// Документ.
		Если ОбъектМетаданных.Реквизиты.Найти("ДокументУдостоверяющийЛичность") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("ДокументУдостоверяющийЛичность", "ДокументУдостоверяющийЛичность");
		Иначе
			ОсобенностиКонтрагентов.Вставить("ДокументУдостоверяющийЛичность", Неопределено);
		КонецЕсли;
		
		// Размещение контактной информации.
		Если ОбъектМетаданных.ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("КонтактнаяИнформация", "ТабличнаяЧасть");
			ОсобенностиКонтрагентов.Вставить("АдресЭП", "АдресЭП");
		ИначеЕсли Соединение.Метаданные.РегистрыСведений.Найти("КонтактнаяИнформация") <> Неопределено Тогда
			ОсобенностиКонтрагентов.Вставить("КонтактнаяИнформация", "РегистрСведений");
			Если Соединение.Метаданные.РегистрыСведений.КонтактнаяИнформация.Ресурсы.Найти("АдресЭП") <> Неопределено Тогда
				ОсобенностиКонтрагентов.Вставить("АдресЭП", "АдресЭП");
			Иначе
				ОсобенностиКонтрагентов.Вставить("АдресЭП", Неопределено);
			КонецЕсли;
		Иначе
			ОсобенностиКонтрагентов.Вставить("КонтактнаяИнформация", Неопределено);
		КонецЕсли;
		
		// Доступно ли имя предопределенных данных?
		Если Соединение.Метаданные.РежимСовместимости = Соединение.Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
			Или Соединение.Метаданные.РежимСовместимости = Соединение.Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_16 Тогда
			ОсобенностиКонтрагентов.Вставить("ИмяПредопределенныхДанных", Неопределено);
		Иначе
			ОсобенностиКонтрагентов.Вставить("ИмяПредопределенныхДанных", "ИмяПредопределенныхДанных");
		КонецЕсли;
			
		// Виды и типы контактной информации.
		Попытка
			ОсобенностиКонтрагентов.Вставить("ТипАдресЭлектроннойПочты",
				Соединение.Перечисления.ТипыКонтактнойИнформации.Индекс(
					Соединение.Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Исключение
			ОсобенностиКонтрагентов.Вставить("ТипАдресЭлектроннойПочты", Неопределено);
		КонецПопытки;
		Попытка
			Идентификатор = Соединение.Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента.УникальныйИдентификатор();
			ОсобенностиКонтрагентов.Вставить("ЮрАдресКонтрагента", Соединение.String(Идентификатор));
		Исключение
			ОсобенностиКонтрагентов.Вставить("ЮрАдресКонтрагента", Неопределено);
		КонецПопытки;
		Попытка
			Идентификатор = Соединение.Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица.УникальныйИдентификатор();
			ОсобенностиКонтрагентов.Вставить("ЮрАдресФизЛица", Соединение.String(Идентификатор));
		Исключение
			ОсобенностиКонтрагентов.Вставить("ЮрАдресФизЛица", Неопределено);
		КонецПопытки;
		
		// Выберем контрагентов, отбросив лишних.
		ВыборкаКонтрагенты = Соединение.Справочники.Контрагенты.Выбрать();
		Пока ВыборкаКонтрагенты.Следующий() Цикл
			Если ВыборкаКонтрагенты.ПометкаУдаления
				Или ВыборкаКонтрагенты.ЭтоГруппа
				Или Не ЗначениеЗаполнено(ВыборкаКонтрагенты.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьКонтрагента(Соединение, ОсобенностиКонтрагентов, Контрагенты, ВыборкаКонтрагенты.Ссылка);
		КонецЦикла;
		
		// Выберем договоры, дополнив их данными сведения о контрагентах.
		ВыборкаДоговоры = Соединение.Справочники[ИмяСправочникаДоговоры].Выбрать();
		Пока ВыборкаДоговоры.Следующий() Цикл
			Если ВыборкаДоговоры.ПометкаУдаления
				Или ВыборкаДоговоры.ЭтоГруппа
				Или Не ЗначениеЗаполнено(ВыборкаДоговоры.Наименование)
				Или ВыборкаДоговоры[ИмяРеквизитаКонтрагентаДоговора].Пустая() Тогда
				Продолжить;
			КонецЕсли;
			ОбработатьДоговор(Соединение,
				ВыборкаДоговоры.Ссылка,
				ОсобенностиДоговоров,
				ОсобенностиКонтрагентов,
				Контрагенты,
				ИмяРеквизитаКонтрагентаДоговора);
		КонецЦикла;
			
	КонецЕсли;
	
	Если ЗагружатьНоменклатуру Тогда
		
		// Получим особенности номенклатуры.
		Номенклатура = Новый Соответствие;
		ЕдиницыИзмерения = Новый Соответствие;
		ОсобенностиНоменклатуры = Новый Структура;
		ОбъектМетаданных = Соединение.Метаданные.Справочники.Номенклатура;
		
		Если ОбъектМетаданных.Реквизиты.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			ОсобенностиНоменклатуры.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ИначеЕсли ОбъектМетаданных.Реквизиты.Найти("БазоваяЕдиницаИзмерения") <> Неопределено Тогда
			ОсобенностиНоменклатуры.Вставить("ЕдиницаИзмерения", "БазоваяЕдиницаИзмерения");
		Иначе
			ОсобенностиНоменклатуры.Вставить("ЕдиницаИзмерения", Неопределено);
		КонецЕсли;
		
		// Выберем номенклатуру, отбросив лишнюю.
		ВыборкаНоменклатура = Соединение.Справочники.Номенклатура.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			Если (ВыборкаНоменклатура.ПометкаУдаления
				И Не ВыборкаНоменклатура.ЭтоГруппа)
				Или Не ЗначениеЗаполнено(ВыборкаНоменклатура.Наименование) Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьНоменклатуру(Соединение,
				ОсобенностиНоменклатуры,
				Номенклатура,
				ВыборкаНоменклатура.Ссылка,
				ЕдиницыИзмерения);
		КонецЦикла;
		
	КонецЕсли;
	
	// Загрузим контрагентов.
	Результат.Вставить("ЗагруженоКонтрагентов", 0);
	Результат.Вставить("ПропущеноКонтрагентов", 0);
	Если ЗагружатьКонтрагентов Тогда
		ЗагрузитьКонтрагентов(Контрагенты,
			Результат.ЗагруженоКонтрагентов,
			Результат.ПропущеноКонтрагентов);
	КонецЕсли;
	
	// Загрузим номенклатуру.
	Результат.Вставить("ЗагруженоНоменклатуры", 0);
	Результат.Вставить("ПропущеноНоменклатуры", 0);
	Если ЗагружатьНоменклатуру Тогда
		ЗагрузитьНоменклатуру(Номенклатура,
			ЕдиницыИзмерения,
			Результат.ЗагруженоНоменклатуры,
			Результат.ПропущеноНоменклатуры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Загружает контрагентов по подготовленным описаниям.
//
Процедура ЗагрузитьКонтрагентов(Контрагенты, Загружено, Пропущено)
	
	Загружено = 0;
	Пропущено = 0;
	
	Для Каждого КлючИЗначение Из Контрагенты Цикл
		
		ОписаниеКонтрагента = КлючИЗначение.Значение;
		
		Если Не ОписаниеКонтрагента.ЕстьДоговор Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = Новый УникальныйИдентификатор(КлючИЗначение.Ключ);
		
		СсылкаПоИдентификатору = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
		Если СсылкаСуществует(СсылкаПоИдентификатору) Тогда
			
			ОписаниеКонтрагента.Вставить("Ссылка", СсылкаПоИдентификатору);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
				УровеньЖурналаРегистрации.Информация,,
				ОписаниеКонтрагента.Наименование,
				НСтр("ru = 'Пропущен контрагент, найденный по идентификатору'"));
			Пропущено = Пропущено + 1;
			Продолжить;
			
		КонецЕсли;
		
		Ссылка = НайтиКонтрагента(ОписаниеКонтрагента.ИНН,
			ОписаниеКонтрагента.КПП,
			ОписаниеКонтрагента.Наименование);
			
		Если Ссылка <> Неопределено Тогда
			
			ОписаниеКонтрагента.Вставить("Ссылка", Ссылка);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
				УровеньЖурналаРегистрации.Информация,,
				ОписаниеКонтрагента.Наименование,
				НСтр("ru = 'Пропущен контрагент, найденный по ИНН/КПП'"));
			Пропущено = Пропущено + 1;
			Продолжить;
			
		КонецЕсли;
			
		НовыйОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ОписаниеКонтрагента);
		
		Если НовыйОбъект.ЮридическоеФизическоеЛицо = Предприниматель()
			Или НовыйОбъект.ЮридическоеФизическоеЛицо = ФизЛицо() Тогда
			НовыйОбъект.ФИО = НовыйОбъект.Наименование;
		КонецЕсли;
		
		// Получим расшифровку подписи и строки для преамбулы.
		Если ОписаниеКонтрагента.Подписывает <> Неопределено Тогда
			
			Должность = ОписаниеКонтрагента.Подписывает.Должность;
			ФИО = ОписаниеКонтрагента.Подписывает.ФИО;
			Основание = ОписаниеКонтрагента.Подписывает.Основание;
			
			Если ЗначениеЗаполнено(Должность) Тогда
				НовыйОбъект.ДолжностьПодписывающего = Должность;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФИО) Тогда
				
				НовыйОбъект.РасшифровкаПодписи = РаботаСКонтрагентамиВызовСервера.ПолучитьРасшифровкуПодписи(ФИО);
				
				Если Прав(ВРег(СокрЛП(ФИО)), 3) = "ВНА" Тогда
					Пол = 2; // женский
				Иначе
					Пол = 1; // мужской
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Должность) Тогда
					Должность = НРег(Лев(Должность, 1)) + Сред(Должность, 2);
					НовыйОбъект.ВЛице = СтрШаблон("%1 %2",
						СклонениеПредставленийОбъектовВызовСервера.ПросклонятьПредставление(Должность, 2),
						СклонениеПредставленийОбъектовВызовСервера.ПросклонятьФИО(ФИО, 2, , Пол));
				Иначе
					НовыйОбъект.ВЛице = 
						СклонениеПредставленийОбъектовВызовСервера.ПросклонятьФИО(ФИО, 2, , Пол);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Основание) Тогда
				НовыйОбъект.ДействуетНаОсновании = Основание;
			КонецЕсли;
			
		КонецЕсли;
		
		НовыйОбъект.ОбменДанными.Загрузка = Истина;
		НовыйОбъект.Записать();
		
		ОписаниеКонтрагента.Вставить("Ссылка", НовыйОбъект.Ссылка);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
			УровеньЖурналаРегистрации.Информация,,
			НовыйОбъект,
			НСтр("ru = 'Загружен новый контрагент'"));
		
		Загружено = Загружено + 1;
		
	КонецЦикла;
	
КонецПроцедуры 

// Загружает номенклатуру по подготовленным описаниям.
//
Процедура ЗагрузитьНоменклатуру(Номенклатура, ЕдиницыИзмерения, Загружено, Пропущено)
	
	Загружено = 0; Пропущено = 0;
	
	Для Каждого КлючИЗначение Из ЕдиницыИзмерения Цикл
		
		
		ОписаниеЕдиницы = КлючИЗначение.Значение;
		Идентификатор = Новый УникальныйИдентификатор(КлючИЗначение.Ключ);
		
		СсылкаПоИдентификатору = Справочники.КлассификаторЕдиницИзмерения.ПолучитьСсылку(Идентификатор);
		Если СсылкаСуществует(СсылкаПоИдентификатору) Тогда
			ОписаниеЕдиницы.Ссылка = СсылкаПоИдентификатору;
			Продолжить;
		КонецЕсли;
		
		Ссылка = НайтиЕдиницуИзмерения(ОписаниеЕдиницы.Наименование);
		Если Ссылка <> Неопределено Тогда
			ОписаниеЕдиницы.Ссылка = Ссылка;
		КонецЕсли;
		
		НовыйОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
		НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
		
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ОписаниеЕдиницы,, "Ссылка");
		
		НовыйОбъект.ОбменДанными.Загрузка = Истина;
		НовыйОбъект.Записать();
		
		ОписаниеЕдиницы.Ссылка = НовыйОбъект.Ссылка;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Номенклатура Цикл
		
		ОписаниеНоменклатуры = КлючИЗначение.Значение;
		Идентификатор = Новый УникальныйИдентификатор(КлючИЗначение.Ключ);
		СсылкаПоИдентификатору = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
		Если СсылкаСуществует(СсылкаПоИдентификатору) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
				УровеньЖурналаРегистрации.Информация,,
				ОписаниеНоменклатуры.Наименование,
				НСтр("ru = 'Пропущена номенклатура, найденная по идентификатору'"));
			Пропущено = Пропущено + 1;
			Продолжить;
		КонецЕсли;
		
		Ссылка = НайтиНоменклатуру(ОписаниеНоменклатуры.ЭтоГруппа,
			ОписаниеНоменклатуры.Наименование);
		Если Ссылка <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка из 1С:Бухгалтерии'"),
				УровеньЖурналаРегистрации.Информация,,
				ОписаниеНоменклатуры.Наименование,
				НСтр("ru = 'Пропущена номенклатура, найденная по наименованию'"));
			Пропущено = Пропущено + 1;
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеНоменклатуры.ЭтоГруппа Тогда
			НовыйОбъект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе
			НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
		ЗаполнитьЗначенияСвойств(НовыйОбъект, ОписаниеНоменклатуры,, "Родитель");
		
		Если ЗначениеЗаполнено(ОписаниеНоменклатуры.Родитель) Тогда
			ИдентификаторРодителя = Новый УникальныйИдентификатор(ОписаниеНоменклатуры.Родитель);
			НовыйОбъект.Родитель = Справочники.Номенклатура.ПолучитьСсылку(ИдентификаторРодителя);
		КонецЕсли;
		
		Если Не ОписаниеНоменклатуры.ЭтоГруппа
			И ЗначениеЗаполнено(ОписаниеНоменклатуры.ЕдиницаИзмерения) Тогда
			НовыйОбъект.ЕдиницаИзмерения = ЕдиницыИзмерения[ОписаниеНоменклатуры.ЕдиницаИзмерения].Ссылка;
		КонецЕсли;
		
		НовыйОбъект.ОбменДанными.Загрузка = Истина;
		НовыйОбъект.Записать();
		
		Загружено = Загружено + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет существование указанной ссылки в ИБ.
//
Функция СсылкаСуществует(Ссылка)
	
	ИмяТаблицы = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Имя;
	
	Запрос = Новый Запрос(
		СтрШаблон(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.%1
			|ГДЕ
			|	Ссылка = &Ссылка",
			ИмяТаблицы));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Находит контрагента по реквизитам.
//
Функция НайтиКонтрагента(ИНН, КПП, Наименование) 
	
	// Поиск по ИНН и КПП.
	Если ЗначениеЗаполнено(ИНН)
		И ЗначениеЗаполнено(КПП) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.Контрагенты
			|ГДЕ
			|	ИНН = &ИНН
			|	И КПП = &КПП
			|	И НЕ ПометкаУдаления
			|");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск физлица по ИНН.
	Если ЗначениеЗаполнено(ИНН)
		И СтрДлина(ИНН) = 12 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.Контрагенты
			|ГДЕ
			|	ИНН = &ИНН
			|	И НЕ ПометкаУдаления
			|");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск по ИНН и наименованию без учета КПП.
	Если ЗначениеЗаполнено(ИНН)
		И ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.Контрагенты
			|ГДЕ
			|	ИНН = &ИНН
			|	И Наименование = &Наименование
			|	И НЕ ПометкаУдаления
			|");
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Находит номенклатуру по наименованию.
//
Функция НайтиНоменклатуру(ЭтоГруппа, Наименование) 
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.Номенклатура
			|ГДЕ
			|	ЭтоГруппа = &ЭтоГруппа
			|	И Наименование = &Наименование
			|	И НЕ ПометкаУдаления
			|");
		Запрос.УстановитьПараметр("ЭтоГруппа", ЭтоГруппа);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Находит единицу измерения по наименованию.
//
Функция НайтиЕдиницуИзмерения(Наименование) 
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.КлассификаторЕдиницИзмерения
			|ГДЕ
			|	Наименование = &Наименование
			|	И НЕ ПометкаУдаления
			|");
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Краткое получение значения перечисления ЮридическоеФизическоеЛицо.
//
Функция ЮрЛицо()
	
	Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	
КонецФункции

// Краткое получение значения перечисления ЮридическоеФизическоеЛицо.
//
Функция Предприниматель()
	
	Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ИндивидуальныйПредприниматель");
	
КонецФункции

// Краткое получение значения перечисления ЮридическоеФизическоеЛицо.
//
Функция ФизЛицо()
	
	Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
КонецФункции

#КонецОбласти