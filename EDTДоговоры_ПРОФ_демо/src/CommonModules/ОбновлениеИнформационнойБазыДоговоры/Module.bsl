////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы демонстрационной конфигурации (БиблиотекаСтандартныхПодсистемДемо).
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ВыполнятьВсегдаПриСменеВерсии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ОбработчикСОшибкой";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Варианты отчетов ДО
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "НастройкиВариантовОтчетовДокументооборот.ЗаполнитьНастройкиВариантовОтчетовДокументооборот";
	Обработчик.РежимВыполнения = "Оперативно";
	
	// Обработчики, выполняемые при заполнении пустой ИБ.
	//
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ОбновитьПредопределенныеКлючевыеОперации";
	
	// Обработчики, выполняемые при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "1.0.0.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ПерейтиНаВерсию_1_0_0_12"; // удалить при выпуске
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_0_0_12() Экспорт
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда 
		Константы.ПоказыватьПользователей.Установить(Ложь);
	Иначе 
		Константы.ПоказыватьПользователей.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "ДоговорыБазовая";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДоговоры.ПерейтиСБазовойВерсииНаПРОФ";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "ПредыдущееИмяКонфигурацииБазовая" Тогда
		Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

// Демонстрирует процедуру-обработчик обновления и первоначального заполнения
// данных ИБ, которая выполняется однократно при переходе на версию 1.0.0.0.
//
Процедура ПервыйЗапуск() Экспорт
	
	Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Истина;
	
	Константы.ВыполнятьЗамерыПроизводительности.Установить(Истина);
	
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("796"); // шт
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("166"); // кг
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("778"); // упак
	Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду("715"); // пара
	
	Константы.ИспользоватьСервисСклоненияMorpher.Установить(Истина);
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда 
		Константы.ПоказыватьПользователей.Установить(Ложь);
	Иначе 
		Константы.ПоказыватьПользователей.Установить(Истина);
	КонецЕсли;
	
	// Настройка центра мониторинга "по умолчанию"
	ПараметрыЦентраМониторинга = ЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов();
	
	ПараметрыСервисаПоУмолчанию = ЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов();
	ПараметрыЦентраМониторинга.Вставить("СерверПоУмолчанию", ПараметрыСервисаПоУмолчанию.Сервер);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурсаПоУмолчанию", ПараметрыСервисаПоУмолчанию.АдресРесурса);
	ПараметрыЦентраМониторинга.Вставить("ПортПоУмолчанию", ПараметрыСервисаПоУмолчанию.Порт);
	ПараметрыЦентраМониторинга.Вставить("ВключитьЦентрМониторинга", Истина);
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьПроизводительность", Истина);
	ПараметрыЦентраМониторинга.Вставить("РегистрироватьПроизводительностьТехнологическую", Истина);
	
	ЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	РегЗадание = ЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
	ЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	// Конец настройки центра мониторинга	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

// Демонстрирует процедуру-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	// Проверка необходимости обновления критичных общих данных.
	ТребуетсяОбновитьКритичныеОбщиеДанные = Ложь;
	// Конец Проверка необходимости обновления критичных общих данных.
	Если ТребуетсяОбновитьКритичныеОбщиеДанные Тогда
		Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
			Параметры.МонопольныйРежим = Истина;
			Возврат;
		КонецЕсли;
		// Код обновления критичных общих данных.
	КонецЕсли;
	
КонецПроцедуры

// Тестовый обработчик, предназначенный для имитации ошибки при обновлении.
//
Процедура ОбработчикСОшибкой() Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриОбновлении", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриОбновлении", Ложь, ИмяПользователя());
		ТекстСообщения = НСтр("ru = 'Процедура ОбработчикСОшибкой выполнилась с ошибкой.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных ключевых операций.
Процедура ОбновитьПредопределенныеКлючевыеОперации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлючевыеОперации.Ссылка,
	               |	КлючевыеОперации.ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.КлючевыеОперации КАК КлючевыеОперации
	               |ГДЕ
	               |	КлючевыеОперации.Имя = """"
	               |	И КлючевыеОперации.Предопределенный";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КлючеваяОперация = Выборка.Ссылка.ПолучитьОбъект();
		КлючеваяОперация.Имя = Выборка.ИмяПредопределенныхДанных;
		КлючеваяОперация.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Пример перехода с конфигурации с именем "БиблиотекаСтандартныхПодсистемДемоБазовая".
// 
Процедура ПерейтиСБазовойВерсииНаПРОФ() Экспорт
	
	Константы.ПоказыватьПользователей.Установить(Истина);
	
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Выполнен обработчик перехода ПерейтиСБазовойВерсииНаПРОФ'", Метаданные.ОсновнойЯзык.КодЯзыка));
	
КонецПроцедуры

// Выполняется на версию 2.3.1.21. Актуализирует признак использования
// наборов свойств справочника Внешние пользователи.
//
Процедура ОбновитьИспользованиеНаборовСвойствВнешнихПользователей() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВнешниеПользователи", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти