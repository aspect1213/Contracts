
Функция УчитыватьНДС() Экспорт 
	
	Возврат Константы.ЯвляетсяПлательщикомНДС.Получить();
	
КонецФункции	

Функция ЕстьАвтозаполнение(ВидДокумента, ДляКого) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДляКого) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из ВидДокумента.ПравилаАвтозаполнения Цикл
		Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) И Строка.ДляКого = ДляКого Тогда 
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция НомерДокументаУникален(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СпособНумерации = Объект.ВидДокумента.СпособНумерации;
	Если СпособНумерации = Перечисления.СпособыНумерации.Вручную Тогда 
		Если НРег(Объект.НомерДокумента) = НСтр("ru = 'б\н'") 
		 Или НРег(Объект.НомерДокумента) = НСтр("ru = 'б/н'") Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка
	|ИЗ
	|	Справочник.ДоговорныеДокументы КАК Справочник
	|ГДЕ
	|	Справочник.НомерДокумента = &НомерДокумента
	|	И Справочник.ДатаДокумента МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации
	|	И Справочник.ВидДокумента = &ВидДокумента
	|	И Справочник.Ссылка <> &Ссылка
	|	И Не Справочник.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерДокумента", Объект.НомерДокумента);
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", НачалоГода(Объект.ДатаДокумента));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", КонецГода(Объект.ДатаДокумента));
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ЭтоДоговор = (Объект.ВидДокумента.Тип = Перечисления.ТипыДоговорныхДокументов.Договор);
	Если Не ЭтоДоговор Тогда 
		Запрос.Текст = Запрос.Текст + " И (Родитель = &Родитель) ";
		Запрос.УстановитьПараметр("Родитель", Объект.Родитель);
	КонецЕсли;	
	
	Если СпособНумерации = Перечисления.СпособыНумерации.Вручную Тогда 
		Запрос.Текст = Запрос.Текст + " И (Контрагент = &Контрагент) ";
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции	
	
// Заполняет условное оформление пометки удаленных элементов в списке документов.
//
// Параметры:
//    Список - ДинамическийСписок - договорных документов.
//
Процедура СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь, Ложь, Ложь, Истина, ));
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	Отбор.ПравоеЗначение = Истина;
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Сформировать заголовок группы Файлы
Функция КоличествоФайловВЗаголовок(КоличествоФайлов) Экспорт
	
	Заголовок = НСтр("ru = 'Файлы'");
	
	Если КоличествоФайлов <> 0 Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			КоличествоФайлов);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Заполняет список (таблицу значений) файлов в карточке документа.
//
// Параметры:
//   Форма                    - УправляемаяФорма - форма документа, в котором заполняется список файлов
//   ЭтоСписок                - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ЗаполнитьСписокФайловДокумента(Форма, ЭтоСписок = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		Документ = Форма.ТекущийДокумент;
	Иначе 
		Документ = Форма.Объект;
	КонецЕсли;
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		Документ.Ссылка, 
		Форма.ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(МассивФайлов);
	
	Форма.ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	Форма.КоличествоФайлов = Форма.Файлы.Количество();
	
КонецПроцедуры

// Получает данные одного файла для обновления строки списка в карточке документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Структура - структура реквизитов файла
//
Функция ПолучитьДанныеФайлаДляСписка(Файл) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Файлы = Новый Массив;
	Файлы.Добавить(Файл);
	
	Таблица = ПолучитьДанныеФайловДляСписка(Файлы);
	
	Для Инд = 0 По Таблица.Колонки.Количество()-1 Цикл
		ИмяКолонки = Таблица.Колонки[Инд].Имя;
		
		Если Таблица.Количество() > 0 Тогда 
			СтруктураДанных.Вставить(ИмяКолонки, Таблица[0][Инд]);
		Иначе
			СтруктураДанных.Вставить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные нескольких файла для обновления строк списка в карточке документа
//
// Параметры
//    Файлы - массив - массив ссылок на файлы
//
// Возвращаемое значение
//    ТаблицаЗначений - таблица с реквизитами файлов
//
Функция ПолучитьДанныеФайловДляСписка(Файлы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование КАК Наименование,
	|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
	|	Файлы.Ссылка,
	|	Файлы.ДатаСоздания,
	|	Файлы.Автор,
	|	Файлы.Редактирует,
	|	Файлы.ХранитьВерсии,
	|	Файлы.ПометкаУдаления,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
	|	Файлы.ТекущаяВерсияРазмер КАК Размер,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РедактируетТекущийПользователь,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	ВЫБОР
	|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СозданИзШаблона,
	|	ПОДСТРОКА("""", 0, 255) КАК ПолноеИмяФайлаВРабочемКаталоге,
	|	ДАТАВРЕМЯ(2000, 1, 1, 1, 1, 1) КАК ДатаМодификацииУниверсальнаяВБазе
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО Файлы.Ссылка = КешИнформацииОбОбъектах.Объект
	|ГДЕ
	|	Файлы.Ссылка В(&Файлы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
	
		Если ФайлыПисьмаСтрока.РедактируетТекущийПользователь = Истина 
				И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
				ФайлыПисьмаСтрока.Ссылка);
			ФайлыПисьмаСтрока.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;	
			ФайлыПисьмаСтрока.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
						
		КонецЕсли;	
		
	КонецЦикла;
			
	Возврат ТаблицаФайлов;
	
КонецФункции

// Помечает переданные в массиве файлы на удаление
//
// Параметры
//   Форма           - УправляемаяФорма - форма документа, в котором файлы помечаются на удаление
//   МассивФайлов    - Массив - массив обрабатываемых файлов
//   ПометкаУдаления - Булево - признак снятия/установки пометки на удаление
//   ЭтоСписок       - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ПометитьФайлыНаУдаление(Форма, МассивФайлов, ПометкаУдаления, ЭтоСписок = Ложь) Экспорт 
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, Форма.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	Если Не Форма.ПоказыватьУдаленныеФайлы Тогда 
		ЗаполнитьСписокФайловДокумента(Форма, ЭтоСписок);
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает структуру с основными данными переданного документа
//
// Параметры:
//   ТекущийДокумент        - СправочникСсылка.ВнутреннийДокумент, СправочникСсылка.ВходящийДокумент,
//                          - СправочникСсылка.ИсходящийДокумент - документ, данные которого необходимо получить
//   ПоказыватьУдаленныеФайлы - Булево - Истина, если необходимо показывать помеченные на удаление файлы
//
// Возвращаемое значение:
//   ДанныеМиникарточки - Структура – структура с основными данными документа
//
Функция ПолучитьДанныеМиникарточки(ТекущийДокумент, ПоказыватьУдаленныеФайлы = Ложь) Экспорт 
	
	ДанныеМиникарточки = Новый Структура();
	ДанныеМиникарточки.Вставить("Обзор", "");
	ДанныеМиникарточки.Вставить("Файлы", Новый Массив);
	ДанныеМиникарточки.Вставить("ДоступныеПоля", "");
	ДанныеМиникарточки.Вставить("ЗапретитьРедактироватьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ЗапретитьУдалятьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ПолныеПрава", Ложь);
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 
		
		ДанныеМиникарточки.ПолныеПрава = РольДоступна("ПолныеПрава");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &ТекущийДокумент
			|	И (&ПоказыватьУдаленныеФайлы
			|			ИЛИ НЕ Файлы.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Файлы.Наименование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДоговорныеДокументы.Ссылка,
			|	ДоговорныеДокументы.Наименование,
			|	ДоговорныеДокументы.Описание КАК Содержание,
			|	ДоговорныеДокументы.СуммаДокумента,
			|	ДоговорныеДокументы.ДатаНачалаДействия,
			|	ДоговорныеДокументы.ДатаОкончанияДействия,
			|	ДоговорныеДокументы.ДополнительныеРеквизиты.(
			|		Ссылка,
			|		НомерСтроки,
			|		Свойство,
			|		Значение,
			|		ТекстоваяСтрока
			|	),
			|	ДоговорныеДокументы.Контрагент
			|ИЗ
			|	Справочник.ДоговорныеДокументы КАК ДоговорныеДокументы
			|ГДЕ
			|	ДоговорныеДокументы.Ссылка = &ТекущийДокумент";
		
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Запрос.УстановитьПараметр("ПоказыватьУдаленныеФайлы", ПоказыватьУдаленныеФайлы);
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		
		ДанныеМиникарточки.Файлы = ПолучитьДанныеФайлов(РезультатыЗапросов[0]);
		ДанныеМиникарточки.Обзор = ПолучитьДанныеОбзора(РезультатыЗапросов[1]);
		
	КонецЕсли;
	
	Возврат ДанныеМиникарточки;
	
КонецФункции

Функция ПолучитьДанныеОбзора(РезультатЗапроса)
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	HTMLТекст = "<html>
		|<head>
		|<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  10px; 		 
		|		margin-left: 10px; 
		|		font-family: Arial, sans-serif; 
		|		font-size:   10pt;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 7px;}
		|</style>
		|<body>";
	
	Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагент:'"), Выборка.Контрагент);
	Иначе 
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагент:'"), НСтр("ru = 'не указан'"));
	КонецЕсли;
	
	Если Выборка.СуммаДокумента > 0 Тогда 
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Сумма:'"), 
			Формат(Выборка.СуммаДокумента, "ЧДЦ=2; ЧН=0") + " " + Строка("руб."));
	КонецЕсли;
		
	СрокДействияСтрока = ДоговорныеДокументыКлиентСервер.СформироватьПредставлениеСрокаДействия(Выборка);
	Если ЗначениеЗаполнено(СрокДействияСтрока) Тогда 
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Срок действия:'"), СрокДействияСтрока);
	КонецЕсли;
	
	ДополнительныеРеквизиты = Выборка.ДополнительныеРеквизиты.Выгрузить();
	Для Каждого Строка Из ДополнительныеРеквизиты Цикл
		СвойствоИспользуется = УправлениеСвойствами.ПроверитьСвойствоУОбъекта(Выборка.Ссылка, Строка.Свойство);
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Свойство, "ПометкаУдаления");
		Значение = ?(ЗначениеЗаполнено(Строка.ТекстоваяСтрока), Строка.ТекстоваяСтрока, Строка.Значение);
		
		Если Не ПометкаУдаления И СвойствоИспользуется И ЗначениеЗаполнено(Значение) Тогда
			ДобавитьДопРеквизит(HTMLТекст, Строка.Свойство, Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Выборка.Содержание) Тогда
		Содержание = Выборка.Содержание;
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтрЗаменить(РаботаС_HTML.ЗаменитьСпецСимволыHTML(Содержание), Символы.ПС, "<br>");
	КонецЕсли;
	
	Если Прав(HTMLТекст, 6) = "<body>" Тогда 
		Заголовок = Выборка.Заголовок;
		ДобавитьРеквизит(HTMLТекст, "", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Заголовок));
	КонецЕсли;	
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Возврат HTMLТекст;
	
КонецФункции

Функция ПолучитьДанныеФайлов(РезультатЗапроса)
	
	Файлы = Новый Массив;
	
	МассивФайлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(МассивФайлов);
	
	Для Каждого Строка Из ТаблицаФайлы Цикл
		СтрокаФайлы = Новый Структура(
		"Наименование, 
		|ИндексКартинки, 
		|Описание, 
		|Ссылка,
		|СозданИзШаблона,
		|Редактирует,
		|Автор,
		|РедактируетТекущийПользователь,
		|Расширение,
		|ПометкаУдаления,
		|СозданПоШаблонуДокумента,
		|ХранитьВерсии");
		
		ЗаполнитьЗначенияСвойств(СтрокаФайлы, Строка);
		Файлы.Добавить(СтрокаФайлы);
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

Процедура ДобавитьПодпись(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#333333>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет)
	
	Значение = ЗначениеДанных;

	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
			Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+"><B>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</B></FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + "<B>";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</B>";
		КонецЕсли;
		
	ИначеЕсли  ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+"><B>";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</B></FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + "<B>";
			HTMLТекст = HTMLТекст +Значение;
			HTMLТекст = HTMLТекст + "</B>";
		КонецЕсли;	
	Иначе
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1><B>%2</B></A>",
			ПолучитьНавигационнуюСсылку(Значение),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Строка(Значение)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "")
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

Процедура ДобавитьДопРеквизит(HTMLТекст, Свойство, Значение)
	
	ФорматСвойства = Свойство.ФорматСвойства;
	
	Если Не ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ТипЗначения = Свойство.ТипЗначения;
		
		Если ТипЗначения.СодержитТип(Тип("Дата")) Тогда 
			Если ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда 
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'T';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда 
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'D';";
			ИначеЕсли ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя Тогда 	
				ФорматСвойства = ФорматСвойства + "ДЛФ = 'DT';";
			КонецЕсли;	
		КонецЕсли;	
		
		Если ТипЗначения.СодержитТип(Тип("Число")) Тогда 	
			Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
			РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			
			ФорматСвойства = ФорматСвойства + "ЧЦ = '" + Разрядность + "';";
			ФорматСвойства = ФорматСвойства + "ЧДЦ = '" + РазрядностьДробнойЧасти + "';";
		КонецЕсли;	
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ФорматСвойства) Тогда 
		ДобавитьРеквизит(HTMLТекст, Строка(Свойство.Заголовок) + ":", Формат(Значение, ФорматСвойства));
	Иначе
		ДобавитьРеквизит(HTMLТекст, Строка(Свойство.Заголовок) + ":", Значение);
	КонецЕсли;	
	
КонецПроцедуры

// Формирует список получателей и контактных лиц для автоподбора
Функция СформироватьДанныеВыбораПолучателяДляЖурналаПередачи(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|	И НЕ Пользователи.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &Текст
		|	И НЕ Контрагенты.ПометкаУдаления");
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Записывает ошибку в журнал регистрации
// 
// Параметры
// - ИмяСобытия - Строка - имя события
// - ТекстОшибки - Строка - текст ошибки
// - Данные - ссылка на объект базы
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, Знач ТекстОшибки, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,
		Данные,
		ТекстОшибки);
	
КонецПроцедуры

// Записывает новую номенклатуру
// 
// Параметры:
// - ТекущаяСтрока - Строка - строка табличной части Товары
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.Номенклатура - созданное значение
// 
Функция СоздатьНоменклатуру(НоменклатураСтрока, ЕдиницаИзмерения = Неопределено, Цена = 0, СтавкаНДС = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваяНоменклатура.Наименование = СокрЛП(НоменклатураСтрока);
	НоваяНоменклатура.ЕдиницаИзмерения = ЕдиницаИзмерения;
	НоваяНоменклатура.Цена = Цена;
	НоваяНоменклатура.СтавкаНДС = СтавкаНДС;
	НоваяНоменклатура.Записать();
	
	Возврат НоваяНоменклатура.Ссылка;
	
КонецФункции

Функция ПолучитьДанныеВыбораНоменклатуры(Текст) Экспорт 
	
	Параметры = Новый Структура("СтрокаПоиска", Текст);
	Возврат Справочники.Номенклатура.ПолучитьДанныеВыбора(Параметры);
	
КонецФункции

// Переносит всю номенклатуру группы в таблицу формы
// 
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в котором заполняется таблица товаров
//  ГруппаНоменклатуры - СправочникСсылка.Номенклатура - ссылка на группу номенклатур
// 
Процедура ПеренестиНоменклатуруИзГруппы(Форма, ГруппаНоменклатуры) Экспорт 
	
	Объект = Форма.Объект;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.Наименование КАК НоменклатураСтрока,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.Цена,
		|	Номенклатура.СтавкаНДС
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Родитель В ИЕРАРХИИ(&ГруппаНоменклатуры)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа";
		
	Запрос.Параметры.Вставить("ГруппаНоменклатуры", ГруппаНоменклатуры);
	МассивНоменклатуры = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос.Параметры.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Ссылка));
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НайденнаяСтрока = Объект.Товары.Добавить();
			НайденнаяСтрока.Номенклатура = Выборка.Ссылка;
			НайденнаяСтрока.НоменклатураСтрока = Выборка.НоменклатураСтрока;
			НайденнаяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			НайденнаяСтрока.Количество = 1;
			
			Если Форма.ИмяФормы <> "Справочник.ВидыДокументов.Форма.ФормаЭлемента" Тогда 
				НайденнаяСтрока.Цена = Выборка.Цена;
				НайденнаяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
				ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
			КонецЕсли;
			
		Иначе 
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				
				Если Форма.ИмяФормы <> "Справочник.ВидыДокументов.Форма.ФормаЭлемента" Тогда 
					ДоговорныеДокументыКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если у вида документа есть шаблоны с автозаполнением таблиц
// 
// Параметры:
//  ВидДокумента   - СправочникСсылка.ВидыДокументов - проверяемый вид документа
//  ВидКонтрагента - Перечисления.ЮридическоеФизическоеЛицо - проверяемый вид контрагента
//
// Возвращаемое значение:
//  Булево - Истина, если у вида документа есть правила заполнения таблиц файла
// 
Функция ЕстьЗаполнениеТаблицыТоваров(ВидДокумента, ВидКонтрагента) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВидКонтрагента) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов.ДанныеДляАвтозаполнения КАК ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения
		|ГДЕ
		|	ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ВладелецФайла = &ВидДокумента
		|	И ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ДляКого = &ВидКонтрагента
		|	И ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.РеквизитТабличнойЧасти
		|	И НЕ ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ПометкаУдаления";
		
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Запрос.Параметры.Вставить("ВидКонтрагента", ВидКонтрагента);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина, если у вида документа есть шаблон с автозаполнением переданного реквизита
// 
// Параметры:
//  ВидДокумента       - СправочникСсылка.ВидыДокументов - проверяемый вид документа
//  ВидКонтрагента     - Перечисления.ЮридическоеФизическоеЛицо - проверяемый вид контрагента
//  ИмяРеквизита       - Строка - проверяемый реквизит объекта
//  РеквизитРодитель   - Строка - название реквизита родителя объекта, если он подчинен не документу, например Контрагент
//
// Возвращаемое значение:
//  Булево - Истина, если у вида документа есть правило автозаполнения для переданного реквизита
// 
Функция РеквизитУчаствуетВЗаполнении(ВидДокумента, ВидКонтрагента, ИмяРеквизита, РеквизитРодитель = "") Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ".", "_");
	
	Если ЗначениеЗаполнено(РеквизитРодитель) Тогда 
		РеквизитПоиска = Лев(РеквизитРодитель, 5) + "_" + Лев(ИмяРеквизита, 14);
	Иначе
		РеквизитПоиска = Лев(ИмяРеквизита, 20);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов.ДанныеДляАвтозаполнения КАК ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения
		|ГДЕ
		|	ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ВладелецФайла = &ВидДокумента
		|	И ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ДляКого = &ВидКонтрагента
		|	И (ВЫРАЗИТЬ(ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.ТермДляЗамены КАК СТРОКА(20))) = &ИмяРеквизита
		|	И НЕ ПравилаАвтозаполненияФайловДанныеДляАвтозаполнения.Ссылка.ПометкаУдаления";
		
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Запрос.Параметры.Вставить("ВидКонтрагента", ВидКонтрагента);
	Запрос.Параметры.Вставить("ИмяРеквизита", РеквизитПоиска);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОтразитьВозвратОригинала(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналПередачиДокументов.Период,
	|	ЖурналПередачиДокументов.Документ,
	|	ЖурналПередачиДокументов.Возвращен
	|ИЗ
	|	РегистрСведений.ЖурналПередачи КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И НЕ ЖурналПередачиДокументов.Возвращен";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Возвращен Тогда
			МенеджерЗаписи = РегистрыСведений.ЖурналПередачи.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период = Выборка.Период;
			МенеджерЗаписи.Документ = Документ;
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Возвращен = Истина;
			МенеджерЗаписи.ДатаВозврата = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

